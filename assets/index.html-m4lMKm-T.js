import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as a,o as n}from"./app-BcBpUkWz.js";const t={};function l(d,s){return n(),e("div",null,s[0]||(s[0]=[a(`<p>基于React项目使用</p><h1 id="安装ffmpeg-wasm" tabindex="-1"><a class="header-anchor" href="#安装ffmpeg-wasm"><span><strong>安装ffmpeg.wasm</strong></span></a></h1><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @ffmpeg/ffmpeg</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># or</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @ffmpeg/ffmpeg</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要在 node 环境中使用 ffmpeg.wasm，还需要安装</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> npm</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @ffmpeg/core</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># or</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> yarn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> add</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> @ffmpeg/core</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者您可以使用 CDN</p><h1 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use"><span><strong>How to Use</strong></span></a></h1><h2 id="createffmpeg" tabindex="-1"><a class="header-anchor" href="#createffmpeg"><span><strong>createFFmpeg（）</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>createFFmpeg 是一个创建 ffmpeg 实例的工厂函数。</span></span>
<span class="line"><span>//参数</span></span>
<span class="line"><span>options自定义选项的对象</span></span>
<span class="line"><span>    corePathffmpeg-core.js 脚本的路径</span></span>
<span class="line"><span>    log打开所有日志的布尔值，默认为false</span></span>
<span class="line"><span>    logger一个获取日志消息的函数，一个简单的例子是({ message }) =&gt; console.log(message)</span></span>
<span class="line"><span>    progress跟踪进度的功能，一个简单的例子是p =&gt; console.log(p)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sample" tabindex="-1"><a class="header-anchor" href="#sample"><span><strong>sample</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;">createFFmpeg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> FFmpeg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> ffmpeg</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createFFmpeg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  corePath</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;./node_modules/@ffmpeg/core/dist/ffmpeg-core.js&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  log</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ffmpeg-load" tabindex="-1"><a class="header-anchor" href="#ffmpeg-load"><span><strong>ffmpeg.load()</strong></span></a></h2><hr><p>依赖 Emscripten 提供的 FS 方法。<em><a href="https://emscripten.org/docs/api_reference/Filesystem-API.html" target="_blank" rel="noopener noreferrer">https://emscripten.org/docs/api_reference/Filesystem-API.html</a></em></p><p>在使用其他的方法之前必须要调用的API：</p><p>l 从远程服务器下载 ffmpeg-core.js（大约 25MB）</p><p>l 实例化 ffmpeg.wasm wasm 代码</p><h2 id="文件系统-fs" tabindex="-1"><a class="header-anchor" href="#文件系统-fs"><span><strong>文件系统（FS）</strong></span></a></h2><p>将文件写入 MEMFS 作为 ffmpeg.wasm 的输入</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>1.ffmpeg.FS(&#39;writeFile&#39;, &#39;filename&#39;, data)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>从 MEMFS 读取文件作为 ffmpeg.wasm 的输出</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>2. ffmpeg.FS(&#39;readFile&#39;, &#39;filename&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>删除 MEMFS 中的文件</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>3. ffmpeg.FS(&#39;unlink&#39;, &#39;filename&#39;)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>列出特定路径内的文件</p><h3 id="解释" tabindex="-1"><a class="header-anchor" href="#解释"><span><strong>解释：</strong></span></a></h3><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>MEMFS就像是一块硬盘。可以里面存储数据，并取出数据</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="sharedarraybuffer" tabindex="-1"><a class="header-anchor" href="#sharedarraybuffer"><span><strong>SharedArrayBuffer</strong></span></a></h2><p>SharedArrayBuffer 是 JavaScript 中一种相当新的数据类型，由于安全问题，目前大多数浏览器仍然缺乏完全支持。但是在 ffmpeg.wasm 中，要启用 pthread / 多线程支持以加快速度，它是需要使用的数据类型。</p><ul><li>SharedArrayBuffer 介绍：<em>https 😕/developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer</em></li></ul><h2 id="ffmpeg-run-args" tabindex="-1"><a class="header-anchor" href="#ffmpeg-run-args"><span><strong>ffmpeg.run(...args)</strong></span></a></h2><p>这是 ffmpeg.wasm 中的主要功能，你可以把它想象成 ffmpeg 原生的 cli，你需要传递的也是一样的。</p><p>args 字符串参数，就像 cli 工具一样。</p><h3 id="前置知识-video" tabindex="-1"><a class="header-anchor" href="#前置知识-video"><span><strong>前置知识-video</strong></span></a></h3><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>格式：准确的来说是视频文件的一种的封装格式或者也叫做容器格式里面包含视频流，音频流，字幕、章节和一些其他的元数据</span></span>
<span class="line"><span>编码：解决的是如何将每一帧的画面存储成二进制的数据保存在硬盘上或者网路传输</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参数详解" tabindex="-1"><a class="header-anchor" href="#参数详解"><span><strong>参数详解</strong></span></a></h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>首先读取文件</td><td>ffmpeg.FS(&quot;writeFile&quot;, &quot;test.avi&quot;, await fetchFile(&quot;/flame.avi&quot;));此时MEMFS内存中存在一个名字为test.avi的文件</td></tr><tr><td>-i</td><td>用于输入文件</td></tr><tr><td>-r</td><td>指定文件的帧率</td></tr><tr><td>-b</td><td>指定文件的比特率 例如：-b:v 64k 文件的视频比特率设置为 64 kbit/s</td></tr><tr><td>-c</td><td>设置编码格式 -c:v 设置视频的编码格式 -c:a 设置音频的编码格式 ffmpeg -i video.avi -i hello.srt -c:v h264 video.mkv ，将一个视频文件avi和一个字幕文件合并为一个mkv文件 ffmpeg -i a.mov -c copy a.mp4 快速拷贝输入文件的视频和音频格式</td></tr><tr><td>ffmpeg -codecs</td><td>查看所有所支持的编码方式 D解码E编码V视频A音频S字幕I表示支持帧内编码L表示该编码格式属于有损压缩格式S表示支持无损压缩的方式</td></tr><tr><td></td><td>如果两个格式支持相同的视频编码可以加快转换的速度 ffmpeg -i a.mov -c copy a.mp4 避免了视频的重新解码和编码的操作</td></tr><tr><td></td><td>需要注意的是如果两个转换的结果所支持的视频或者音频的编码方式不同则需要经过解封装，解码，编码，再封装「解码和编码会占用大量的时间」</td></tr><tr><td>-movflags faststart</td><td>加快视频在网络上的加载和播放的速度</td></tr><tr><td>-encoders</td><td>查看所支持的所有编码器列表</td></tr><tr><td>-decoders</td><td>查看所支持的所有解码器列表</td></tr><tr><td>ffmpeg -h encoder=libx264</td><td>查看某个编码器可以使用的编码参数</td></tr><tr><td>ffmpeg -h</td><td>查看常用的命令</td></tr><tr><td>-s</td><td>视频的分辨率 -s 1920*1080</td></tr><tr><td>-vb</td><td>设置视频的输出码率 -vb 5000k</td></tr><tr><td>-ab</td><td>设置音频码率 -ab 320k</td></tr><tr><td>拆分音视频</td><td>ffmpeg -i hello.avi -c:v h264 video.mp4 -c:a aac audio.acc</td></tr><tr><td>一个输入多个输出</td><td>ffmpeg -i video4k.avi -c:v h264 -s 1280<em>720 720.mp4 -c:v h264 -s 1920</em>1080 1080p.mp4</td></tr><tr><td>查看文件后缀的信息</td><td>ffmpeg -h muxer=mp4 不同的疯转格式所支持的视频编码格式不同</td></tr><tr><td>-preset 预设</td><td>ultrafast superfast verfast fast medium slow slower verslow,编码速度越快产生的文件体积越大</td></tr><tr><td>-crf 控制视频的质量</td><td>0-51</td></tr><tr><td>-ss 片段的起始位置</td><td>-ss 00:00:03 如果音视频的格式不统一vcodec libx264-acodec aac强制统一</td></tr><tr><td>-t 片段的时长</td><td>-t 00:00:05</td></tr><tr><td>-to 指定片段终止的位置</td><td>-to 00:00:08</td></tr><tr><td>concat 合并拼接</td><td>ffmpeg -f concat -i mylist.txt -c copy output.mp4</td></tr><tr><td>-an</td><td>删除音轨</td></tr><tr><td>-vn</td><td>删除视频轨道</td></tr><tr><td>-sn</td><td>删除字幕</td></tr><tr><td>-dn</td><td>删除数据流</td></tr></tbody></table><h3 id="举例-视频" tabindex="-1"><a class="header-anchor" href="#举例-视频"><span><strong>举例-视频</strong></span></a></h3><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>h264</td><td></td></tr><tr><td></td><td>ffmpeg -i input.avi -c:v libx264 -c:a aac output.mp4 进行普通转换</td></tr><tr><td></td><td>查看x264支持的编码 ffmpeg -h encoder=libx264</td></tr><tr><td></td><td>-crf 恒定模式下的画质级别，数字越小画质越好转码的速度也就越慢，一般选择16-23</td></tr><tr><td></td><td>ffmpeg -i input.avi -c:v libx264 -crf 18 -c:a aac -ab 320k output.mp4</td></tr><tr><td>ProRes转码</td><td>属于苹果开发的一款视频编码格式 辅助查看规则 ffmpeg -h encoder=prores_ks</td></tr><tr><td></td><td>ffmpeg input.mp4 -c:v prores -profile 1 -c:a aac -ab 320k output.mov</td></tr><tr><td>DNXHD</td><td>ffmpeg input.mp4 -c:v dnxhd -profile dnxhr_lb「子编码」 -pix_fmt yuv422p「指定像素格式」 -c:a aac -ab 320k output.mfx</td></tr><tr><td>cineForm</td><td>ffmpeg -i input.mp4 -c:v cfhd -quality「画质控制选项」 high -c:a aac -ab 320k output.</td></tr><tr><td>生成缩略图</td><td>ffmpeg -i test.mp4 -vf &quot;fps=1/10,scale=-2:720&quot; thumbnil-$03d.jpg 每十秒输出一张画面</td></tr><tr><td>添加水印</td><td>ffmpeg -i test -i cat.jpg -filter_complex &quot;overlay=100：100“ output.mp4overlay将水印叠加到原始视频的上方</td></tr><tr><td>转换为gif</td><td>ffmpeg -i test.avi -ss 0 -t 3 -filter_complex [0:v]fps=15,scale=-1:256,split[a][b];[apalettegen[p];[b][p]plaletteuse output.gif</td></tr></tbody></table><h2 id="举例-音频" tabindex="-1"><a class="header-anchor" href="#举例-音频"><span><strong>举例-音频</strong></span></a></h2><p>常见的格式 mp3 aac wav flac</p><p>编码器 采样率 声道 码率</p><p>ffmpeg -i input -c:a ENCODER -ar SAMPLE -ac CHANNEL -ab BITRATE outpuy</p><p>SAMPLE :音频采样率 音频采样精度 HZ 一般情况下，数字越大质量越好 主流44.1KHZ 48KHZ</p><p>CHANNEL：音频声道数量</p><p>BITRATE：音频码率</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>wav转mp3</td><td>ffmpeg -i Image.wav -c:a libmp3lame -ar 44100 -ac 2 -ab 320k Image.mp3</td></tr><tr><td>wav转aac</td><td>ffmpeg -i Image.wav -c:a aac -ar 44100 -ac 2 -ab 320k Imae.acc</td></tr><tr><td>flac转MP3</td><td>ffmpeg -i Image.flac -c:a libmp3lame -ar 44100 -ac 2 -ab 320k Image.mp3</td></tr></tbody></table><h3 id="滤镜" tabindex="-1"><a class="header-anchor" href="#滤镜"><span>滤镜</span></a></h3><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>**修改视频的尺寸、旋转、滤镜 -vf</span></span>
<span class="line"><span>前一个过滤器的输入将直接作为下一个过滤器的输入</span></span>
<span class="line"><span>$ 将一个视频缩放为原本的0.5倍速并旋转90deg</span></span>
<span class="line"><span>transpose:「旋转的方向 0： 逆时针旋转90度，然后垂直翻转，1：顺时针旋转90deg 2：逆时针旋转90deg 3：顺时针旋转90度，然后垂直翻转」</span></span>
<span class="line"><span>scale:缩放，也就是输出的视频的比例长宽</span></span>
<span class="line"><span>crop：裁剪 w:h:x:y  代表区域的宽度和高度，以及左上角的x，y坐标</span></span>
<span class="line"><span>   ffmpeg -i text.avi -c:v libx264 -vf &quot;scale=1025:567「或者第二个参数可以是-1让ffmpeg根据第一个参数进行推算」,transpose=2,crop=400:400:100:100&quot;</span></span>
<span class="line"><span>   </span></span>
<span class="line"><span>**修改音频的参数 -af</span></span>
<span class="line"><span>ffmpeg -i test.mp4 -af &quot;volume=1.5,loudnorm=I=-5:LRA=1「统一视频的音量」”</span></span>
<span class="line"><span>equlizer=f=1000:widt_type=h:width=200:g=-10,高通低通滤波器，甚至是均衡器</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ffmpeg-exit" tabindex="-1"><a class="header-anchor" href="#ffmpeg-exit"><span><strong>ffmpeg.exit()</strong></span></a></h2><p>杀死程序的执行，同时删除 MEMFS 以释放内存</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example"><span><strong>example</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> ffmpeg</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> createFFmpeg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">log</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> });</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> ffmpeg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  ffmpeg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">exit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(); </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ffmpeg.exit() is callable only after load() stage.</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">await</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> ffmpeg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">...</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ffmpeg-setlogging-true" tabindex="-1"><a class="header-anchor" href="#ffmpeg-setlogging-true"><span><strong>ffmpeg.setLogging(true)</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>logging在控制台中关闭/关闭日志消息的布尔值</span></span>
<span class="line"><span>ffmpeg.setLogging(true);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fmpeg-setlogger" tabindex="-1"><a class="header-anchor" href="#fmpeg-setlogger"><span><strong>fmpeg.setLogger()</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>logger 处理消息的函数</span></span>
<span class="line"><span>ffmpeg.setLogger(({ type, message }) =&gt; {</span></span>
<span class="line"><span>  console.log(type, message);</span></span>
<span class="line"><span>  /*</span></span>
<span class="line"><span>   * type can be one of following:</span></span>
<span class="line"><span>   *</span></span>
<span class="line"><span>   * info: internal workflow debug messages</span></span>
<span class="line"><span>   * fferr: ffmpeg native stderr output</span></span>
<span class="line"><span>   * ffout: ffmpeg native stdout output</span></span>
<span class="line"><span>   */</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ffmpeg-setprogress" tabindex="-1"><a class="header-anchor" href="#ffmpeg-setprogress"><span><strong>ffmpeg.setProgress（）</strong></span></a></h2><p>进度处理程序，用于获取 ffmpeg 命令的当前进度。</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ffmpeg.setProgress(({ ratio }) =&gt; {</span></span>
<span class="line"><span>  console.log(ratio);</span></span>
<span class="line"><span>  /*</span></span>
<span class="line"><span>   * ratio is a float number between 0 to 1.</span></span>
<span class="line"><span>   */</span></span>
<span class="line"><span>});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="fetchfile" tabindex="-1"><a class="header-anchor" href="#fetchfile"><span><strong>fetchFile()</strong></span></a></h2><p>用于从各种资源中获取文件的辅助函数。</p><p>有时，您要处理的视频/音频文件可能位于远程 URL 和本地文件系统中的某个位置。</p><p>这个帮助函数帮助你获取文件并返回一个 Uint8Array 变量供 ffmpeg.wasm 使用。</p><p>media ： URL 字符串、base64 字符串或 File、Blob、Buffer 对象</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>(async () =&gt; {</span></span>
<span class="line"><span>  const data = await fetchFile(&#39;https://github.com/ffmpegwasm/testdata/raw/master/video-3s.avi&#39;);</span></span>
<span class="line"><span>  /*</span></span>
<span class="line"><span>   * data will be in Uint8Array format</span></span>
<span class="line"><span>   */</span></span>
<span class="line"><span>})();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="常用命令整理" tabindex="-1"><a class="header-anchor" href="#常用命令整理"><span><strong>常用命令整理</strong></span></a></h1><h2 id="文字水印" tabindex="-1"><a class="header-anchor" href="#文字水印"><span><strong>文字水印</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ffmpeg -i input.mp4 -vf &quot;drawtext=fontsize=100:text=&#39;hello world&#39;:x=20:y=20:fontcolor=green&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>使用当前的时间作为水印</span></span>
<span class="line"><span>ffmpeg -re -i inout.mp4 -vf &quot;drawtext=fontsize=60:text=&#39;%{localtime\\&quot;%Y\\-%m\\-%d %h-%M-%S}&#39;:fontcolor=green:box=1:boxcolor=tellow&quot; out.mp4</span></span>
<span class="line"><span></span></span>
<span class="line"><span>定时显示水印--每三秒</span></span>
<span class="line"><span>ffmpeg -re -i inout.mp4 -vf &quot;drawtext=fontsize=60:text=&#39;%{localtime\\&quot;%Y\\-%m\\-%d %h-%M-%S}&#39;:fontcolor=green:box=1:boxcolor=tellow:enable=lt(mod(t\\,3)\\,1)&quot; out.mp4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>参数</td><td>类型</td><td>说明</td></tr><tr><td>text</td><td>string</td><td>文字</td></tr><tr><td>textfile</td><td>string</td><td>文字的文件</td></tr><tr><td>box</td><td>bool</td><td>文字区域的背景色（缺省false) box=1</td></tr><tr><td>boxcolor</td><td>色彩</td><td>展示区块的颜色</td></tr><tr><td>font</td><td>string</td><td>字体名称</td></tr><tr><td>fontsize</td><td>int</td><td>显示的字体大小</td></tr><tr><td>x</td><td>string</td><td>缺省为0</td></tr><tr><td>y</td><td>string</td><td>缺省为0</td></tr><tr><td>alpha</td><td>float</td><td>透明度（默认为1）0~1</td></tr></tbody></table><h2 id="从视频中截取一张图片" tabindex="-1"><a class="header-anchor" href="#从视频中截取一张图片"><span><strong>从视频中截取一张图片</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ffmpeg -i test.mp4 -y -f image2 -ss 00:00:02 -vframes 1 -s 640*360 test.jpg</span></span>
<span class="line"><span></span></span>
<span class="line"><span>-i 输入</span></span>
<span class="line"><span>-y 覆盖已经存在的输出</span></span>
<span class="line"><span>-f 格式</span></span>
<span class="line"><span>image2 图片的一种格式</span></span>
<span class="line"><span>-ss 起始</span></span>
<span class="line"><span>-vframe 帧 如果大于1 输出假%03的text%03d.jpg</span></span>
<span class="line"><span></span></span>
<span class="line"><span>每15帧为一张图片</span></span>
<span class="line"><span>ffmpeg -i test.mp4 -t 5 -s 640x360 -r 15 frame%03d.jpg</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="图片转为视频" tabindex="-1"><a class="header-anchor" href="#图片转为视频"><span><strong>图片转为视频</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ffmpeg -f image2  -i frame%03d.png -r 40 video.mp4 </span></span>
<span class="line"><span>单张10s</span></span>
<span class="line"><span>ffmpeg -r 25 -loop 1 -i 1.jpg -pix_fmt yuv420p -vcodec libx264 -b:v 600k -r:v 25 -preset medium -crf 30 -vframes 250 -r 25 -t 10 1.mp4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="video转gif" tabindex="-1"><a class="header-anchor" href="#video转gif"><span><strong>Video转GIF</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ffmpeg -i test.mp4 -t 5 -r 1 image1.gif</span></span>
<span class="line"><span>ffmpeg -i test.mp4 -t 5 -r 25 -s 640x360 image2.gif</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="gif转video" tabindex="-1"><a class="header-anchor" href="#gif转video"><span><strong>GIF转Video</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ffmpeg -f gif -i image2.gif image2.mp4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="拼接视频" tabindex="-1"><a class="header-anchor" href="#拼接视频"><span><strong>拼接视频</strong></span></a></h2><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="plain" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>建议将其他格式的视频先转换成TS格式，然后在进行拼接，否则会出现错误</span></span>
<span class="line"><span>转TS</span></span>
<span class="line"><span>ffmpeg -i 1.mp4 -c copy -vbsf h264_mp4toannexb 1.ts</span></span>
<span class="line"><span>ffmpeg -i &quot;concat:1.mp4|2.mp4&quot; -c copy out.mp4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p></p>`,81)]))}const h=i(t,[["render",l]]),c=JSON.parse('{"path":"/web/FFmpeg/","title":"04. ffmpeg 基本入门教程","lang":"zh-CN","frontmatter":{"title":"04. ffmpeg 基本入门教程","icon":"logos:ffmpeg-icon","description":"ffmpeg 相关命令的使用 -> wasm","tag":["React","ffmpeg","video","前端"],"head":[["meta",{"property":"og:url","content":"https://soft-vault.com/what-tools-blog/web/FFmpeg/"}],["meta",{"property":"og:site_name","content":"Night.Soul"}],["meta",{"property":"og:title","content":"04. ffmpeg 基本入门教程"}],["meta",{"property":"og:description","content":"ffmpeg 相关命令的使用 -> wasm"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-24T14:33:33.000Z"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:tag","content":"ffmpeg"}],["meta",{"property":"article:tag","content":"video"}],["meta",{"property":"article:tag","content":"前端"}],["meta",{"property":"article:modified_time","content":"2025-03-24T14:33:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04. ffmpeg 基本入门教程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-24T14:33:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Night.Soul\\",\\"url\\":\\"https://github.com/NightSquirrl\\"}]}"]]},"headers":[{"level":2,"title":"createFFmpeg（）","slug":"createffmpeg","link":"#createffmpeg","children":[{"level":3,"title":"sample","slug":"sample","link":"#sample","children":[]}]},{"level":2,"title":"ffmpeg.load()","slug":"ffmpeg-load","link":"#ffmpeg-load","children":[]},{"level":2,"title":"文件系统（FS）","slug":"文件系统-fs","link":"#文件系统-fs","children":[{"level":3,"title":"解释：","slug":"解释","link":"#解释","children":[]}]},{"level":2,"title":"SharedArrayBuffer","slug":"sharedarraybuffer","link":"#sharedarraybuffer","children":[]},{"level":2,"title":"ffmpeg.run(...args)","slug":"ffmpeg-run-args","link":"#ffmpeg-run-args","children":[{"level":3,"title":"前置知识-video","slug":"前置知识-video","link":"#前置知识-video","children":[]},{"level":3,"title":"参数详解","slug":"参数详解","link":"#参数详解","children":[]},{"level":3,"title":"举例-视频","slug":"举例-视频","link":"#举例-视频","children":[]}]},{"level":2,"title":"举例-音频","slug":"举例-音频","link":"#举例-音频","children":[{"level":3,"title":"滤镜","slug":"滤镜","link":"#滤镜","children":[]}]},{"level":2,"title":"ffmpeg.exit()","slug":"ffmpeg-exit","link":"#ffmpeg-exit","children":[{"level":3,"title":"example","slug":"example","link":"#example","children":[]}]},{"level":2,"title":"ffmpeg.setLogging(true)","slug":"ffmpeg-setlogging-true","link":"#ffmpeg-setlogging-true","children":[]},{"level":2,"title":"fmpeg.setLogger()","slug":"fmpeg-setlogger","link":"#fmpeg-setlogger","children":[]},{"level":2,"title":"ffmpeg.setProgress（）","slug":"ffmpeg-setprogress","link":"#ffmpeg-setprogress","children":[]},{"level":2,"title":"fetchFile()","slug":"fetchfile","link":"#fetchfile","children":[]},{"level":2,"title":"文字水印","slug":"文字水印","link":"#文字水印","children":[]},{"level":2,"title":"从视频中截取一张图片","slug":"从视频中截取一张图片","link":"#从视频中截取一张图片","children":[]},{"level":2,"title":"图片转为视频","slug":"图片转为视频","link":"#图片转为视频","children":[]},{"level":2,"title":"Video转GIF","slug":"video转gif","link":"#video转gif","children":[]},{"level":2,"title":"GIF转Video","slug":"gif转video","link":"#gif转video","children":[]},{"level":2,"title":"拼接视频","slug":"拼接视频","link":"#拼接视频","children":[]}],"git":{"createdTime":1742826813000,"updatedTime":1742826813000,"contributors":[{"name":"nightsquirrl","username":"nightsquirrl","email":"“w1083670160@163.com”","commits":1,"url":"https://github.com/nightsquirrl"}]},"readingTime":{"minutes":8.17,"words":2450},"filePathRelative":"web/FFmpeg/index.md","localizedDate":"2025年3月24日","excerpt":"<p>基于React项目使用</p>\\n<h1><strong>安装ffmpeg.wasm</strong></h1>\\n<div class=\\"language-shell line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"shell\\" data-title=\\"shell\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">$</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> npm</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> install</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> @ffmpeg/ffmpeg</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"># or</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">$</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> yarn</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> add</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\"> @ffmpeg/ffmpeg</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{h as comp,c as data};
