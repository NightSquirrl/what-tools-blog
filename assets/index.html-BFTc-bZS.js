import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as t,o as a}from"./app-BcBpUkWz.js";const p={};function n(l,i){return a(),s("div",null,i[0]||(i[0]=[t(`<h3 id="_1-xmlhttprequest的意义和概念" tabindex="-1"><a class="header-anchor" href="#_1-xmlhttprequest的意义和概念"><span>1.XMLHttpRequest的意义和概念</span></a></h3><p>XMLHttpRequest是一个特殊的对象，其目的是作用于服务器交换数据</p><h4 id="主要功能" tabindex="-1"><a class="header-anchor" href="#主要功能"><span>主要功能：</span></a></h4><pre><code>它可以使网页在不重新加载的情况下更新网页

在页面加载后向服务器发送请求

在页面加载后从服务器接收数据

在后台向服务器发送数据
</code></pre><h3 id="_2-属性" tabindex="-1"><a class="header-anchor" href="#_2-属性"><span>2.属性</span></a></h3><ul><li><p>readystate(只读):</p><p>返回一个无符号短整型数字，代表请求的状态码</p><p>0：表示XMLHttprequest实例已经生成，但是实例的open方法没有被调用</p><p>1：表示open方法已经调用，可以使用实例的setRequestHeader()方法设置HTTP请求头信息。此时send方法还没调用</p><p>2：表示实例的send方法已经调用，并且服务器返回的头信息和状态码已经收到</p><p>3：表示正在接收服务器传来的数据体body部分。这时，如果实例的responseType属性等于text或者空字符串，responseText属性就会包含已经收到的部分信息</p><p>4：表示服务器返回的数据已经完全接收，或本次接收已经失败</p></li><li><p>onreadystatechange:</p><p>当<strong>readystate</strong>属性发生变化时，调用的事件处理器</p><ul><li><p>responseType:</p><p>一个定义响应类型的枚举类</p></li><li><p>response(只读):</p><p>返回根据<strong>responseType</strong>的的值来返回对应类型的响应实体</p></li><li><p>status(只读):</p><p>返回一个无符号的短整型数字，代表请求的响应状态</p></li><li><p>timeout:</p><p>一个无符号长整型数字，代表当前请求的最大请求时间，超出该事件，请求会自动终止</p></li></ul></li></ul><h3 id="_3-实例方法" tabindex="-1"><a class="header-anchor" href="#_3-实例方法"><span>3.实例方法</span></a></h3><ul><li><p>abort():</p><p>如果请求已发出，则立刻终止请求。</p></li><li><p>getAllResponseHeaders():</p><p>以字符串形式返回所有使用CRLF分隔的响应头，如果没有收到响应，则返回null。</p></li><li><p>getResponseHeader():</p><p>返回包含指定响应头的字符串，如果响应未收到或者响应中不存在改响应头，则返回null。</p></li><li><p>open():</p><p>初始化一个请求。</p></li><li><p>send():</p><p>发送请求。如果请求是异步的，那么该方法将在请求发送后立即返回。</p></li><li><p>setRequestHeader():</p><p>设置HTTP请求表头的值，必须在**open()**之后，**send()**之前调用该方法。</p></li></ul><h3 id="_3-使用xmlhttprequest的方法" tabindex="-1"><a class="header-anchor" href="#_3-使用xmlhttprequest的方法"><span>3.使用XMLHttpRequest的方法</span></a></h3><p>1.首先我们需要创建一个XMLHttpRequest对象，才能使用其功能</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> xhr</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> XMLHttpRequest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2.创建请求</p><p>2.创建请求</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">method</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">async</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">user</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">password</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><strong>method</strong>：HTTP 方法，比如 <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>、等</p></blockquote><p><strong>url</strong>：发送请求的 URL</p><p>async：可选，布尔参数，默认为true，如果值为 <code>false</code>，<code>send()</code> 方法直到收到答复前不会返回。</p><p>user：可选，用户名用于认证用途；默认为 null。</p><p>password ：可选，密码用于认证用途，默认为 null。</p><p>3.发送请求</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">send</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>body，可选参数，在 XHR 请求中要发送的数据体</p></blockquote><p>例如：xhr.send(&quot;foo=bar&amp;lorem=ipsum&quot;);</p><p>4.终止请求</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">abort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>终止该请求。当一个请求被终止，它的 readyState 将被置为 xhr.UNSENT (0)，并且请求的 status 置为 0。</p></blockquote><p>5.指定类型</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">overrideMimeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">mimeType</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>例如：xhr.overrideMimeType(&quot;text/plain&quot;);</p></blockquote><p>一些常见的 MIME 类型：text/html，text/plain，text/css，text/javascript，application/json，application/xml，image/jpeg，image/png</p><p>6.设置HTTP响应头部的值</p><p>setRequestHeader() 方法必须在 open() 方法和 send() 方法之间调用。</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">xhr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setRequestHeader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">header</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>例如：设置 Content-Type 的值为 application/json</p></blockquote><p>HttpRequest.setRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);</p><p>常见的HTTP响应头部</p><ul><li><p>Accept：指定客户端能够接收的内容类型。</p></li><li><p>Accept-Charset：指定客户端能够接收的字符集。</p></li><li><p>Accept-Encoding：指定客户端能够接收的内容编码。</p></li><li><p>Accept-Language：指定客户端能够接收的语言。</p></li><li><p>Authorization：包含客户端提供给服务器以验证自己身份的凭证。</p></li><li><p>Cache-Control：指定请求和响应遵循的缓存机制。</p></li><li><p>Connection：指定与连接相关的选项。</p></li><li><p>Content-Length：指定请求体的长度，以字节为单位。</p></li><li><p>Content-Type：指定请求体的 MIME 类型。</p></li><li><p>Cookie：包含来自客户端的 Cookie 值。</p></li><li><p>Host：指定被请求资源的主机名和端口号。</p></li><li><p>If-Modified-Since：允许在请求中包含条件，只有请求内容在指定日期后或之后修改过才返回它。</p></li><li><p>Referer：包含当前页面的 URL，用于标识请求是从哪个页面发送过来的。</p></li><li><p>User-Agent：包含发起请求的用户代理。</p></li></ul>`,37)]))}const d=e(p,[["render",n]]),o=JSON.parse('{"path":"/web/network-request/","title":"12. XHR使用教程","lang":"zh-CN","frontmatter":{"title":"12. XHR使用教程","icon":"tabler:network","description":"XHR 相关的 API","tag":["AJAX","XHR","前端"],"head":[["meta",{"property":"og:url","content":"https://soft-vault.com/what-tools-blog/web/network-request/"}],["meta",{"property":"og:site_name","content":"Night.Soul"}],["meta",{"property":"og:title","content":"12. XHR使用教程"}],["meta",{"property":"og:description","content":"XHR 相关的 API"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-24T14:33:33.000Z"}],["meta",{"property":"article:tag","content":"AJAX"}],["meta",{"property":"article:tag","content":"XHR"}],["meta",{"property":"article:tag","content":"前端"}],["meta",{"property":"article:modified_time","content":"2025-03-24T14:33:33.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12. XHR使用教程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-24T14:33:33.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Night.Soul\\",\\"url\\":\\"https://github.com/NightSquirrl\\"}]}"]]},"headers":[{"level":3,"title":"1.XMLHttpRequest的意义和概念","slug":"_1-xmlhttprequest的意义和概念","link":"#_1-xmlhttprequest的意义和概念","children":[]},{"level":3,"title":"2.属性","slug":"_2-属性","link":"#_2-属性","children":[]},{"level":3,"title":"3.实例方法","slug":"_3-实例方法","link":"#_3-实例方法","children":[]},{"level":3,"title":"3.使用XMLHttpRequest的方法","slug":"_3-使用xmlhttprequest的方法","link":"#_3-使用xmlhttprequest的方法","children":[]}],"git":{"createdTime":1742826813000,"updatedTime":1742826813000,"contributors":[{"name":"nightsquirrl","username":"nightsquirrl","email":"“w1083670160@163.com”","commits":1,"url":"https://github.com/nightsquirrl"}]},"readingTime":{"minutes":3.65,"words":1094},"filePathRelative":"web/network-request/index.md","localizedDate":"2025年3月24日","excerpt":"<h3>1.XMLHttpRequest的意义和概念</h3>\\n<p>XMLHttpRequest是一个特殊的对象，其目的是作用于服务器交换数据</p>\\n<h4>主要功能：</h4>\\n<pre><code>它可以使网页在不重新加载的情况下更新网页\\n\\n在页面加载后向服务器发送请求\\n\\n在页面加载后从服务器接收数据\\n\\n在后台向服务器发送数据\\n</code></pre>\\n<h3>2.属性</h3>\\n<ul>\\n<li>\\n<p>readystate(只读):</p>\\n<p>返回一个无符号短整型数字，代表请求的状态码</p>\\n<p>0：表示XMLHttprequest实例已经生成，但是实例的open方法没有被调用</p>\\n<p>1：表示open方法已经调用，可以使用实例的setRequestHeader()方法设置HTTP请求头信息。此时send方法还没调用</p>\\n<p>2：表示实例的send方法已经调用，并且服务器返回的头信息和状态码已经收到</p>\\n<p>3：表示正在接收服务器传来的数据体body部分。这时，如果实例的responseType属性等于text或者空字符串，responseText属性就会包含已经收到的部分信息</p>\\n<p>4：表示服务器返回的数据已经完全接收，或本次接收已经失败</p>\\n</li>\\n<li>\\n<p>onreadystatechange:</p>\\n<p>当<strong>readystate</strong>属性发生变化时，调用的事件处理器</p>\\n<ul>\\n<li>\\n<p>responseType:</p>\\n<p>一个定义响应类型的枚举类</p>\\n</li>\\n<li>\\n<p>response(只读):</p>\\n<p>返回根据<strong>responseType</strong>的的值来返回对应类型的响应实体</p>\\n</li>\\n<li>\\n<p>status(只读):</p>\\n<p>返回一个无符号的短整型数字，代表请求的响应状态</p>\\n</li>\\n<li>\\n<p>timeout:</p>\\n<p>一个无符号长整型数字，代表当前请求的最大请求时间，超出该事件，请求会自动终止</p>\\n</li>\\n</ul>\\n</li>\\n</ul>"}');export{d as comp,o as data};
