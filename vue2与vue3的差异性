## 生命周期

大多生命周期前加 on
|vue2| vue3| 生命周期|
|---|---|---|
|beforeCreate() |setup()| 组件开始创建数据实例之前|
|created()| setup()| 组件数据创建数据实例完成|
|beforeMount() |onBeforeAMount()| DOM 挂载之前|
|mounted()| onMounted()| DOM 挂载完成（页面完成渲染）|
|beforeUpdate() |onBeforeUpdate()| 组件数据更新之前|
|undated() |onUpdated()| 组件数据更新之后|
|beforeDestroy() |onBeforeunmount()| 组件销毁之前|
|destroyed() |onUnmounted() |组件销毁之后|

### `activated` `onActivated` 与 `mounted` `onMounted`

当组件不存在于`<keep-alive>`内部的时候,不存在`active`的概念,也就是说不会触发,而`mounted`,每一次出现都会执行一次.

但是当,组件处于`<keep-alive>` 中的时候,每一次出现`active`都会执行一遍,`mounted`只会在首次触发.

从`<keep-alive>`的功能上也可以看出,`<keep-alive>`将内部的组件进行缓存,那么`active`代表的就是缓存的组件被重新激活[处于活动状态]并不代表再次加载所以`mounted`不会执行.

## Watch

> Vue3 中之所以要重构 watch 的代码,主要是为了提高代码的可读性、可维护性和类型安全性
>
> 1. **更清晰的 API：**Vue 3 的 watchAPI 更接近于 JavaScript 的 watch 函数，这使得它更容易理解和使用。例如，你可以直接在 watch 函数中使用箭头函数，而不需要像在 Vue 2 中那样使用对象字面量。
>
> 2. **更好的类型支持：**Vue 3 的 watchAPI 在 TypeScript 中提供了更好的类型支持。这意味着你可以在编写 Vue 组件时，使用 TypeScript 来提供更好的类型检查和代码提示，从而提高代码的质量和开发效率。
>
> 3. **更灵活的回调：**Vue 3 的 watchAPI 允许你使用更灵活的回调函数，这使得你可以更容易地处理异步数据源或复杂的逻辑。例如，你可以使用 watchEffect 来处理副作用，或者使用 watchPostEffect 来处理在浏览器渲染后执行的副作用。
>
> 4. **更好的性能：**Vue 3 的 watchAPI 在内部进行了优化，这使得它在处理数据变化时提供了更好的性能。这对于需要频繁响应数据变化的组件尤其重要。
>
> 5. **更好的组合式 API：**Vue 3 引入了组合式 API，这使得你可以更容易地组合和重用逻辑。这对于处理复杂的状态和逻辑非常有用，而不需要像在 Vue 2 中那样使用选项式 API

### 监听的方式

#### Vue2

```javascript

  data() {
    return {
      obj: { // 引用数据类型
      a: 123
    },
    count:0,// 普通数据
    }
  },
  watch: {
   obj: {
    handler(newName, oldName) {
      this.fullName = newName + ' ' + this.lastName;
    },
    // 代表在wacth里声明了firstName这个方法之后立即先去执行handler方法
    immediate: true,
    deep: true
  }
  }
```

**详解**

- `deep`:实现对象数组的深度监听
- `immediate`:进入组件会立即执行

Vue2 中监听一个普通的数据,可以直接监听,但是如果监听引用数据类型,如数组或者对象的时候,如果单独的修改对象或者数组`item`里面的值的时候,`watch`无法监听.因为,普通的监听只能监听整个变量的替换比如上方:`this.obj = {b:2}`,这个可以监听到,但是`this.obj.a = 2`无法监听,除非添加了配置项`deep:true`

#### Vue3

> watch 是一个函数的调用，第一个参数是要监听的属性，第二个参数是回调，当监听的属性改变时调用

- `deep`:实现对象数组的深度监听
- `immediate`:进入组件会立即执行
- `once`:一次性监听

##### ref

> 监听 ref 定义的一个响应式数据

```javascript
watch(data, (newValue, oldValue) => {
  console.log(newValue, oldValue);
});
```

##### reactive

一下方式是错误的: 错误，因为 watch() 得到的参数是一个 number

```javascript
const obj = reactive({ count: 0 });

watch(obj.count, (count) => {
  console.log(`Count is: ${count}`);
});
```

这里需要用一个返回该属性的 getter 函数：

```javascript
// 提供一个 getter 函数
watch(
  () => obj.count,
  (count) => {
    console.log(`Count is: ${count}`);
  }
);
```

> 监听 reactive 所定义的响应式数据的多个属性属性

```javascript
    watch([() => person.name,() => person.age], (newValue, oldValue) {
    	console.log(newValue, oldValue)
    })
```

###### 深层侦听器

如果直接监听 `reactive`
监听 reactive 定义的响应式数据
当 person 对象中的任何一个属性发生变化的时候，都会执行回调
默认开启深度监听，且通过配置 deep：false，无法关闭

```javascript
const obj = reactive({ count: 0 });

watch(obj, (newValue, oldValue) => {
  // 在嵌套的属性变更时触发
  // 注意：`newValue` 此处和 `oldValue` 是相等的
  // 因为它们是同一个对象！
});

obj.count++;
```

> 当监听的数据是 reactive 定义的对像数据里面的对象时需要开启深度监听当前例子中监听了 j1，当 j1 对象中定义属性发生变化时无法检测到，因为 j1 的内存地址并未改变所以需要开启深度监听

```javascript
watch(
  () => person.job.j1,
  (newValue, oldValue) => {
    console.log(newValue, oldValue);
  },
  { deep: true }
);
```

### 监听多个数据

#### Vue2

不支持

无法一次性监听多个数据,一般的做法是,将所有的数据写在`computed`中,然后再添加到`watch`中监听

#### Vue3

支持

```javascript
watch([x, () => y.value], ([newX, newY]) => {
  console.log(`x is ${newX} and y is ${newY}`);
});
```

## Computed

### Vue2

#### 基本写法

```javascript
computed:{
  sum(){
  return this.num1+ this.num2
  }
}
```

#### `get` `set`

```javascript
computed: {
  fullName: {
    // getter  读取数据触发get方法
   get: function () {
     return this.firstName + ' ' + this.lastName
   },
   // setter 当手动修改计算属性的值就像修改一个普通数据那样时，就会触发setter 函数，执行一些自定义的操作
   set: function (newValue) {
     var names = newValue.split(' ')
     this.firstName = names[0]
     this.lastName = names[names.length - 1]
    }
  }
}
```

#### 传参

```javascript

 computed: {
    getIndex() {
   //    返回一个函数即可
      return function(e) {
        console.log(e);
        return e + 1;
      };
    },

```

### Vue3

#### 基本写法

```javascript

const age = ref(16)
// 得到后年的年龄
const newAge = computed(()=>{
    // 该函数的返回值就是计算属性的值
    return age.value + 2
})

// vue3 当然也可以在 reactive 直接使用
let shopNum = reactive({
      num: computed(() => {
        let nums = 0;
        obj.value.forEach((item) => {
          if (item.checked) {
            nums += item.num;
          }
        });
        return nums;
}),

```

#### `get` `set`

```javascript
const newAge = computed({
  // get函数，获取计算属性的值
  get() {
    return age.value + 2;
  },
  // set函数，当你给计算属性设置值的时候触发
  set(value) {
    age.value = value - 2;
  },
});
```
