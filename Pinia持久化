> - `pinia-plugin-persisedstate`
> - `自定义封装IndexDB`
> -` @vueuse/core` 中的 `useStorage`


[TOC]


# Pinia 持久化存储

Pinia中的数据只是存储在内存中的数据,当页面刷新之后,数据就会丢失.在某些场景中可能需要获取之前生成的数据,所以,我们需要做到数据的持久化,就像通过接口,将数据存储到服务器数据库中.前端的持久化,可以将数据存储到localStorage,sessionStorage,cookie,indexDB中

## `pinia-plugin-persisedstate`

### 安装依赖

```bash
yarn add pinia
yarn add pinia-plugin-persistedstate
```

### 使用方法

在vue入口文件进行挂载如`main.ts`文件

```typescript

import { createPinia } from 'pinia'
import piniaPluginPersistedstate from 'pinia-plugin-persistedstate'

const pinia = createPinia()
pinia.use(piniaPluginPersistedstate)

```

新建`store`文件
```typescript
import { defineStore } from 'pinia'
import { ref } from 'vue'

export const useStore = defineStore(
  'main',
  () => {
    const someState = ref('hello pinia')
    return { someState }
  },
  {
    persist: true, // 启用持久化
  },
)
```
> 解释
> `defineStore` 第三个参数命名为`options`
>
### 参数详细解释

#### key

设置在存储项中的key的名称

```typescript
import { defineStore } from 'pinia'
import { ref } from 'vue'

export const useStore = defineStore(
  'main',
  () => {
    const someState = ref('hello pinia')
    return { someState }
  },
  {
    persist: true, // 启用持久化
    key: 'my-custom-key',
  },
)
```

> 因为默认存储在`localStorage`中,所以,该`main`中的数据在`localStorage`存储的对应的key为`my-custom-key`

#### storage

设置存储的位置,将数据保存到 Storage 中。 必须有 g`etItem: (key: string) => string | null` 和 `setItem: (key: string, value: string) => void` 方法。

```typescript
import { defineStore } from 'pinia'
import { ref } from 'vue'

export const useStore = defineStore(
  'main',
  () => {
    const someState = ref('hello pinia')
    return { someState }
  },
  {
    persist: true, // 启用持久化
    key: 'my-custom-key',
    storage: sessionStorage,
  },
)
```

> `storage` sessionStorage localStorage

#### serializer

自定义序列化程序，用于在持久化之前序列化数据，并在解除冻结存储之前反序列化数据。 必须有 serialize: (value: StateTree) => string 和 deserialize: (value: string) => StateTree 方法。


```typescript
import { defineStore } from 'pinia'
import { ref } from 'vue'
import { parse, stringify } from 'zipson'
export const useStore = defineStore(
  'main',
  () => {
    const someState = ref('hello pinia')
    return { someState }
  },
  {
    persist: true, // 启用持久化
    key: 'my-custom-key',
    storage: sessionStorage,
    serializer: {
      deserialize: parse,
      serialize: stringify
    }
  },
)
```

> 此存储将使用 zipson的 stringify/parse 来处理序列化/反序列化，并添加了压缩。

#### pick

用于选择应持久化的内容的点表示法路径数组 [] 表示不持久化任何状态， undefined 表示持久化整个状态。


```typescript
import { defineStore } from 'pinia'
import { ref } from 'vue'
import { parse, stringify } from 'zipson'
export const useStore = defineStore(
  'main',
  () => {
    const someState = ref('hello pinia');
    const count = ref(0)
    return { someState }
  },
  {
     pick: ['count'],
  },
)
```



## Pinia 与 IndexDb 的封装

### 最简单的封装

1. 新建文件`piniaIndexedDB.ts`用于存储数据到DB

```typescript
import { openDB } from 'idb';

// 打开或创建数据库
const dbPromise = openDB('whattools', 3, {
  upgrade(db) {
    db.createObjectStore('iconFile');
  },
});

// 保存数据到 IndexedDB
async function saveToIndexedDB(storeName, data) {
  const db = await dbPromise;

  for (const key of Object.keys(data)) {
    if (key.endsWith('DB')) {
      const element = data[key];
      if (element[element.length - 1]) {
        await db.put(
          storeName,
          {
            ...element[element.length - 1],
            key,
          },
          element[element.length - 1].hash
        );
      }
    }
  }
}

// 从 IndexedDB 加载数据
async function loadFromIndexedDB(storeName) {
  const db = await dbPromise;
  return await db.getAll(storeName);
}

// 创建插件
export function piniaIndexedDBPlugin(options) {
  const store = options.store;
  const storeName = store.$id;
  // 判断那些需要DB持久化
  if (options.options.persisted) {
    // 在 store 初始化时加载数据
    loadFromIndexedDB(storeName).then((data) => {
      if (Object.keys(data).length) {
        store.$patch({
          [data[0].key]: data,
        });
      }
    });

    // 监听 store 的更改并保存数据
    store.$subscribe((mutation, state) => {
      saveToIndexedDB(storeName, state);
    });
  }
}

export {
    dbPromise
}
```
2.  注入插件

在Vue的入口文件中,如`main.ts`文件中引入文件
```typescript
import { piniaIndexedDBPlugin } from '@/stores/piniaIndexedDB';
const pinia = createPinia();
pinia.use(piniaIndexedDBPlugin);
```

### 代码详解

> 数据库主键的概念暂不解释,IndexDB同样有主键的概念

#### openDB

主要功能,创建IndexDb的表,创建对应的数据库.
第一个参数是数据库的名称.
第二个参数是数据库的版本号,当需要创建新的表时,需要更新版本号,否则,数据库不会发生任何变化
第三个参数,`upgrade` 监听函数,当版本号升级的时候,会触发

#### 数据读取

根据openDB的返回结果,获取数据,注意是异步函数
|方法名|说明|
|---|---|
|getAll|获取所有的数据,根据传入的表名获取|
|get|第一个参数是,数据库的表名,第二个参数是主键|

> 持久化,如果将读取的数据返回保存给`pinia`中的数据呢?
> 在pinia.use(函数名),函数名默认传参 `options`
> store pinia对应的defineStore命名空间的方法.$patch可以将数据返回给对应的数据

#### 数据的存储

`store.$subscribe`能够监听你使用pinia更改数据,然后将你更改的数据,保存到indexDB中,`saveToIndexDB`方法需要自定义.

需要注意的是`localStorage` `sessionStore`与IndexDB数据结构是不同的,所以存储的方式也是不同的,需要注意自定义,存储和读取的方法.

```typescript
async function saveToIndexedDB(storeName, data) {
  const db = await dbPromise;

  for (const key of Object.keys(data)) {
    if (key.endsWith('DB')) {
      const element = data[key];
      if (element[element.length - 1]) {
        await db.put(
          storeName,
          {
            ...element[element.length - 1],
            key,
          },
          element[element.length - 1].hash
        );
      }
    }
  }
}
```

> 案例说明
> 传入的 `data` 是 `storeName`对应命名空间中定义的所有的变量
> 那么需要判断那些数据需要存储,以如何的结构存储
> `put`方法注意点,
> - 第一个参数: 表名
> - 第二个参数:需要保存的数据
> - 第三个参数: 主键的值
> - 需要注意的是主键的值需要在第二个参数,需要保存的数据中,否则无法保存

