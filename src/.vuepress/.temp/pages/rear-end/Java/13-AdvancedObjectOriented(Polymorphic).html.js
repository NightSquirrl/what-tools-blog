import comp from "/Users/zeroeldath/Desktop/ignore-space/what-tools-blog/src/.vuepress/.temp/pages/rear-end/Java/13-AdvancedObjectOriented(Polymorphic).html.vue"
const data = JSON.parse("{\"path\":\"/rear-end/Java/13-AdvancedObjectOriented(Polymorphic).html\",\"title\":\"😢 13.面向对象进阶(多态)\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"😢 13.面向对象进阶(多态)\",\"tag\":[\"Java\"],\"recommend\":14,\"description\":\"1. 多态 1.1 多态的形式 多态是继封装、继承之后，面向对象的第三大特性。 多态是出现在继承或者实现关系中的。 多态体现的格式： 多态的前提：有继承关系，子类对象是可以赋值给父类类型的变量。例如Animal是一个动物类型，而Cat是一个猫类型。Cat继承了Animal，Cat对象也是Animal类型，自然可以赋值给父类类型的变量。 1.2 多态的使...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://soft-vault.com/rear-end/Java/13-AdvancedObjectOriented(Polymorphic).html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"😢 13.面向对象进阶(多态)\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1. 多态 1.1 多态的形式 多态是继封装、继承之后，面向对象的第三大特性。 多态是出现在继承或者实现关系中的。 多态体现的格式： 多态的前提：有继承关系，子类对象是可以赋值给父类类型的变量。例如Animal是一个动物类型，而Cat是一个猫类型。Cat继承了Animal，Cat对象也是Animal类型，自然可以赋值给父类类型的变量。 1.2 多态的使...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://img.picgo.net/2023/11/06/1806d011c88f42831.png\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"😢 13.面向对象进阶(多态)\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Java\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"😢 13.面向对象进阶(多态)\\\",\\\"image\\\":[\\\"https://img.picgo.net/2023/11/06/1806d011c88f42831.png\\\",\\\"https://img.picgo.net/2023/11/06/24a9118145216d529.png\\\",\\\"https://img.picgo.net/2023/11/06/5e609eb30438117ba7be36de49bfb48798c3d18167cabdeb.png\\\",\\\"https://img.picgo.net/2023/11/06/aaa06a26fcf64d7fd0e.jpeg\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Night.Soul\\\",\\\"url\\\":\\\"https://github.com/NightSquirrl\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"1. 多态\",\"slug\":\"_1-多态\",\"link\":\"#_1-多态\",\"children\":[{\"level\":3,\"title\":\"1.1 多态的形式\",\"slug\":\"_1-1-多态的形式\",\"link\":\"#_1-1-多态的形式\",\"children\":[]},{\"level\":3,\"title\":\"1.2 多态的使用场景\",\"slug\":\"_1-2-多态的使用场景\",\"link\":\"#_1-2-多态的使用场景\",\"children\":[]},{\"level\":3,\"title\":\"1.3 多态的定义和前提\",\"slug\":\"_1-3-多态的定义和前提\",\"link\":\"#_1-3-多态的定义和前提\",\"children\":[]},{\"level\":3,\"title\":\"1.4 多态的运行特点\",\"slug\":\"_1-4-多态的运行特点\",\"link\":\"#_1-4-多态的运行特点\",\"children\":[]},{\"level\":3,\"title\":\"1.5 多态的弊端\",\"slug\":\"_1-5-多态的弊端\",\"link\":\"#_1-5-多态的弊端\",\"children\":[]},{\"level\":3,\"title\":\"1.6 引用类型转换\",\"slug\":\"_1-6-引用类型转换\",\"link\":\"#_1-6-引用类型转换\",\"children\":[]},{\"level\":3,\"title\":\"1.6.3 向下转型（强制转换）\",\"slug\":\"_1-6-3-向下转型-强制转换\",\"link\":\"#_1-6-3-向下转型-强制转换\",\"children\":[]},{\"level\":3,\"title\":\"1.7 综合练习\",\"slug\":\"_1-7-综合练习\",\"link\":\"#_1-7-综合练习\",\"children\":[]}]},{\"level\":2,\"title\":\"2. 包\",\"slug\":\"_2-包\",\"link\":\"#_2-包\",\"children\":[{\"level\":3,\"title\":\"2.1 包\",\"slug\":\"_2-1-包\",\"link\":\"#_2-1-包\",\"children\":[]},{\"level\":3,\"title\":\"2.2 导包\",\"slug\":\"_2-2-导包\",\"link\":\"#_2-2-导包\",\"children\":[]},{\"level\":3,\"title\":\"2.3 使用不同包下的相同类怎么办？\",\"slug\":\"_2-3-使用不同包下的相同类怎么办\",\"link\":\"#_2-3-使用不同包下的相同类怎么办\",\"children\":[]}]},{\"level\":2,\"title\":\"3. 权限修饰符\",\"slug\":\"_3-权限修饰符\",\"link\":\"#_3-权限修饰符\",\"children\":[{\"level\":3,\"title\":\"3.1 权限修饰符\",\"slug\":\"_3-1-权限修饰符\",\"link\":\"#_3-1-权限修饰符\",\"children\":[]},{\"level\":3,\"title\":\"3.2 不同权限的访问能力\",\"slug\":\"_3-2-不同权限的访问能力\",\"link\":\"#_3-2-不同权限的访问能力\",\"children\":[]}]},{\"level\":2,\"title\":\"4. final关键字\",\"slug\":\"_4-final关键字\",\"link\":\"#_4-final关键字\",\"children\":[{\"level\":3,\"title\":\"4.1 概述\",\"slug\":\"_4-1-概述\",\"link\":\"#_4-1-概述\",\"children\":[]},{\"level\":3,\"title\":\"4.2 使用方式\",\"slug\":\"_4-2-使用方式\",\"link\":\"#_4-2-使用方式\",\"children\":[]}]}],\"readingTime\":{\"minutes\":14.5,\"words\":4350},\"filePathRelative\":\"rear-end/Java/13-AdvancedObjectOriented(Polymorphic).md\",\"excerpt\":\"<h2>1. 多态</h2>\\n<h3>1.1 多态的形式</h3>\\n<p><strong>多态是继封装、继承之后，面向对象的第三大特性。</strong></p>\\n<p><strong>多态是出现在继承或者实现关系中的</strong>。</p>\\n<p><strong>多态体现的格式</strong>：</p>\\n<div class=\\\"language-java\\\" data-ext=\\\"java\\\" data-title=\\\"java\\\"><pre class=\\\"language-java\\\"><code>父类类型 变量名 <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> 子类<span class=\\\"token operator\\\">/</span>实现类构造器<span class=\\\"token punctuation\\\">;</span>\\n变量名<span class=\\\"token punctuation\\\">.</span>方法名<span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre></div>\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
