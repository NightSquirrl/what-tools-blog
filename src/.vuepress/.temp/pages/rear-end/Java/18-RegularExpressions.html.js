import comp from "/Users/zeroeldath/Desktop/ignore-space/zero-eldath/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/18-RegularExpressions.html.vue"
const data = JSON.parse("{\"path\":\"/rear-end/Java/18-RegularExpressions.html\",\"title\":\"😢 18.正则表达式\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"😢 18.正则表达式\",\"tag\":[\"Java\"],\"recommend\":19,\"description\":\"正则表达式 1.1 正则表达式的概念及演示 在Java中，我们经常需要验证一些字符串，例如：年龄必须是2位的数字、用户名必须是8位长度而且只能包含大小写字母、数字等。正则表达式就是用来验证各种字符串的规则。它内部描述了一些规则，我们可以验证用户输入的字符串是否匹配这个规则。 先看一个不使用正则表达式验证的例子：下面的程序让用户输入一个QQ号码，我们要验...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://soft-vault.com/rear-end/Java/18-RegularExpressions.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"😢 18.正则表达式\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"正则表达式 1.1 正则表达式的概念及演示 在Java中，我们经常需要验证一些字符串，例如：年龄必须是2位的数字、用户名必须是8位长度而且只能包含大小写字母、数字等。正则表达式就是用来验证各种字符串的规则。它内部描述了一些规则，我们可以验证用户输入的字符串是否匹配这个规则。 先看一个不使用正则表达式验证的例子：下面的程序让用户输入一个QQ号码，我们要验...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Java\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"😢 18.正则表达式\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Night.Soul\\\",\\\"url\\\":\\\"https://github.com/NightSquirrl\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"1.1 正则表达式的概念及演示\",\"slug\":\"_1-1-正则表达式的概念及演示\",\"link\":\"#_1-1-正则表达式的概念及演示\",\"children\":[]},{\"level\":2,\"title\":\"1.2 正则表达式-字符类\",\"slug\":\"_1-2-正则表达式-字符类\",\"link\":\"#_1-2-正则表达式-字符类\",\"children\":[]},{\"level\":2,\"title\":\"1.3 正则表达式-逻辑运算符\",\"slug\":\"_1-3-正则表达式-逻辑运算符\",\"link\":\"#_1-3-正则表达式-逻辑运算符\",\"children\":[]},{\"level\":2,\"title\":\"1.4 正则表达式-预定义字符\",\"slug\":\"_1-4-正则表达式-预定义字符\",\"link\":\"#_1-4-正则表达式-预定义字符\",\"children\":[]},{\"level\":2,\"title\":\"1.5 正则表达式-数量词\",\"slug\":\"_1-5-正则表达式-数量词\",\"link\":\"#_1-5-正则表达式-数量词\",\"children\":[]},{\"level\":2,\"title\":\"1.6 正则表达式练习1\",\"slug\":\"_1-6-正则表达式练习1\",\"link\":\"#_1-6-正则表达式练习1\",\"children\":[]},{\"level\":2,\"title\":\"1.7 正则表达式练习2\",\"slug\":\"_1-7-正则表达式练习2\",\"link\":\"#_1-7-正则表达式练习2\",\"children\":[]},{\"level\":2,\"title\":\"1.8 本地数据爬取\",\"slug\":\"_1-8-本地数据爬取\",\"link\":\"#_1-8-本地数据爬取\",\"children\":[]},{\"level\":2,\"title\":\"1.9 网络数据爬取（了解）\",\"slug\":\"_1-9-网络数据爬取-了解\",\"link\":\"#_1-9-网络数据爬取-了解\",\"children\":[]},{\"level\":2,\"title\":\"1.10 爬取数据练习\",\"slug\":\"_1-10-爬取数据练习\",\"link\":\"#_1-10-爬取数据练习\",\"children\":[]},{\"level\":2,\"title\":\"1.11 按要求爬取\",\"slug\":\"_1-11-按要求爬取\",\"link\":\"#_1-11-按要求爬取\",\"children\":[]},{\"level\":2,\"title\":\"1.12 贪婪爬取和非贪婪爬取\",\"slug\":\"_1-12-贪婪爬取和非贪婪爬取\",\"link\":\"#_1-12-贪婪爬取和非贪婪爬取\",\"children\":[]},{\"level\":2,\"title\":\"1.13 String的split方法中使用正则表达式\",\"slug\":\"_1-13-string的split方法中使用正则表达式\",\"link\":\"#_1-13-string的split方法中使用正则表达式\",\"children\":[]},{\"level\":2,\"title\":\"1.14 String类的replaceAll方法中使用正则表达式\",\"slug\":\"_1-14-string类的replaceall方法中使用正则表达式\",\"link\":\"#_1-14-string类的replaceall方法中使用正则表达式\",\"children\":[]},{\"level\":2,\"title\":\"1.15 正则表达式-分组括号( )\",\"slug\":\"_1-15-正则表达式-分组括号\",\"link\":\"#_1-15-正则表达式-分组括号\",\"children\":[]},{\"level\":2,\"title\":\"1.16 分组练习\",\"slug\":\"_1-16-分组练习\",\"link\":\"#_1-16-分组练习\",\"children\":[]},{\"level\":2,\"title\":\"1.17 忽略大小写的写法\",\"slug\":\"_1-17-忽略大小写的写法\",\"link\":\"#_1-17-忽略大小写的写法\",\"children\":[]},{\"level\":2,\"title\":\"1.18 非捕获分组\",\"slug\":\"_1-18-非捕获分组\",\"link\":\"#_1-18-非捕获分组\",\"children\":[]},{\"level\":2,\"title\":\"1.19 正则表达式练习\",\"slug\":\"_1-19-正则表达式练习\",\"link\":\"#_1-19-正则表达式练习\",\"children\":[]}],\"readingTime\":{\"minutes\":21.93,\"words\":6579},\"filePathRelative\":\"rear-end/Java/18-RegularExpressions.md\",\"excerpt\":\"\\n<h2>1.1 正则表达式的概念及演示</h2>\\n<ul>\\n<li>在Java中，我们经常需要验证一些字符串，例如：年龄必须是2位的数字、用户名必须是8位长度而且只能包含大小写字母、数字等。正则表达式就是用来验证各种字符串的规则。它内部描述了一些规则，我们可以验证用户输入的字符串是否匹配这个规则。</li>\\n<li>先看一个不使用正则表达式验证的例子：下面的程序让用户输入一个QQ号码，我们要验证：\\n<ul>\\n<li>QQ号码必须是5--15位长度</li>\\n<li>而且必须全部是数字</li>\\n<li>而且首位不能为0</li>\\n</ul>\\n</li>\\n</ul>\\n<div class=\\\"language-java\\\" data-ext=\\\"java\\\" data-title=\\\"java\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">package</span> <span class=\\\"token namespace\\\">com<span class=\\\"token punctuation\\\">.</span>itheima<span class=\\\"token punctuation\\\">.</span>a08regexdemo</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">RegexDemo1</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">void</span> <span class=\\\"token function\\\">main</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span> args<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">/* 假如现在要求校验一个qq号码是否正确。\\n            规则:6位及20位之内，日不能在开头，必须全部是数字。\\n            先使用目前所学知识完成校验需求然后体验一下正则表达式检验。\\n        */</span>\\n\\n        <span class=\\\"token class-name\\\">String</span> qq <span class=\\\"token operator\\\">=</span><span class=\\\"token string\\\">\\\"1234567890\\\"</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">checkQQ</span><span class=\\\"token punctuation\\\">(</span>qq<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n        <span class=\\\"token class-name\\\">System</span><span class=\\\"token punctuation\\\">.</span>out<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">println</span><span class=\\\"token punctuation\\\">(</span>qq<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">matches</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"[1-9]\\\\\\\\d{5,19}\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">boolean</span> <span class=\\\"token function\\\">checkQQ</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token class-name\\\">String</span> qq<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token comment\\\">//规则:6位及20位之内，日不能在开头，必须全部是数字 。</span>\\n        <span class=\\\"token comment\\\">//核心思想:</span>\\n        <span class=\\\"token comment\\\">//先把异常数据进行过滤</span>\\n        <span class=\\\"token comment\\\">//下面的就是满足要求的数据了。</span>\\n        <span class=\\\"token keyword\\\">int</span> len <span class=\\\"token operator\\\">=</span> qq<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>len <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">6</span> <span class=\\\"token operator\\\">||</span> len <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token number\\\">20</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">//0不能在开头</span>\\n        <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>qq<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">startsWith</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"0\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token comment\\\">//必须全部是数字</span>\\n        <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">int</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> qq<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">length</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token keyword\\\">char</span> c <span class=\\\"token operator\\\">=</span> qq<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">charAt</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>c <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token char\\\">'0'</span> <span class=\\\"token operator\\\">|</span> c <span class=\\\"token operator\\\">&gt;</span> <span class=\\\"token char\\\">'9'</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n                <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n            <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n        <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
