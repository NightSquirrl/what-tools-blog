import comp from "D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/29-MultiThreading02.html.vue"
const data = JSON.parse("{\"path\":\"/rear-end/Java/29-MultiThreading02.html\",\"title\":\"😢 29.多线程02\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"😢 29.多线程02\",\"tag\":[\"Java\"],\"recommend\":30,\"description\":\"1. 线程池 1.1 线程状态介绍 当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程 状态被定义在了java.lang.Thread.State枚举类中，State枚举类的源码如下： 通过源码我们可以看到Java中的线程存在6种状态，...\",\"gitInclude\":[],\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://soft-vault.com/rear-end/Java/29-MultiThreading02.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"😢 29.多线程02\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1. 线程池 1.1 线程状态介绍 当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程 状态被定义在了java.lang.Thread.State枚举类中，State枚举类的源码如下： 通过源码我们可以看到Java中的线程存在6种状态，...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://img.picgo.net/2023/11/06/image-202311061956049079da838a4ddd101a6.png\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Java\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"😢 29.多线程02\\\",\\\"image\\\":[\\\"https://img.picgo.net/2023/11/06/image-202311061956049079da838a4ddd101a6.png\\\",\\\"https://img.picgo.net/2023/11/06/image-202311061956334100e42528840fea0dc.png\\\",\\\"https://img.picgo.net/2023/11/06/image-202311061957297523ca7a3cac9ffd6ad.png\\\",\\\"https://img.picgo.net/2023/11/06/image-20231106195751968c5b11f7eb2907331.png\\\",\\\"https://img.picgo.net/2023/11/06/image-20231106195812930d33e2f374eb020f0.png\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Night.Soul\\\",\\\"url\\\":\\\"https://github.com/NightSquirrl\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"1. 线程池\",\"slug\":\"_1-线程池\",\"link\":\"#_1-线程池\",\"children\":[{\"level\":3,\"title\":\"1.1 线程状态介绍\",\"slug\":\"_1-1-线程状态介绍\",\"link\":\"#_1-1-线程状态介绍\",\"children\":[]},{\"level\":3,\"title\":\"1.2 线程池-基本原理\",\"slug\":\"_1-2-线程池-基本原理\",\"link\":\"#_1-2-线程池-基本原理\",\"children\":[]},{\"level\":3,\"title\":\"1.3 线程池-Executors默认线程池\",\"slug\":\"_1-3-线程池-executors默认线程池\",\"link\":\"#_1-3-线程池-executors默认线程池\",\"children\":[]},{\"level\":3,\"title\":\"1.4 线程池-Executors创建指定上限的线程池\",\"slug\":\"_1-4-线程池-executors创建指定上限的线程池\",\"link\":\"#_1-4-线程池-executors创建指定上限的线程池\",\"children\":[]},{\"level\":3,\"title\":\"1.5 线程池-ThreadPoolExecutor\",\"slug\":\"_1-5-线程池-threadpoolexecutor\",\"link\":\"#_1-5-线程池-threadpoolexecutor\",\"children\":[]},{\"level\":3,\"title\":\"1.6 线程池-参数详解\",\"slug\":\"_1-6-线程池-参数详解\",\"link\":\"#_1-6-线程池-参数详解\",\"children\":[]},{\"level\":3,\"title\":\"1.7 线程池-非默认任务拒绝策略\",\"slug\":\"_1-7-线程池-非默认任务拒绝策略\",\"link\":\"#_1-7-线程池-非默认任务拒绝策略\",\"children\":[]}]},{\"level\":2,\"title\":\"2. 多线程综合练习\",\"slug\":\"_2-多线程综合练习\",\"link\":\"#_2-多线程综合练习\",\"children\":[{\"level\":3,\"title\":\"练习一：售票\",\"slug\":\"练习一-售票\",\"link\":\"#练习一-售票\",\"children\":[]},{\"level\":3,\"title\":\"练习二：赠送礼物\",\"slug\":\"练习二-赠送礼物\",\"link\":\"#练习二-赠送礼物\",\"children\":[]},{\"level\":3,\"title\":\"练习三：打印数字\",\"slug\":\"练习三-打印数字\",\"link\":\"#练习三-打印数字\",\"children\":[]},{\"level\":3,\"title\":\"练习四：抢红包\",\"slug\":\"练习四-抢红包\",\"link\":\"#练习四-抢红包\",\"children\":[]},{\"level\":3,\"title\":\"练习五：抽奖箱\",\"slug\":\"练习五-抽奖箱\",\"link\":\"#练习五-抽奖箱\",\"children\":[]},{\"level\":3,\"title\":\"练习六：多线程统计并求最大值\",\"slug\":\"练习六-多线程统计并求最大值\",\"link\":\"#练习六-多线程统计并求最大值\",\"children\":[]},{\"level\":3,\"title\":\"练习七：多线程之间的比较\",\"slug\":\"练习七-多线程之间的比较\",\"link\":\"#练习七-多线程之间的比较\",\"children\":[]}]},{\"level\":2,\"title\":\"2. 原子性\",\"slug\":\"_2-原子性\",\"link\":\"#_2-原子性\",\"children\":[{\"level\":3,\"title\":\"2.1 volatile-问题\",\"slug\":\"_2-1-volatile-问题\",\"link\":\"#_2-1-volatile-问题\",\"children\":[]},{\"level\":3,\"title\":\"2.2 volatile解决\",\"slug\":\"_2-2-volatile解决\",\"link\":\"#_2-2-volatile解决\",\"children\":[]},{\"level\":3,\"title\":\"2.3 synchronized解决\",\"slug\":\"_2-3-synchronized解决\",\"link\":\"#_2-3-synchronized解决\",\"children\":[]},{\"level\":3,\"title\":\"2.4 原子性\",\"slug\":\"_2-4-原子性\",\"link\":\"#_2-4-原子性\",\"children\":[]},{\"level\":3,\"title\":\"2.5 volatile关键字不能保证原子性\",\"slug\":\"_2-5-volatile关键字不能保证原子性\",\"link\":\"#_2-5-volatile关键字不能保证原子性\",\"children\":[]},{\"level\":3,\"title\":\"2.6 原子性_AtomicInteger\",\"slug\":\"_2-6-原子性-atomicinteger\",\"link\":\"#_2-6-原子性-atomicinteger\",\"children\":[]},{\"level\":3,\"title\":\"2.7 AtomicInteger-内存解析\",\"slug\":\"_2-7-atomicinteger-内存解析\",\"link\":\"#_2-7-atomicinteger-内存解析\",\"children\":[]},{\"level\":3,\"title\":\"2.8 AtomicInteger-源码解析\",\"slug\":\"_2-8-atomicinteger-源码解析\",\"link\":\"#_2-8-atomicinteger-源码解析\",\"children\":[]},{\"level\":3,\"title\":\"2.9 悲观锁和乐观锁\",\"slug\":\"_2-9-悲观锁和乐观锁\",\"link\":\"#_2-9-悲观锁和乐观锁\",\"children\":[]}]},{\"level\":2,\"title\":\"3. 并发工具类\",\"slug\":\"_3-并发工具类\",\"link\":\"#_3-并发工具类\",\"children\":[{\"level\":3,\"title\":\"3.1 并发工具类-Hashtable\",\"slug\":\"_3-1-并发工具类-hashtable\",\"link\":\"#_3-1-并发工具类-hashtable\",\"children\":[]},{\"level\":3,\"title\":\"3.2 并发工具类-ConcurrentHashMap基本使用\",\"slug\":\"_3-2-并发工具类-concurrenthashmap基本使用\",\"link\":\"#_3-2-并发工具类-concurrenthashmap基本使用\",\"children\":[]},{\"level\":3,\"title\":\"3.3 并发工具类-ConcurrentHashMap1.7原理\",\"slug\":\"_3-3-并发工具类-concurrenthashmap1-7原理\",\"link\":\"#_3-3-并发工具类-concurrenthashmap1-7原理\",\"children\":[]}]},{\"level\":2,\"title\":\"3.4 并发工具类-ConcurrentHashMap1.8原理\",\"slug\":\"_3-4-并发工具类-concurrenthashmap1-8原理\",\"link\":\"#_3-4-并发工具类-concurrenthashmap1-8原理\",\"children\":[{\"level\":3,\"title\":\"3.5 并发工具类-CountDownLatch\",\"slug\":\"_3-5-并发工具类-countdownlatch\",\"link\":\"#_3-5-并发工具类-countdownlatch\",\"children\":[]},{\"level\":3,\"title\":\"3.6 并发工具类-Semaphore\",\"slug\":\"_3-6-并发工具类-semaphore\",\"link\":\"#_3-6-并发工具类-semaphore\",\"children\":[]}]}],\"readingTime\":{\"minutes\":34.08,\"words\":10223},\"filePathRelative\":\"rear-end/Java/29-MultiThreading02.md\",\"excerpt\":\"<h2>1. 线程池</h2>\\n<h3>1.1 线程状态介绍</h3>\\n<p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程</p>\\n<p>状态被定义在了java.lang.Thread.State枚举类中，State枚举类的源码如下：</p>\\n<div class=\\\"language-java\\\" data-ext=\\\"java\\\" data-title=\\\"java\\\"><pre class=\\\"language-java\\\"><code><span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Thread</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token keyword\\\">enum</span> <span class=\\\"token class-name\\\">State</span> <span class=\\\"token punctuation\\\">{</span>\\n    \\n        <span class=\\\"token comment\\\">/* 新建 */</span>\\n        <span class=\\\"token constant\\\">NEW</span> <span class=\\\"token punctuation\\\">,</span> \\n\\n        <span class=\\\"token comment\\\">/* 可运行状态 */</span>\\n        <span class=\\\"token constant\\\">RUNNABLE</span> <span class=\\\"token punctuation\\\">,</span> \\n\\n        <span class=\\\"token comment\\\">/* 阻塞状态 */</span>\\n        <span class=\\\"token constant\\\">BLOCKED</span> <span class=\\\"token punctuation\\\">,</span> \\n\\n        <span class=\\\"token comment\\\">/* 无限等待状态 */</span>\\n        <span class=\\\"token constant\\\">WAITING</span> <span class=\\\"token punctuation\\\">,</span> \\n\\n        <span class=\\\"token comment\\\">/* 计时等待 */</span>\\n        <span class=\\\"token constant\\\">TIMED_WAITING</span> <span class=\\\"token punctuation\\\">,</span> \\n\\n        <span class=\\\"token comment\\\">/* 终止 */</span>\\n        <span class=\\\"token constant\\\">TERMINATED</span><span class=\\\"token punctuation\\\">;</span>\\n    \\n\\t<span class=\\\"token punctuation\\\">}</span>\\n    \\n    <span class=\\\"token comment\\\">// 获取当前线程的状态</span>\\n    <span class=\\\"token keyword\\\">public</span> <span class=\\\"token class-name\\\">State</span> <span class=\\\"token function\\\">getState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">return</span> jdk<span class=\\\"token punctuation\\\">.</span>internal<span class=\\\"token punctuation\\\">.</span>misc<span class=\\\"token punctuation\\\">.</span><span class=\\\"token constant\\\">VM</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toThreadState</span><span class=\\\"token punctuation\\\">(</span>threadStatus<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    \\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
