import comp from "D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/12-ObjectOrientedAdvancement(StaticInheritance).html.vue"
const data = JSON.parse("{\"path\":\"/rear-end/Java/12-ObjectOrientedAdvancement(StaticInheritance).html\",\"title\":\"😢 12.面向对象进阶(static 继承)\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"😢 12.面向对象进阶(static 继承)\",\"tag\":[\"Java\"],\"recommend\":13,\"description\":\"1. 复习回顾 1.1 如何定义类 类的定义格式如下: 例如: 1.2 如何通过类创建对象 例如: 1.3 封装 1.3.1 封装的步骤 1.使用 private 关键字来修饰成员变量。 2.使用public修饰getter和setter方法。 1.3.2 封装的步骤实现 private修饰成员变量 public修饰getter和setter方法 1....\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://soft-vault.com/rear-end/Java/12-ObjectOrientedAdvancement(StaticInheritance).html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"😢 12.面向对象进阶(static 继承)\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1. 复习回顾 1.1 如何定义类 类的定义格式如下: 例如: 1.2 如何通过类创建对象 例如: 1.3 封装 1.3.1 封装的步骤 1.使用 private 关键字来修饰成员变量。 2.使用public修饰getter和setter方法。 1.3.2 封装的步骤实现 private修饰成员变量 public修饰getter和setter方法 1....\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:image\",\"content\":\"https://img.picgo.net/2023/11/06/15a1c9b67ded6e03e.jpeg\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"name\":\"twitter:card\",\"content\":\"summary_large_image\"}],[\"meta\",{\"name\":\"twitter:image:alt\",\"content\":\"😢 12.面向对象进阶(static 继承)\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Java\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"😢 12.面向对象进阶(static 继承)\\\",\\\"image\\\":[\\\"https://img.picgo.net/2023/11/06/15a1c9b67ded6e03e.jpeg\\\",\\\"https://img.picgo.net/2023/11/06/36020181202211331250a40c7eeeed687fe3.jpeg\\\",\\\"https://img.picgo.net/2023/11/06/2b20bcc8fa46dbbdb.jpeg\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Night.Soul\\\",\\\"url\\\":\\\"https://github.com/NightSquirrl\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"1. 复习回顾\",\"slug\":\"_1-复习回顾\",\"link\":\"#_1-复习回顾\",\"children\":[{\"level\":3,\"title\":\"1.1 如何定义类\",\"slug\":\"_1-1-如何定义类\",\"link\":\"#_1-1-如何定义类\",\"children\":[]},{\"level\":3,\"title\":\"1.2 如何通过类创建对象\",\"slug\":\"_1-2-如何通过类创建对象\",\"link\":\"#_1-2-如何通过类创建对象\",\"children\":[]},{\"level\":3,\"title\":\"1.3 封装\",\"slug\":\"_1-3-封装\",\"link\":\"#_1-3-封装\",\"children\":[]}]},{\"level\":2,\"title\":\"1.4 构造方法\",\"slug\":\"_1-4-构造方法\",\"link\":\"#_1-4-构造方法\",\"children\":[{\"level\":3,\"title\":\"1.4.1 构造方法的作用\",\"slug\":\"_1-4-1-构造方法的作用\",\"link\":\"#_1-4-1-构造方法的作用\",\"children\":[]},{\"level\":3,\"title\":\"1.4.2 构造方法的格式\",\"slug\":\"_1-4-2-构造方法的格式\",\"link\":\"#_1-4-2-构造方法的格式\",\"children\":[]},{\"level\":3,\"title\":\"1.4.3 构造方法的应用\",\"slug\":\"_1-4-3-构造方法的应用\",\"link\":\"#_1-4-3-构造方法的应用\",\"children\":[]}]},{\"level\":2,\"title\":\"1.5 this关键字的作用\",\"slug\":\"_1-5-this关键字的作用\",\"link\":\"#_1-5-this关键字的作用\",\"children\":[{\"level\":3,\"title\":\"1.5.1 this关键字的作用\",\"slug\":\"_1-5-1-this关键字的作用\",\"link\":\"#_1-5-1-this关键字的作用\",\"children\":[]},{\"level\":3,\"title\":\"1.5.2 this关键字的应用\",\"slug\":\"_1-5-2-this关键字的应用\",\"link\":\"#_1-5-2-this关键字的应用\",\"children\":[]}]},{\"level\":2,\"title\":\"2.  static关键字\",\"slug\":\"_2-static关键字\",\"link\":\"#_2-static关键字\",\"children\":[{\"level\":3,\"title\":\"2.1 概述\",\"slug\":\"_2-1-概述\",\"link\":\"#_2-1-概述\",\"children\":[]},{\"level\":3,\"title\":\"2.2 定义格式和使用\",\"slug\":\"_2-2-定义格式和使用\",\"link\":\"#_2-2-定义格式和使用\",\"children\":[]},{\"level\":3,\"title\":\"2.3 小结\",\"slug\":\"_2-3-小结\",\"link\":\"#_2-3-小结\",\"children\":[]}]},{\"level\":2,\"title\":\"3. 继承\",\"slug\":\"_3-继承\",\"link\":\"#_3-继承\",\"children\":[{\"level\":3,\"title\":\"3.1 概述\",\"slug\":\"_3-1-概述\",\"link\":\"#_3-1-概述\",\"children\":[]},{\"level\":3,\"title\":\"3.2 继承的格式\",\"slug\":\"_3-2-继承的格式\",\"link\":\"#_3-2-继承的格式\",\"children\":[]},{\"level\":3,\"title\":\"3.3 继承案例\",\"slug\":\"_3-3-继承案例\",\"link\":\"#_3-3-继承案例\",\"children\":[]},{\"level\":3,\"title\":\"3.4 子类不能继承的内容\",\"slug\":\"_3-4-子类不能继承的内容\",\"link\":\"#_3-4-子类不能继承的内容\",\"children\":[]},{\"level\":3,\"title\":\"3.5 继承后的特点—成员变量\",\"slug\":\"_3-5-继承后的特点—成员变量\",\"link\":\"#_3-5-继承后的特点—成员变量\",\"children\":[]},{\"level\":3,\"title\":\"3.6 继承后的特点—成员方法\",\"slug\":\"_3-6-继承后的特点—成员方法\",\"link\":\"#_3-6-继承后的特点—成员方法\",\"children\":[]},{\"level\":3,\"title\":\"3.7 方法重写\",\"slug\":\"_3-7-方法重写\",\"link\":\"#_3-7-方法重写\",\"children\":[]},{\"level\":3,\"title\":\"3.8 继承后的特点—构造方法\",\"slug\":\"_3-8-继承后的特点—构造方法\",\"link\":\"#_3-8-继承后的特点—构造方法\",\"children\":[]},{\"level\":3,\"title\":\"3.9 super(...)和this(...)\",\"slug\":\"_3-9-super-和this\",\"link\":\"#_3-9-super-和this\",\"children\":[]}]},{\"level\":2,\"title\":\"4. 关于知识的小结：\",\"slug\":\"_4-关于知识的小结\",\"link\":\"#_4-关于知识的小结\",\"children\":[]}],\"readingTime\":{\"minutes\":23.61,\"words\":7082},\"filePathRelative\":\"rear-end/Java/12-ObjectOrientedAdvancement(StaticInheritance).md\",\"excerpt\":\"<h2>1. 复习回顾</h2>\\n<h3>1.1 如何定义类</h3>\\n<p>类的定义格式如下:</p>\\n<div class=\\\"language-java\\\" data-ext=\\\"java\\\" data-title=\\\"java\\\"><pre class=\\\"language-java\\\"><code>修饰符 <span class=\\\"token keyword\\\">class</span> 类名 <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// 1.成员变量（属性）</span>\\n    <span class=\\\"token comment\\\">// 2.成员方法 (行为) </span>\\n    <span class=\\\"token comment\\\">// 3.构造方法 （初始化类的对象数据的）</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre></div>\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
