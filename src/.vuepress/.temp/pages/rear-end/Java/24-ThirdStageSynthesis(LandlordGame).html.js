import comp from "D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/24-ThirdStageSynthesis(LandlordGame).html.vue"
const data = JSON.parse("{\"path\":\"/rear-end/Java/24-ThirdStageSynthesis(LandlordGame).html\",\"title\":\"😢 24.第三阶段综合练习(斗地主游戏)\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"😢 24.第三阶段综合练习(斗地主游戏)\",\"tag\":[\"Java\"],\"recommend\":25,\"description\":\"1. 可变参数 在JDK1.5之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化. 格式： 底层： ​ 其实就是一个数组 好处： ​ 在传递数据的时候，省的我们自己创建数组并添加元素了，JDK底层帮我们自动创建数组并添加元素了 代码演示: 注意： ​ 1.一个方法只能有一个可变参数 ​ 2.如果方法中有多个参数，可变参数...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://soft-vault.com/rear-end/Java/24-ThirdStageSynthesis(LandlordGame).html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"😢 24.第三阶段综合练习(斗地主游戏)\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1. 可变参数 在JDK1.5之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化. 格式： 底层： ​ 其实就是一个数组 好处： ​ 在传递数据的时候，省的我们自己创建数组并添加元素了，JDK底层帮我们自动创建数组并添加元素了 代码演示: 注意： ​ 1.一个方法只能有一个可变参数 ​ 2.如果方法中有多个参数，可变参数...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Java\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"😢 24.第三阶段综合练习(斗地主游戏)\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Night.Soul\\\",\\\"url\\\":\\\"https://github.com/NightSquirrl\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"2.1 Collections常用功能\",\"slug\":\"_2-1-collections常用功能\",\"link\":\"#_2-1-collections常用功能\",\"children\":[]},{\"level\":2,\"title\":\"2.2 Comparator比较器\",\"slug\":\"_2-2-comparator比较器\",\"link\":\"#_2-2-comparator比较器\",\"children\":[{\"level\":3,\"title\":\"练习1：随机点名器\",\"slug\":\"练习1-随机点名器\",\"link\":\"#练习1-随机点名器\",\"children\":[]},{\"level\":3,\"title\":\"练习2：带概率的随机\",\"slug\":\"练习2-带概率的随机\",\"link\":\"#练习2-带概率的随机\",\"children\":[]},{\"level\":3,\"title\":\"练习3：随机不重复\",\"slug\":\"练习3-随机不重复\",\"link\":\"#练习3-随机不重复\",\"children\":[]}]},{\"level\":2,\"title\":\"练习4：集合的嵌套\",\"slug\":\"练习4-集合的嵌套\",\"link\":\"#练习4-集合的嵌套\",\"children\":[]},{\"level\":2,\"title\":\"4.1 案例介绍\",\"slug\":\"_4-1-案例介绍\",\"link\":\"#_4-1-案例介绍\",\"children\":[]},{\"level\":2,\"title\":\"4.2 案例分析\",\"slug\":\"_4-2-案例分析\",\"link\":\"#_4-2-案例分析\",\"children\":[]},{\"level\":2,\"title\":\"4.3 代码实现\",\"slug\":\"_4-3-代码实现\",\"link\":\"#_4-3-代码实现\",\"children\":[]},{\"level\":2,\"title\":\"4.4 排序（第一种排序方式）\",\"slug\":\"_4-4-排序-第一种排序方式\",\"link\":\"#_4-4-排序-第一种排序方式\",\"children\":[]},{\"level\":2,\"title\":\"4.5 排序（第二种排序方式）\",\"slug\":\"_4-5-排序-第二种排序方式\",\"link\":\"#_4-5-排序-第二种排序方式\",\"children\":[]}],\"readingTime\":{\"minutes\":10.82,\"words\":3245},\"filePathRelative\":\"rear-end/Java/24-ThirdStageSynthesis(LandlordGame).md\",\"excerpt\":\"\\n<p>在<strong>JDK1.5</strong>之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化.</p>\\n<p><strong>格式：</strong></p>\\n<div class=\\\"language-text\\\" data-ext=\\\"text\\\" data-title=\\\"text\\\"><pre class=\\\"language-text\\\"><code>修饰符 返回值类型 方法名(参数类型... 形参名){  }\\n</code></pre></div><p><strong>底层：</strong></p>\\n<p>​\\t其实就是一个数组</p>\\n<p><strong>好处：</strong></p>\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
