import comp from "/Users/zeroeldath/Desktop/ignore-space/what-tools-blog/src/.vuepress/.temp/pages/rear-end/Java/31-ReflectionDynamicProxy.html.vue"
const data = JSON.parse("{\"path\":\"/rear-end/Java/31-ReflectionDynamicProxy.html\",\"title\":\"😢 31.反射动态代理\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"😢 31.反射动态代理\",\"tag\":[\"Java\"],\"recommend\":32,\"description\":\"1. 反射 1.1 反射的概述： ​ 专业的解释（了解一下）： ​ 是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法； ​ 对于任意一个对象，都能够调用它的任意属性和方法； ​ 这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。 ​ 通俗的理解：（掌握） 利用反射创建的对象可以无视修饰符调用类里面的内容 可以跟配置文...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://soft-vault.com/rear-end/Java/31-ReflectionDynamicProxy.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"😢 31.反射动态代理\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1. 反射 1.1 反射的概述： ​ 专业的解释（了解一下）： ​ 是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法； ​ 对于任意一个对象，都能够调用它的任意属性和方法； ​ 这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。 ​ 通俗的理解：（掌握） 利用反射创建的对象可以无视修饰符调用类里面的内容 可以跟配置文...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"og:updated_time\",\"content\":\"2024-02-05T17:55:50.000Z\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Java\"}],[\"meta\",{\"property\":\"article:modified_time\",\"content\":\"2024-02-05T17:55:50.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"😢 31.反射动态代理\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":\\\"2024-02-05T17:55:50.000Z\\\",\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Night.Soul\\\",\\\"url\\\":\\\"https://github.com/NightSquirrl\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"1.1 反射的概述：\",\"slug\":\"_1-1-反射的概述\",\"link\":\"#_1-1-反射的概述\",\"children\":[]},{\"level\":2,\"title\":\"1.2 学习反射到底学什么？\",\"slug\":\"_1-2-学习反射到底学什么\",\"link\":\"#_1-2-学习反射到底学什么\",\"children\":[]},{\"level\":2,\"title\":\"1.3 获取字节码文件对象的三种方式\",\"slug\":\"_1-3-获取字节码文件对象的三种方式\",\"link\":\"#_1-3-获取字节码文件对象的三种方式\",\"children\":[]},{\"level\":2,\"title\":\"1.4 字节码文件和字节码文件对象\",\"slug\":\"_1-4-字节码文件和字节码文件对象\",\"link\":\"#_1-4-字节码文件和字节码文件对象\",\"children\":[]},{\"level\":2,\"title\":\"1.5 获取构造方法\",\"slug\":\"_1-5-获取构造方法\",\"link\":\"#_1-5-获取构造方法\",\"children\":[]},{\"level\":2,\"title\":\"1.6 获取构造方法并创建对象\",\"slug\":\"_1-6-获取构造方法并创建对象\",\"link\":\"#_1-6-获取构造方法并创建对象\",\"children\":[]},{\"level\":2,\"title\":\"1.7 获取成员变量\",\"slug\":\"_1-7-获取成员变量\",\"link\":\"#_1-7-获取成员变量\",\"children\":[]},{\"level\":2,\"title\":\"1.8 获取成员变量并获取值和修改值\",\"slug\":\"_1-8-获取成员变量并获取值和修改值\",\"link\":\"#_1-8-获取成员变量并获取值和修改值\",\"children\":[]},{\"level\":2,\"title\":\"1.9 获取成员方法\",\"slug\":\"_1-9-获取成员方法\",\"link\":\"#_1-9-获取成员方法\",\"children\":[]},{\"level\":2,\"title\":\"1.10 获取成员方法并运行\",\"slug\":\"_1-10-获取成员方法并运行\",\"link\":\"#_1-10-获取成员方法并运行\",\"children\":[]},{\"level\":2,\"title\":\"面试题：\",\"slug\":\"面试题\",\"link\":\"#面试题\",\"children\":[]},{\"level\":2,\"title\":\"1.11 练习泛型擦除（掌握概念，了解代码）\",\"slug\":\"_1-11-练习泛型擦除-掌握概念-了解代码\",\"link\":\"#_1-11-练习泛型擦除-掌握概念-了解代码\",\"children\":[]},{\"level\":2,\"title\":\"1.12 练习：修改字符串的内容（掌握概念，了解代码）\",\"slug\":\"_1-12-练习-修改字符串的内容-掌握概念-了解代码\",\"link\":\"#_1-12-练习-修改字符串的内容-掌握概念-了解代码\",\"children\":[]},{\"level\":2,\"title\":\"1.13 练习，反射和配置文件结合动态获取的练习（重点）\",\"slug\":\"_1-13-练习-反射和配置文件结合动态获取的练习-重点\",\"link\":\"#_1-13-练习-反射和配置文件结合动态获取的练习-重点\",\"children\":[]},{\"level\":2,\"title\":\"1.14 利用发射保存对象中的信息（重点）\",\"slug\":\"_1-14-利用发射保存对象中的信息-重点\",\"link\":\"#_1-14-利用发射保存对象中的信息-重点\",\"children\":[]},{\"level\":2,\"title\":\"2.1 好处：\",\"slug\":\"_2-1-好处\",\"link\":\"#_2-1-好处\",\"children\":[]},{\"level\":2,\"title\":\"2.2 动态代理三要素：\",\"slug\":\"_2-2-动态代理三要素\",\"link\":\"#_2-2-动态代理三要素\",\"children\":[]},{\"level\":2,\"title\":\"2.3 代码实现：\",\"slug\":\"_2-3-代码实现\",\"link\":\"#_2-3-代码实现\",\"children\":[]},{\"level\":2,\"title\":\"2.4 额外扩展\",\"slug\":\"_2-4-额外扩展\",\"link\":\"#_2-4-额外扩展\",\"children\":[]},{\"level\":2,\"title\":\"2.5 动态代理的练习\",\"slug\":\"_2-5-动态代理的练习\",\"link\":\"#_2-5-动态代理的练习\",\"children\":[]}],\"git\":{\"createdTime\":1707155750000,\"updatedTime\":1707155750000,\"contributors\":[{\"name\":\"zeroeldath\",\"email\":\"zeroeldath@Mac-Pro.local\",\"commits\":1}]},\"readingTime\":{\"minutes\":19.2,\"words\":5760},\"filePathRelative\":\"rear-end/Java/31-ReflectionDynamicProxy.md\",\"localizedDate\":\"2024年2月6日\",\"excerpt\":\"\\n<h2>1.1 反射的概述：</h2>\\n<p>​\\t<strong>专业的解释（了解一下）：</strong></p>\\n<p>​       是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；</p>\\n<p>​       对于任意一个对象，都能够调用它的任意属性和方法；</p>\\n<p>​       这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</p>\\n<p>​\\t<strong>通俗的理解：（掌握）</strong></p>\\n<ul>\\n<li>\\n<p>利用<strong>反射</strong>创建的对象<strong>可以无视修饰符</strong>调用类里面的内容</p>\\n</li>\\n<li>\\n<p>可以跟<strong>配置文件结合起来使用</strong>，把要创建的对象信息和方法写在配置文件中。</p>\\n<p>读取到什么类，就创建什么类的对象</p>\\n<p>读取到什么方法，就调用什么方法</p>\\n<p>此时当需求变更的时候不需要修改代码，只要修改配置文件即可。</p>\\n</li>\\n</ul>\",\"autoDesc\":true}")
export { comp, data }
