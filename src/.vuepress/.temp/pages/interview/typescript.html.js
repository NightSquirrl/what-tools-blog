import comp from "/Users/zeroeldath/Desktop/ignore-space/zero-eldath/whatToolsBlog/src/.vuepress/.temp/pages/interview/typescript.html.vue"
const data = JSON.parse("{\"path\":\"/interview/typescript.html\",\"title\":\"Typescript面试题\",\"lang\":\"zh-CN\",\"frontmatter\":{\"title\":\"Typescript面试题\",\"tags\":[\"Typescript\",\"面试\"],\"description\":\"1. TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？ const 和 readonly: const可以防止变量的值被修改，readonly可以防止变量的属性被修改。 普通枚举 常量枚举 常量枚举与普通枚举的主要区别在于它们的成员在编译时会被内联到使用它们的地方，而不是创建一个包含所有成...\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"https://soft-vault.com/interview/typescript.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Typescript面试题\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"1. TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？ const 和 readonly: const可以防止变量的值被修改，readonly可以防止变量的属性被修改。 普通枚举 常量枚举 常量枚举与普通枚举的主要区别在于它们的成员在编译时会被内联到使用它们的地方，而不是创建一个包含所有成...\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:author\",\"content\":\"Night.Soul\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"Typescript\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"面试\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Typescript面试题\\\",\\\"image\\\":[\\\"\\\"],\\\"dateModified\\\":null,\\\"author\\\":[{\\\"@type\\\":\\\"Person\\\",\\\"name\\\":\\\"Night.Soul\\\",\\\"url\\\":\\\"https://github.com/NightSquirrl\\\"}]}\"]]},\"headers\":[{\"level\":2,\"title\":\"1. TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？\",\"slug\":\"_1-typescript-中-const-和-readonly-的区别-枚举和常量枚举的区别-接口和类型别名的区别\",\"link\":\"#_1-typescript-中-const-和-readonly-的区别-枚举和常量枚举的区别-接口和类型别名的区别\",\"children\":[]},{\"level\":2,\"title\":\"2. TypeScript 中 any、never、unknown、null & undefined 和 void 有什么区别？\",\"slug\":\"_2-typescript-中-any、never、unknown、null-undefined-和-void-有什么区别\",\"link\":\"#_2-typescript-中-any、never、unknown、null-undefined-和-void-有什么区别\",\"children\":[]},{\"level\":2,\"title\":\"3. TypeScript 中 interface 可以给 Function / Array / Class（Indexable）做声明吗？\",\"slug\":\"_3-typescript-中-interface-可以给-function-array-class-indexable-做声明吗\",\"link\":\"#_3-typescript-中-interface-可以给-function-array-class-indexable-做声明吗\",\"children\":[]},{\"level\":2,\"title\":\"4. 声明数组的方法\",\"slug\":\"_4-声明数组的方法\",\"link\":\"#_4-声明数组的方法\",\"children\":[]},{\"level\":2,\"title\":\"5. TypeScript 中的 this 和 JavaScript 中的 this 有什么差异？\",\"slug\":\"_5-typescript-中的-this-和-javascript-中的-this-有什么差异\",\"link\":\"#_5-typescript-中的-this-和-javascript-中的-this-有什么差异\",\"children\":[]},{\"level\":2,\"title\":\"6. TypeScript 如何设计 Class 的声明？\",\"slug\":\"_6-typescript-如何设计-class-的声明\",\"link\":\"#_6-typescript-如何设计-class-的声明\",\"children\":[]},{\"level\":2,\"title\":\"7. TypeScript 中如何联合枚举类型的 Key?\",\"slug\":\"_7-typescript-中如何联合枚举类型的-key\",\"link\":\"#_7-typescript-中如何联合枚举类型的-key\",\"children\":[]},{\"level\":2,\"title\":\"8. TypeScript 中 ?.、??、!、!.、_、* 等符号的含义？*\",\"slug\":\"_8-typescript-中-、-、-、-、-、-等符号的含义\",\"link\":\"#_8-typescript-中-、-、-、-、-、-等符号的含义\",\"children\":[]},{\"level\":2,\"title\":\"9. 简单介绍一下 TypeScript 模块的加载机制？\",\"slug\":\"_9-简单介绍一下-typescript-模块的加载机制\",\"link\":\"#_9-简单介绍一下-typescript-模块的加载机制\",\"children\":[]},{\"level\":2,\"title\":\"10. 简单聊聊你对 TypeScript 类型兼容性的理解？\",\"slug\":\"_10-简单聊聊你对-typescript-类型兼容性的理解\",\"link\":\"#_10-简单聊聊你对-typescript-类型兼容性的理解\",\"children\":[]},{\"level\":2,\"title\":\"11. 类型的全局声明和局部声明\",\"slug\":\"_11-类型的全局声明和局部声明\",\"link\":\"#_11-类型的全局声明和局部声明\",\"children\":[]},{\"level\":2,\"title\":\"12. declare，declare global是什么？\",\"slug\":\"_12-declare-declare-global是什么\",\"link\":\"#_12-declare-declare-global是什么\",\"children\":[]},{\"level\":2,\"title\":\"13. 对 TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解？\",\"slug\":\"_13-对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解\",\"link\":\"#_13-对-typescript-类中成员的-public、private、protected、readonly-修饰符的理解\",\"children\":[]},{\"level\":2,\"title\":\"14.  keyof 和 typeof 关键字的作用？\",\"slug\":\"_14-keyof-和-typeof-关键字的作用\",\"link\":\"#_14-keyof-和-typeof-关键字的作用\",\"children\":[]},{\"level\":2,\"title\":\"15. TypeScript数据类型\",\"slug\":\"_15-typescript数据类型\",\"link\":\"#_15-typescript数据类型\",\"children\":[]}],\"readingTime\":{\"minutes\":6.21,\"words\":1862},\"filePathRelative\":\"interview/typescript.md\",\"excerpt\":\"<h2>1. <strong>TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？</strong></h2>\\n<p><code>const 和 readonly</code>: const可以防止变量的值被修改，readonly可以防止<mark>变量的属性</mark>被修改。</p>\\n<p><code>普通枚举</code></p>\\n<div class=\\\"language-typescript\\\" data-ext=\\\"ts\\\" data-title=\\\"ts\\\"><pre class=\\\"language-typescript\\\"><code><span class=\\\"token keyword\\\">enum</span> Direction <span class=\\\"token punctuation\\\">{</span>\\n    Up<span class=\\\"token punctuation\\\">,</span>\\n    Down<span class=\\\"token punctuation\\\">,</span>\\n    Left<span class=\\\"token punctuation\\\">,</span>\\n    Right\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">let</span> direction<span class=\\\"token operator\\\">:</span> Direction <span class=\\\"token operator\\\">=</span> Direction<span class=\\\"token punctuation\\\">.</span>Up<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token builtin\\\">console</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>direction<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 输出 \\\"Up\\\"</span>\\n</code></pre></div>\",\"autoDesc\":true}")
export { comp, data }

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
