export const redirects = JSON.parse("{\"/rear-end/Java/26-%20IOStream(ByteStream&CharacterStream).html\":\"/rear-end/Java/26-%20IOStream(ByteStream_CharacterStream).html\",\"/rear-end/Java/32-IO(Exception&File&ComprehensiveCase).html\":\"/rear-end/Java/32-IO(Exception_File_ComprehensiveCase).html\",\"/web/webpack/Webpack+React.html\":\"/web/webpack/Webpack_React.html\"}")

export const routes = Object.fromEntries([
  ["/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/index.html.js"), meta: {"t":"回到主页","i":"home"} }],
  ["/interview/Javascript.html", { loader: () => import(/* webpackChunkName: "Javascript.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/interview/Javascript.html.js"), meta: {"d":1708508734000,"g":["面试","Javascript"],"e":"<h2>1. 根据下面 ES6 构造函数的书写方式，要求写出 ES5 的</h2>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token punctuation\">{</span> \n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> e <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Example</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ne<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre></div>","r":{"minutes":17.11,"words":5132},"t":"Javascript 面试题","y":"a"} }],
  ["/interview/react.html", { loader: () => import(/* webpackChunkName: "react.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/interview/react.html.js"), meta: {"d":1713704305000,"g":["React","面试"],"e":"<h2>1. Hook</h2>\n<h3>State Hook</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">ImageGallery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span> setIndex<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n</code></pre></div>","r":{"minutes":3.66,"words":1097},"t":"React 面试题","y":"a"} }],
  ["/interview/typescript.html", { loader: () => import(/* webpackChunkName: "typescript.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/interview/typescript.html.js"), meta: {"d":1713704305000,"g":["Typescript","面试"],"e":"<h2>1. <strong>TypeScript 中 const 和 readonly 的区别？枚举和常量枚举的区别？接口和类型别名的区别？</strong></h2>\n<p><code>const 和 readonly</code>: const可以防止变量的值被修改，readonly可以防止<mark>变量的属性</mark>被修改。</p>\n<p><code>普通枚举</code></p>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">enum</span> Direction <span class=\"token punctuation\">{</span>\n    Up<span class=\"token punctuation\">,</span>\n    Down<span class=\"token punctuation\">,</span>\n    Left<span class=\"token punctuation\">,</span>\n    Right\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> direction<span class=\"token operator\">:</span> Direction <span class=\"token operator\">=</span> Direction<span class=\"token punctuation\">.</span>Up<span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>direction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 \"Up\"</span>\n</code></pre></div>","r":{"minutes":6.21,"words":1862},"t":"Typescript面试题","y":"a"} }],
  ["/interview/Vue.html", { loader: () => import(/* webpackChunkName: "Vue.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/interview/Vue.html.js"), meta: {"d":1707592973000,"g":["面试","Vue"],"e":"<h2>1. Vue.js 与其他前端框架（如React和Angular）相比有什么优势和区别？</h2>\n<details>\n  <summary>点击展开/折叠</summary>\n<ol>\n<li>简单性和易用性：</li>\n</ol>\n<p>Vue.js 是一款轻量级框架，容易学习和上手。它提供了直观的API和清晰的文档，使开发者可以迅速构建应用程序。\nReact 和 Angular 在某些方面更复杂，需要更多的学习成本。</p>\n<ol start=\"2\">\n<li>渐进式框架：</li>\n</ol>\n<p>Vue.js 被称为渐进式框架，允许你逐步采用它的特性。这意味着你可以在现有项目中集成Vue.js，而不必一次性重写整个应用。\nReact 和 Angular 在集成到现有项目时可能需要更多的工作。</p>\n<ol start=\"3\">\n<li>双向数据绑定：</li>\n</ol>\n<p>Vue.js 提供了直接的双向数据绑定，使数据在视图和模型之间保持同步。这使得开发人员更容易管理应用程序的状态。\nReact 和 Angular 也支持数据绑定，但它们的实现方式略有不同。</p>\n<ol start=\"4\">\n<li>组件化开发：</li>\n</ol>\n<p>Vue.js、React 和 Angular 都鼓励组件化开发，但Vue.js在这方面表现出色。Vue组件的定义非常简单，易于复用和维护。\nReact 使用JSX来创建组件，Angular使用模板。这些框架的组件系统也很强大，但可能需要更多的配置。</p>\n<ol start=\"5\">\n<li>生态系统和社区：</li>\n</ol>\n<p>React 和 Angular 有庞大的生态系统和活跃的社区支持，有丰富的第三方库和插件。\nVue.js 的生态系统也在不断壮大，虽然相对较小，但社区也非常积极。</p>\n<ol start=\"6\">\n<li>性能：</li>\n</ol>\n<p>Vue.js 在性能方面表现良好，具有虚拟DOM机制，可以高效地更新视图。\nReact 也使用虚拟DOM，性能也很出色。Angular 在某些情况下可能需要更多的性能优化工作。</p>\n<ol start=\"7\">\n<li>工具和生态系统：</li>\n</ol>\n<p>Vue.js 提供了一些强大的工具，如Vue CLI，用于快速搭建项目，并与Vue Router和Vuex等官方库集成。\nReact 和 Angular 也有类似的工具和库，但Vue的工具生态系统在某些方面更加直观和易用。</p>\n<p>使用案例：</p>\n<p>Vue.js 适用于中小型应用程序和单页面应用程序（SPA），以及需要快速原型开发的项目。\nReact 和 Angular 适用于各种规模的应用，包括大型企业级应用。总之，选择使用哪个前端框架取决于项目的需求和团队的偏好。Vue.js在简单性、易用性和渐进式开发方面具有优势，适合许多项目，但React和Angular在大型应用和企业级项目中也有其优势。</p>\n</details>","r":{"minutes":38.43,"words":11530},"t":"Vue 面试题","y":"a"} }],
  ["/server/basic-use-of-drawing-bed.html", { loader: () => import(/* webpackChunkName: "basic-use-of-drawing-bed.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/basic-use-of-drawing-bed.html.js"), meta: {"d":1699684826000,"g":["图床"],"u":97,"e":"<h2>1. 下载与安装</h2>\n<p><a href=\"https://github.com/Molunerfinn/PicGo/releases\" target=\"_blank\" rel=\"noopener noreferrer\">下载地址PicGo</a></p>\n<p><a href=\"https://www.picgo.net\" target=\"_blank\" rel=\"noopener noreferrer\">图床网站地址</a></p>\n<h2>2. 配置图床地址</h2>\n<h3>2.1 菜单“插件设置”搜索插件\"chevereto\"安装</h3>\n<figure><img src=\"https://img.picgo.net/2022/04/16/20220416203220.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>","r":{"minutes":0.74,"words":221},"t":"😤 图床的基本使用","y":"a"} }],
  ["/server/serverInitializationUsage.html", { loader: () => import(/* webpackChunkName: "serverInitializationUsage.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/serverInitializationUsage.html.js"), meta: {"d":1699684826000,"g":["服务器"],"u":96,"e":"<h2>连接命令</h2>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">ssh</span> root@ip\n<span class=\"token comment\"># 然后会让你输入密码</span>\nxxxxx  \n<span class=\"token comment\"># 成功进入</span>\n</code></pre></div><blockquote>\n<p>细节</p>\n<p>​\t如果此时你已经连接过了,然后你又重装了服务器的系统</p>\n<p>​\t当你再次连接的时候是无法连接上的</p>\n<p>​\t基本的错误如下</p>\n</blockquote>","r":{"minutes":2.52,"words":756},"t":"🧐 服务器的初始化使用","y":"a"} }],
  ["/rear-end/Java/1-IntroductionToFundamentals.html", { loader: () => import(/* webpackChunkName: "1-IntroductionToFundamentals.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/1-IntroductionToFundamentals.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1. Java概述</h2>\n<h3>1.1 Java是什么？</h3>\n<p>语言：人与人交流沟通的表达方式</p>\n<p>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言</p>\n<p>Java是一门非常火的计算机语言。（也叫做编程语言）</p>\n<p>我们想要让计算机做一些事情，那么就可以通过Java语言告诉计算机就可以了</p>\n<h3>1.2 下载和安装</h3>\n<h4>1.2.1 下载</h4>\n<p>通过官方网站获取JDK</p>\n<p><a href=\"http://www.oracle.com/\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.oracle.com</a></p>","r":{"minutes":3.32,"words":997},"t":"😢 1. Java基础入门","y":"a"} }],
  ["/rear-end/Java/10-String.html", { loader: () => import(/* webpackChunkName: "10-String.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/10-String.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1.API</h2>\n<h3>1.1API概述</h3>\n<ul>\n<li>\n<p>什么是API</p>\n<p>​\tAPI (Application Programming Interface) ：应用程序编程接口</p>\n</li>\n<li>\n<p>java中的API</p>\n<p>​\t指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。</p>\n</li>\n</ul>\n<h2>2.String类</h2>\n<h3>2.1String类概述</h3>","r":{"minutes":15.34,"words":4601},"t":"😢 10.字符串","y":"a"} }],
  ["/rear-end/Java/11-SetArrayList.html", { loader: () => import(/* webpackChunkName: "11-SetArrayList.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/11-SetArrayList.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1.ArrayList</h2>\n<h3>集合和数组的优势对比：</h3>\n<ol>\n<li>长度可变</li>\n<li>添加数据的时候不需要考虑索引，默认将数据添加到末尾</li>\n</ol>\n<h3>1.1 ArrayList类概述</h3>\n<ul>\n<li>\n<p>什么是集合</p>\n<p>​\t提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</p>\n</li>\n<li>\n<p>ArrayList集合的特点</p>\n<p>​\t长度可以变化，只能存储引用数据类型。</p>\n</li>\n<li>\n<p>泛型的使用</p>\n<p>​\t用于约束集合中存储元素的数据类型</p>\n</li>\n</ul>","r":{"minutes":10.82,"words":3247},"t":"😢 11.集合ArrayList","y":"a"} }],
  ["/rear-end/Java/12-ObjectOrientedAdvancement(StaticInheritance).html", { loader: () => import(/* webpackChunkName: "12-ObjectOrientedAdvancement(StaticInheritance).html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/12-ObjectOrientedAdvancement(StaticInheritance).html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1. 复习回顾</h2>\n<h3>1.1 如何定义类</h3>\n<p>类的定义格式如下:</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>修饰符 <span class=\"token keyword\">class</span> 类名 <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1.成员变量（属性）</span>\n    <span class=\"token comment\">// 2.成员方法 (行为) </span>\n    <span class=\"token comment\">// 3.构造方法 （初始化类的对象数据的）</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","r":{"minutes":23.61,"words":7082},"t":"😢 12.面向对象进阶(static 继承)","y":"a"} }],
  ["/rear-end/Java/13-AdvancedObjectOriented(Polymorphic).html", { loader: () => import(/* webpackChunkName: "13-AdvancedObjectOriented(Polymorphic).html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/13-AdvancedObjectOriented(Polymorphic).html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1. 多态</h2>\n<h3>1.1 多态的形式</h3>\n<p><strong>多态是继封装、继承之后，面向对象的第三大特性。</strong></p>\n<p><strong>多态是出现在继承或者实现关系中的</strong>。</p>\n<p><strong>多态体现的格式</strong>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>父类类型 变量名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 子类<span class=\"token operator\">/</span>实现类构造器<span class=\"token punctuation\">;</span>\n变量名<span class=\"token punctuation\">.</span>方法名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","r":{"minutes":14.5,"words":4350},"t":"😢 13.面向对象进阶(多态)","y":"a"} }],
  ["/rear-end/Java/14-AdvancedObjectOriented(Interface).html", { loader: () => import(/* webpackChunkName: "14-AdvancedObjectOriented(Interface).html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/14-AdvancedObjectOriented(Interface).html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1. 抽象类</h2>\n<h3>1.1 概述</h3>\n<h4>1.1.1 抽象类引入</h4>\n<p>​\t父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了(因为子类对象会调用自己重写的方法)。换句话说，父类可能知道子类应该有哪个功能，但是功能具体怎么实现父类是不清楚的（由子类自己决定），父类只需要提供一个没有方法体的定义即可，具体实现交给子类自己去实现。<strong>我们把没有方法体的方法称为抽象方法。Java语法规定，包含抽象方法的类就是抽象类</strong>。</p>\n<ul>\n<li><strong>抽象方法</strong> ： 没有方法体的方法。</li>\n<li><strong>抽象类</strong>：包含抽象方法的类。</li>\n</ul>","r":{"minutes":17.81,"words":5343},"t":"😢 14.面向对象进阶(接口)","y":"a"} }],
  ["/rear-end/Java/15-ObjectOriented(ComprehensiveExercise1).html", { loader: () => import(/* webpackChunkName: "15-ObjectOriented(ComprehensiveExercise1).html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/15-ObjectOriented(ComprehensiveExercise1).html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1. 设计游戏的目的</h2>\n<ul>\n<li>锻炼逻辑思维能力</li>\n<li>利用Java的图形化界面，写一个项目，知道前面学习的知识点在实际开发中的应用场景</li>\n</ul>\n<h2>2. 游戏的最终效果呈现</h2>\n<p>Hello，各位同学大家好。今天，我们要写一个非常有意思的小游戏 ---《拼图小游戏》\n我们先来看一下游戏的最终成品展示，然后再一步一步的从0开始，完成游戏里面每一个细节。\n游戏运行之后，就是这样的界面。</p>\n<p>刚开始打开，是登录页面，因为是第一次运行，需要注册。点击注册就会跳转到注册页面</p>\n<figure><img src=\"https://img.picgo.net/2023/11/06/image-2023110618165961229513e901e7a854c.png\" alt=\"image-20231106181659612\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20231106181659612</figcaption></figure>","r":{"minutes":12.82,"words":3845},"t":"😢 15.面向对象进阶(综合练习 1)","y":"a"} }],
  ["/rear-end/Java/16-ObjectOriented(ComprehensiveExercise2).html", { loader: () => import(/* webpackChunkName: "16-ObjectOriented(ComprehensiveExercise2).html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/16-ObjectOriented(ComprehensiveExercise2).html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1. 美化界面</h2>\n<p>界面搭建好之后，就需要美化界面了，本次需要美化下面四个地方：</p>\n<ol>\n<li>\n<p>将15张小图片移动到界面的中央偏下方</p>\n</li>\n<li>\n<p>添加背景图片</p>\n</li>\n<li>\n<p>添加图片的边框</p>\n</li>\n<li>\n<p>优化路径</p>\n</li>\n</ol>\n<h3>1.1 小图片居中</h3>\n<p>原本的小图片，都在左上角的位置，不好看，我想让他们居中，这样就需要给每一张图片在x和y都进行一个偏移即可。</p>\n<p>代码示例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//内循环 --- 表示在一行添加4张图片</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//获取当前要加载图片的序号</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建一个JLabel的对象（管理容器）</span>\n        <span class=\"token class-name\">JLabel</span> jLabel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JLabel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageIcon</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">+</span> num <span class=\"token operator\">+</span> <span class=\"token string\">\".jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//指定图片位置，并进行适当的偏移</span>\n        jLabel<span class=\"token punctuation\">.</span><span class=\"token function\">setBounds</span><span class=\"token punctuation\">(</span><span class=\"token number\">105</span> <span class=\"token operator\">*</span> j <span class=\"token operator\">+</span> <span class=\"token number\">83</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">134</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//给图片添加边框</span>\n        <span class=\"token comment\">//0:表示让图片凸起来</span>\n        <span class=\"token comment\">//1：表示让图片凹下去</span>\n        jLabel<span class=\"token punctuation\">.</span><span class=\"token function\">setBorder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BevelBorder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BevelBorder</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOWERED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//把管理容器添加到界面中</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContentPane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>jLabel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","r":{"minutes":19.6,"words":5880},"t":"😢 16.面向对象进阶(综合练习 2)","y":"a"} }],
  ["/rear-end/Java/17-CommonAPIs.html", { loader: () => import(/* webpackChunkName: "17-CommonAPIs.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/17-CommonAPIs.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"\n<h2>1.1 概述</h2>\n<blockquote>\n<p>tips：了解内容</p>\n</blockquote>\n<p>查看API文档，我们可以看到API文档中关于Math类的定义如下：</p>\n<figure><img src=\"https://img.picgo.net/2023/11/06/image-20231106182557021f7531538a3f38105.png\" alt=\"image-20231106182557021\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20231106182557021</figcaption></figure>","r":{"minutes":39.27,"words":11781},"t":"😢 17.常用 API","y":"a"} }],
  ["/rear-end/Java/18-RegularExpressions.html", { loader: () => import(/* webpackChunkName: "18-RegularExpressions.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/18-RegularExpressions.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"\n<h2>1.1 正则表达式的概念及演示</h2>\n<ul>\n<li>在Java中，我们经常需要验证一些字符串，例如：年龄必须是2位的数字、用户名必须是8位长度而且只能包含大小写字母、数字等。正则表达式就是用来验证各种字符串的规则。它内部描述了一些规则，我们可以验证用户输入的字符串是否匹配这个规则。</li>\n<li>先看一个不使用正则表达式验证的例子：下面的程序让用户输入一个QQ号码，我们要验证：\n<ul>\n<li>QQ号码必须是5--15位长度</li>\n<li>而且必须全部是数字</li>\n<li>而且首位不能为0</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>a08regexdemo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RegexDemo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 假如现在要求校验一个qq号码是否正确。\n            规则:6位及20位之内，日不能在开头，必须全部是数字。\n            先使用目前所学知识完成校验需求然后体验一下正则表达式检验。\n        */</span>\n\n        <span class=\"token class-name\">String</span> qq <span class=\"token operator\">=</span><span class=\"token string\">\"1234567890\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkQQ</span><span class=\"token punctuation\">(</span>qq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>qq<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[1-9]\\\\d{5,19}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkQQ</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> qq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//规则:6位及20位之内，日不能在开头，必须全部是数字 。</span>\n        <span class=\"token comment\">//核心思想:</span>\n        <span class=\"token comment\">//先把异常数据进行过滤</span>\n        <span class=\"token comment\">//下面的就是满足要求的数据了。</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> qq<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span> <span class=\"token operator\">||</span> len <span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//0不能在开头</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>qq<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//必须全部是数字</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> qq<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> qq<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">|</span> c <span class=\"token operator\">&gt;</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","r":{"minutes":21.93,"words":6579},"t":"😢 18.正则表达式","y":"a"} }],
  ["/rear-end/Java/19-CommonAPIs(TimePackaging).html", { loader: () => import(/* webpackChunkName: "19-CommonAPIs(TimePackaging).html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/19-CommonAPIs(TimePackaging).html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"\n<h2>1.1 Date概述</h2>\n<p>java.util.Date`类 表示特定的瞬间，精确到毫秒。</p>\n<p>继续查阅Date类的描述，发现Date拥有多个构造函数，只是部分已经过时，我们重点看以下两个构造函数</p>\n<ul>\n<li><code>public Date()</code>：从运行程序的此时此刻到时间原点经历的毫秒值,转换成Date对象，分配Date对象并初始化此对象，以表示分配它的时间（精确到毫秒）。</li>\n<li><code>public Date(long date)</code>：将指定参数的毫秒值date,转换成Date对象，分配Date对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日00:00:00 GMT）以来的指定毫秒数。</li>\n</ul>","r":{"minutes":23.29,"words":6987},"t":"😢 19.常用 API(时间 包装类)","y":"a"} }],
  ["/rear-end/Java/2-JavaBasicGrammar.html", { loader: () => import(/* webpackChunkName: "2-JavaBasicGrammar.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/2-JavaBasicGrammar.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1. 注释</h2>\n<p>​\t注释是对代码的解释和说明文字。</p>\n<p>Java中的注释分为三种：</p>\n<ul>\n<li>单行注释：</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 这是单行注释文字</span>\n</code></pre></div><ul>\n<li>多行注释：</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">/*\n这是多行注释文字\n这是多行注释文字\n这是多行注释文字\n*/</span>\n注意：多行注释不能嵌套使用。\n</code></pre></div>","r":{"minutes":14.52,"words":4356},"t":"😢 2. Java基础语法","y":"a"} }],
  ["/rear-end/Java/20-Algorithm.html", { loader: () => import(/* webpackChunkName: "20-Algorithm.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/20-Algorithm.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"\n<p>​\t数据结构是数据存储的方式，算法是数据计算的方式。所以在开发中，算法和数据结构息息相关。今天的讲义中会涉及部分数据结构的专业名词，如果各位铁粉有疑惑，可以先看一下哥们后面录制的数据结构，再回头看算法。</p>\n<h2>1. 基本查找</h2>\n<p>​\t也叫做顺序查找</p>\n<p>​        说明：顺序查找适合于存储结构为数组或者链表。</p>\n<p><strong>基本思想</strong>：顺序查找也称为线形查找，属于无序查找算法。从数据结构线的一端开始，顺序扫描，依次将遍历到的结点与要查找的值相比较，若相等则表示查找成功；若遍历结束仍没有找到相同的，表示查找失败。</p>","r":{"minutes":19.31,"words":5793},"t":"😢 20.算法","y":"a"} }],
  ["/rear-end/Java/21-Set01.html", { loader: () => import(/* webpackChunkName: "21-Set01.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/21-Set01.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1.Collection集合</h2>\n<h3>1.1数组和集合的区别【理解】</h3>\n<ul>\n<li>\n<p>相同点</p>\n<p>都是容器,可以存储多个数据</p>\n</li>\n<li>\n<p>不同点</p>\n<ul>\n<li>\n<p>数组的长度是不可变的,集合的长度是可变的</p>\n</li>\n<li>\n<p>数组可以存基本数据类型和引用数据类型</p>\n<p>集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3>1.2集合类体系结构【理解】</h3>\n<figure><img src=\"https://img.picgo.net/2023/11/06/01_b2049fb450de998e.png\" alt=\"01_集合类体系结构图\" tabindex=\"0\" loading=\"lazy\"><figcaption>01_集合类体系结构图</figcaption></figure>","r":{"minutes":11.54,"words":3462},"t":"😢 21.集合 01","y":"a"} }],
  ["/rear-end/Java/22-Set02.html", { loader: () => import(/* webpackChunkName: "22-Set02.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/22-Set02.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1.泛型</h2>\n<h3>1.1泛型概述</h3>\n<ul>\n<li>\n<p>泛型的介绍</p>\n<p>​\t泛型是JDK5中引入的特性，它提供了编译时类型安全检测机制</p>\n</li>\n<li>\n<p>泛型的好处</p>\n<ol>\n<li>把运行时期的问题提前到了编译期间</li>\n<li>避免了强制类型转换</li>\n</ol>\n</li>\n<li>\n<p>泛型的定义格式</p>\n<ul>\n<li><code>&lt;类型&gt;: 指定一种类型的格式.尖括号里面可以任意书写,一般只写一个字母.例如: &lt;E&gt; &lt;T&gt;</code></li>\n<li><code>&lt;类型1,类型2…&gt;: 指定多种类型的格式,多种类型之间用逗号隔开.例如: &lt;E,T&gt; &lt;K,V&gt;</code></li>\n</ul>\n</li>\n</ul>","r":{"minutes":10.49,"words":3148},"t":"😢 22.集合 02","y":"a"} }],
  ["/rear-end/Java/23-Set03.html", { loader: () => import(/* webpackChunkName: "23-Set03.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/23-Set03.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1.Map集合</h2>\n<h3>1.1Map集合概述和特点【理解】</h3>\n<ul>\n<li>\n<p>Map集合概述</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span>  <span class=\"token class-name\">K</span>：键的类型；<span class=\"token class-name\">V</span>：值的类型\n</code></pre></div></li>\n<li>\n<p>Map集合的特点</p>\n<ul>\n<li>双列集合,一个键对应一个值</li>\n<li>键不可以重复,值可以重复</li>\n</ul>\n</li>\n<li>\n<p>Map集合的基本使用</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MapDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//创建集合对象</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//V put(K key, V value) 将指定的值与该映射中的指定键相关联</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itheima001\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itheima002\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张曼玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itheima003\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王祖贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itheima003\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"柳岩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//输出集合对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></li>\n</ul>","r":{"minutes":5.55,"words":1665},"t":"😢 23.集合 03","y":"a"} }],
  ["/rear-end/Java/24-ThirdStageSynthesis(LandlordGame).html", { loader: () => import(/* webpackChunkName: "24-ThirdStageSynthesis(LandlordGame).html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/24-ThirdStageSynthesis(LandlordGame).html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"\n<p>在<strong>JDK1.5</strong>之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化.</p>\n<p><strong>格式：</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>修饰符 返回值类型 方法名(参数类型... 形参名){  }\n</code></pre></div><p><strong>底层：</strong></p>\n<p>​\t其实就是一个数组</p>\n<p><strong>好处：</strong></p>","r":{"minutes":10.82,"words":3245},"t":"😢 24.第三阶段综合练习(斗地主游戏)","y":"a"} }],
  ["/rear-end/Java/25-StreamFlowAndMethodReferences.html", { loader: () => import(/* webpackChunkName: "25-StreamFlowAndMethodReferences.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/25-StreamFlowAndMethodReferences.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1.不可变集合</h2>\n<h3>1.1 什么是不可变集合</h3>\n<p>​\t是一个长度不可变，内容也无法修改的集合</p>\n<h3>1.2 使用场景</h3>\n<p>​\t如果某个数据不能被修改，把它防御性地拷贝到不可变集合中是个很好的实践。</p>\n<p>​\t当集合对象被不可信的库调用时，不可变形式是安全的。</p>\n<p>简单理解：</p>\n<p>​\t不想让别人修改集合中的内容</p>\n<p>比如说：</p>\n<p>1，斗地主的54张牌，是不能添加，不能删除，不能修改的</p>\n<p>2，斗地主的打牌规则：单张，对子，三张，顺子等，也是不能修改的</p>\n<p>3，用代码获取的操作系统硬件信息，也是不能被修改的</p>","r":{"minutes":17.31,"words":5194},"t":"😢 25.stream流和方法引用","y":"a"} }],
  ["/rear-end/Java/26-%20IOStream(ByteStream_CharacterStream).html", { loader: () => import(/* webpackChunkName: "26- IOStream(ByteStream_CharacterStream).html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/26- IOStream(ByteStream_CharacterStream).html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"\n<h2>1.1 什么是IO</h2>\n<p>生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了<code>ctrl+s</code> ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。</p>\n<p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> ，即流向内存是输入流，流出内存的输出流。</p>\n<p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p>","r":{"minutes":21.01,"words":6304},"t":"😢 26.IO流（字节流&字符流）","y":"a"} }],
  ["/rear-end/Java/27-IOStream(OtherStreams).html", { loader: () => import(/* webpackChunkName: "27-IOStream(OtherStreams).html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/27-IOStream(OtherStreams).html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"\n<p>昨天学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。</p>\n<h2>1.1 概述</h2>\n<p>缓冲流,也叫高效流，是对4个基本的<code>FileXxx</code> 流的增强，所以也是4个流，按照数据类型分类：</p>\n<ul>\n<li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code></li>\n<li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li>\n</ul>","r":{"minutes":23.67,"words":7101},"t":"😢 27.IO流（其他流）","y":"a"} }],
  ["/rear-end/Java/28-MultiThreading01.html", { loader: () => import(/* webpackChunkName: "28-MultiThreading01.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/28-MultiThreading01.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1.实现多线程</h2>\n<h3>1.1简单了解多线程【理解】</h3>\n<p>是指从软件或者硬件上实现多个线程并发执行的技术。\n具有多线程能力的计算机因有硬件支持而能够在同一时间执行多个线程，提升性能。</p>\n<figure><img src=\"https://img.picgo.net/2023/11/06/image-20231106195204646d111d04393be585f.png\" alt=\"image-20231106195204646\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20231106195204646</figcaption></figure>","r":{"minutes":20.51,"words":6154},"t":"😢 28.多线程01","y":"a"} }],
  ["/rear-end/Java/29-MultiThreading02.html", { loader: () => import(/* webpackChunkName: "29-MultiThreading02.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/29-MultiThreading02.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1. 线程池</h2>\n<h3>1.1 线程状态介绍</h3>\n<p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程</p>\n<p>状态被定义在了java.lang.Thread.State枚举类中，State枚举类的源码如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n    \n        <span class=\"token comment\">/* 新建 */</span>\n        <span class=\"token constant\">NEW</span> <span class=\"token punctuation\">,</span> \n\n        <span class=\"token comment\">/* 可运行状态 */</span>\n        <span class=\"token constant\">RUNNABLE</span> <span class=\"token punctuation\">,</span> \n\n        <span class=\"token comment\">/* 阻塞状态 */</span>\n        <span class=\"token constant\">BLOCKED</span> <span class=\"token punctuation\">,</span> \n\n        <span class=\"token comment\">/* 无限等待状态 */</span>\n        <span class=\"token constant\">WAITING</span> <span class=\"token punctuation\">,</span> \n\n        <span class=\"token comment\">/* 计时等待 */</span>\n        <span class=\"token constant\">TIMED_WAITING</span> <span class=\"token punctuation\">,</span> \n\n        <span class=\"token comment\">/* 终止 */</span>\n        <span class=\"token constant\">TERMINATED</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 获取当前线程的状态</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">State</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> jdk<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span><span class=\"token constant\">VM</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThreadState</span><span class=\"token punctuation\">(</span>threadStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre></div>","r":{"minutes":34.08,"words":10223},"t":"😢 29.多线程02","y":"a"} }],
  ["/rear-end/Java/3-Operator.html", { loader: () => import(/* webpackChunkName: "3-Operator.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/3-Operator.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1.运算符和表达式</h2>\n<h3>1.1 运算符：</h3>\n<p>​\t就是对常量或者变量进行操作的符号。</p>\n<p>​\t比如： +  -  *  /</p>\n<h3>1.2 表达式：</h3>\n<p>​\t用运算符把常量或者变量连接起来的，符合Java语法的式子就是表达式。</p>\n<p>​\t比如：a + b 这个整体就是表达式。</p>\n<p>​\t而其中+是算术运算符的一种，所以这个表达式也称之为算术表达式。</p>\n<h2>2.算术运算符</h2>\n<p>分类：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token operator\">+</span> <span class=\"token operator\">-</span> <span class=\"token operator\">*</span> <span class=\"token operator\">/</span> <span class=\"token operator\">%</span>\n</code></pre></div>","r":{"minutes":14.79,"words":4436},"t":"😢 3. Java运算符","y":"a"} }],
  ["/rear-end/Java/30-NetworkProgramming.html", { loader: () => import(/* webpackChunkName: "30-NetworkProgramming.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/30-NetworkProgramming.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1. 网络编程入门</h2>\n<h3>1.1 网络编程概述</h3>\n<ul>\n<li>\n<p>计算机网络</p>\n<p>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</p>\n</li>\n<li>\n<p>网络编程</p>\n<p>在网络通信协议下，不同计算机上运行的程序，可以进行数据传输</p>\n</li>\n</ul>\n<h3>1.2 网络编程三要素</h3>\n<ul>\n<li>\n<p>IP地址</p>\n<p>要想让网络中的计算机能够互相通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接收数据的计算机和识别发送的计算机，而IP地址就是这个标识号。也就是设备的标识</p>\n</li>\n<li>\n<p>端口</p>\n<p>网络的通信，本质上是两个应用程序的通信。每台计算机都有很多的应用程序，那么在网络通信时，如何区分这些应用程序呢？如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的应用程序了。也就是应用程序的标识</p>\n</li>\n<li>\n<p>协议</p>\n<p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有UDP协议和TCP协议</p>\n</li>\n</ul>","r":{"minutes":13.43,"words":4030},"t":"😢 30.网络编程","y":"a"} }],
  ["/rear-end/Java/31-ReflectionDynamicProxy.html", { loader: () => import(/* webpackChunkName: "31-ReflectionDynamicProxy.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/31-ReflectionDynamicProxy.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"\n<h2>1.1 反射的概述：</h2>\n<p>​\t<strong>专业的解释（了解一下）：</strong></p>\n<p>​       是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；</p>\n<p>​       对于任意一个对象，都能够调用它的任意属性和方法；</p>\n<p>​       这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</p>\n<p>​\t<strong>通俗的理解：（掌握）</strong></p>\n<ul>\n<li>\n<p>利用<strong>反射</strong>创建的对象<strong>可以无视修饰符</strong>调用类里面的内容</p>\n</li>\n<li>\n<p>可以跟<strong>配置文件结合起来使用</strong>，把要创建的对象信息和方法写在配置文件中。</p>\n<p>读取到什么类，就创建什么类的对象</p>\n<p>读取到什么方法，就调用什么方法</p>\n<p>此时当需求变更的时候不需要修改代码，只要修改配置文件即可。</p>\n</li>\n</ul>","r":{"minutes":19.2,"words":5760},"t":"😢 31.反射动态代理","y":"a"} }],
  ["/rear-end/Java/32-IO(Exception_File_ComprehensiveCase).html", { loader: () => import(/* webpackChunkName: "32-IO(Exception_File_ComprehensiveCase).html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/32-IO(Exception_File_ComprehensiveCase).html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"\n<h2>1.1 异常概念</h2>\n<p>异常，就是不正常的意思。在生活中:医生说,你的身体某个部位有异常,该部位和正常相比有点不同,该部位的功能将受影响.在程序中的意思就是：</p>\n<ul>\n<li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。</li>\n</ul>\n<p>在Java等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。Java处理异常的方式是中断处理。</p>\n<blockquote>\n<p>异常指的并不是语法错误,语法错了,编译不通过,不会产生字节码文件,根本不能运行.</p>\n</blockquote>","r":{"minutes":21.29,"words":6387},"t":"😢 32.IO(异常&File&综合案例）","y":"a"} }],
  ["/rear-end/Java/4-FlowControlStatement.html", { loader: () => import(/* webpackChunkName: "4-FlowControlStatement.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/4-FlowControlStatement.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1. 流程控制语句</h2>\n<p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。</p>\n<h3>1.1 流程控制语句分类</h3>\n<p>​\t顺序结构</p>\n<p>​\t判断和选择结构(if, switch)</p>\n<p>​\t循环结构(for, while, do…while)</p>\n<h3>1.2 顺序结构</h3>\n<p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p>\n","r":{"minutes":12.5,"words":3749},"t":"😢 4.流程控制语句","y":"a"} }],
  ["/rear-end/Java/5-Array.html", { loader: () => import(/* webpackChunkName: "5-Array.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/5-Array.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1.数组</h2>\n<h3>1.1 概念：</h3>\n<p>​\t指的是一种容器，可以同来存储同种数据类型的多个值。</p>\n<p>​\t但是数组容器在存储数据的时候，需要结合隐式转换考虑。</p>\n<p>比如：</p>\n<p>​\t定义了一个int类型的数组。那么boolean。double类型的数据是不能存到这个数组中的，</p>\n<p>​\t但是byte类型，short类型，int类型的数据是可以存到这个数组里面的。</p>\n<p>建议：</p>\n<p>​\t容器的类，和存储的数据类型保持一致。</p>\n<p>举例：</p>\n<p>​\t整数1 2 3 4 56 就可以使用int类型的数组来存储。</p>","r":{"minutes":11.45,"words":3435},"t":"😢 5.数组","y":"a"} }],
  ["/rear-end/Java/6-Function.html", { loader: () => import(/* webpackChunkName: "6-Function.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/6-Function.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1. 方法概述</h2>\n<h3>1.1 方法的概念</h3>\n<p>​\t方法（method）是程序中最小的执行单元</p>\n<ul>\n<li>注意：\n<ul>\n<li>方法必须先创建才可以使用，该过程成为方法定义</li>\n<li>方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用</li>\n</ul>\n</li>\n</ul>\n<h2>2. 方法的定义和调用</h2>\n<h3>2.1 无参数方法定义和调用</h3>\n<ul>\n<li>\n<p>定义格式：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> 方法名 <span class=\"token punctuation\">(</span>   <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 方法体;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></li>\n<li>\n<p>范例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> method <span class=\"token punctuation\">(</span>    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 方法体;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></li>\n<li>\n<p>调用格式：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>方法名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div></li>\n<li>\n<p>范例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div></li>\n<li>\n<p>注意：</p>\n<p>​\t方法必须先定义，后调用，否则程序将报错</p>\n</li>\n</ul>","r":{"minutes":12.38,"words":3714},"t":"😢 6.方法","y":"a"} }],
  ["/rear-end/Java/7-Phase-1-ComprehensiveExercise.html", { loader: () => import(/* webpackChunkName: "7-Phase-1-ComprehensiveExercise.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/7-Phase-1-ComprehensiveExercise.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>练习一：飞机票</h2>\n<p>需求:</p>\n<p>​\t机票价格按照淡季旺季、头等舱和经济舱收费、输入机票原价、月份和头等舱或经济舱。</p>\n<p>​\t按照如下规则计算机票价格：旺季（5-10月）头等舱9折，经济舱8.5折，淡季（11月到来年4月）头等舱7折，经济舱6.5折。</p>\n<p>代码示例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 机票价格按照淡季旺季、头等舱和经济舱收费、输入机票原价、月份和头等舱或经济舱。\n        按照如下规则计算机票价格：旺季（5-10月）头等舱9折，经济舱8.5折，淡季（11月到来年4月）头等舱7折，经济舱6.5折。*/</span>\n\n        <span class=\"token comment\">//分析：</span>\n        <span class=\"token comment\">//1.键盘录入机票原价、月份、头等舱或经济舱</span>\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入机票的原价\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ticket <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入当前的月份\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入当前购买的舱位 0 头等舱 1 经济舱\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> seat <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.先判断月份是旺季还是淡季</span>\n        <span class=\"token comment\">//ctrl + alt + M 自动抽取方法</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>month <span class=\"token operator\">&gt;=</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> month <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//旺季 //3.继续判断当前机票是经济舱还是头等舱</span>\n            <span class=\"token comment\">//ticket = getPrice(ticket, seat, 0.9, 0.85);</span>\n            ticket <span class=\"token operator\">=</span> <span class=\"token function\">getTicket</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">,</span> seat<span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.85</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>month <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> month <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>month <span class=\"token operator\">&gt;=</span> <span class=\"token number\">11</span> <span class=\"token operator\">&amp;&amp;</span> month <span class=\"token operator\">&lt;=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//淡季</span>\n            <span class=\"token comment\">//ticket = getPrice(ticket, seat, 0.7, 0.65);</span>\n            ticket <span class=\"token operator\">=</span> <span class=\"token function\">getTicket</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">,</span> seat<span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.65</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//表示键盘录入的月份是一个非法数据</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键盘录入的月份不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getTicket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ticket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> seat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seat <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//头等舱</span>\n            ticket <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ticket <span class=\"token operator\">*</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seat <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//经济舱</span>\n            ticket <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ticket <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有这个舱位\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ticket<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//1.我要干嘛？根据舱位和折扣来计算最终的票价</span>\n    <span class=\"token comment\">//2.我干这件事，需要什么才能完成？原价 舱位 头等舱的折扣 经济舱的折扣</span>\n    <span class=\"token comment\">//3.方法的调用处是否需要继续使用这个结果  需要</span>\n    <span class=\"token comment\">/*  public static int getPrice(int ticket, int seat, double v0, double v1) {\n        if (seat == 0) {\n            //头等舱\n            ticket = (int) (ticket * v0);\n        } else if (seat == 1) {\n            //经济舱\n            ticket = (int) (ticket * v1);\n        } else {\n            System.out.println(\"没有这个舱位\");\n        }\n        return ticket;\n    }*/</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","r":{"minutes":14.13,"words":4240},"t":"😢 7.第一阶段综合练习","y":"a"} }],
  ["/rear-end/Java/8-ObjectOriented.html", { loader: () => import(/* webpackChunkName: "8-ObjectOriented.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/8-ObjectOriented.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>1. 类和对象</h2>\n<h3>1.1 类和对象的理解</h3>\n<p>客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。</p>\n<ul>\n<li>类\n<ul>\n<li>类的理解\n<ul>\n<li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li>\n<li>类是对象的数据类型，类是具有相同属性和行为的一组对象的集合</li>\n<li>简单理解：类就是对现实事物的一种描述</li>\n</ul>\n</li>\n<li>类的组成\n<ul>\n<li>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li>\n<li>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>类和对象的关系\n<ul>\n<li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li>\n<li>对象：是能够看得到摸的着的真实存在的实体</li>\n<li>简单理解：<strong>类是对事物的一种描述，对象则为具体存在的事物</strong></li>\n</ul>\n</li>\n</ul>","r":{"minutes":9.61,"words":2883},"t":"😢 8.面向对象","y":"a"} }],
  ["/rear-end/Java/9-Phase-2-ObjectOrientedPractice.html", { loader: () => import(/* webpackChunkName: "9-Phase-2-ObjectOrientedPractice.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/9-Phase-2-ObjectOrientedPractice.html.js"), meta: {"d":1699277014000,"g":["Java"],"e":"<h2>练习一：文字版格斗游戏</h2>\n<p>需求:</p>\n<p>​\t格斗游戏，每个游戏角色的姓名，血量，都不相同，在选定人物的时候（new对象的时候），这些信息就应该被确定下来。</p>\n<p>举例：</p>\n<p>​\t程序运行之后结果为：</p>\n<p>​\t姓名为:乔峰\t\t血量为:100</p>\n<p>​\t姓名为:鸠摩智\t血量为:100</p>\n<p>​\t乔峰举起拳头打了鸠摩智一下，造成了XX点伤害，鸠摩智还剩下XXX点血。</p>\n<p>​\t鸠摩智举起拳头打了鸠摩智一下，造成了XX点伤害，乔峰还剩下XXX点血。</p>\n<p>​\t乔峰举起拳头打了鸠摩智一下，造成了XX点伤害，鸠摩智还剩下XXX点血。</p>","r":{"minutes":17.9,"words":5370},"t":"😢 9.面向对象练习","y":"a"} }],
  ["/rear-end/Java/JavaSummarize.html", { loader: () => import(/* webpackChunkName: "JavaSummarize.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/JavaSummarize.html.js"), meta: {"d":1699687893000,"g":["Java"],"u":true,"e":"<h2>1. Java 的三大平台</h2>\n<p>​\tJavaSE、JavaME、JavaEE</p>\n<p>​\tJavaSE、JavaME、JavaEE</p>\n<h3>1.1 JavaSE</h3>\n<p>​\t是其他两个版本的基础。</p>\n<h3>1.2 JavaME</h3>\n<p>​\tJava语言的小型版，用于嵌入式消费类电子设备或者小型移动设备的开发。</p>\n<p>​\t其中最为主要的还是小型移动设备的开发（手机）。渐渐的没落了，已经被安卓和IOS给替代了。</p>\n<p>​\t但是，安卓也是可以用Java来开发的。</p>\n<h3>1.3 JavaEE</h3>\n<p>​\t用于Web方向的网站开发。（主要从事后台服务器的开发）</p>","r":{"minutes":71.33,"words":21400},"t":"😢 Java 总结","y":"a"} }],
  ["/rear-end/JavaWeb/1-Maven.html", { loader: () => import(/* webpackChunkName: "1-Maven.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/1-Maven.html.js"), meta: {"d":1700316244000,"g":["Maven","JavaWeb"],"e":"<h2>1. 初识 Maven</h2>\n<blockquote>\n<p>🤔网站:</p>\n<p>Maven 官网:https://maven.apache.org/</p>\n<p>Maven 仓库https://mvnrepository.com/</p>\n</blockquote>\n<h3>1.1 什么是 Maven</h3>\n<p>Maven是Apache旗下的一个开源项目，是一款用于管理和构建java项目的工具。</p>\n<p>官网:https://maven.apache.org/</p>\n<h3>1.2 Maven的作用</h3>\n<p>使用Maven能够做什么呢？</p>\n<ol>\n<li>依赖管理</li>\n<li>统一项目结构</li>\n<li>项目构建</li>\n</ol>","r":{"minutes":17.97,"words":5390},"t":"😤 1.Maven","y":"a"} }],
  ["/rear-end/JavaWeb/10-mybatis-plus.html", { loader: () => import(/* webpackChunkName: "10-mybatis-plus.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/10-mybatis-plus.html.js"), meta: {"d":1700561461000,"g":["SpringBoot","JavaWeb","Mybatis-plus"],"e":"<h2>1. 入门</h2>\n<h3>1.1 引入MybatisPlus的起步依赖</h3>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code><span class=\"token comment\">&lt;!--MybatisPlus--&gt;</span>\u000b<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\u000b    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\u000b    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\u000b    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.5.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\u000b<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n</code></pre></div>","r":{"minutes":3.38,"words":1013},"t":"😤 10.Mybatis-plus","y":"a"} }],
  ["/rear-end/JavaWeb/11-redis.html", { loader: () => import(/* webpackChunkName: "11-redis.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/11-redis.html.js"), meta: {"d":1700743533000,"g":["SpringBoot","JavaWeb","Redis"],"e":"<h2>Redis 的安装</h2>\n<p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> gcc tcl\n</code></pre></div><p>官网下载:https://redis.io/download/</p>","r":{"minutes":14.83,"words":4448},"t":"😤 11.Redis","y":"a"} }],
  ["/rear-end/JavaWeb/12-Spring.html", { loader: () => import(/* webpackChunkName: "12-Spring.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/12-Spring.html.js"), meta: {"d":1700743533000,"g":["SpringBoot","JavaWeb","Spring"],"e":"<h2>SpringMvc的基本概念</h2>\n<p>SpringMVC是隶属于Spring框架的一部分，主要是用来进行Web开发，是对Servlet进行了封装。</p>\n<p>SpringMVC是处于Web层的框架，所以其主要的作用就是用来接收前端发过来的请求和数据然后经过处理并将处理的结果响应给前端，所以如何处理请求和响应是SpringMVC中非常重要的一块内容。</p>\n<h3>定义</h3>\n<ul>\n<li>\n<p>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</p>\n</li>\n<li>\n<p>优点</p>\n<ul>\n<li>使用简单、开发便捷(相比于Servlet)</li>\n<li>灵活性强</li>\n</ul>\n<p>这里所说的优点，就需要我们在使用的过程中慢慢体会。</p>\n</li>\n</ul>","r":{"minutes":5.21,"words":1562},"t":"😤 12.Spring","y":"a"} }],
  ["/rear-end/JavaWeb/2-SpringBootBasis.html", { loader: () => import(/* webpackChunkName: "2-SpringBootBasis.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/2-SpringBootBasis.html.js"), meta: {"d":1700316244000,"g":["SpringBoot","JavaWeb"],"e":"<blockquote>\n<p>😉网站</p>\n<p>Spring官网:https://spring.io</p>\n</blockquote>\n<figure><img src=\"https://img.picgo.net/2023/11/17/Image-From-day04-SpringBootWeb3f4d3174641f5cbc.png\" alt=\"Image From day04-SpringBootWeb入门\" tabindex=\"0\" loading=\"lazy\"><figcaption>Image From day04-SpringBootWeb入门</figcaption></figure>","r":{"minutes":7.58,"words":2275},"t":"😤 2.SpringBoot基础","y":"a"} }],
  ["/rear-end/JavaWeb/3-SpringBootWebRequestResponse.html", { loader: () => import(/* webpackChunkName: "3-SpringBootWebRequestResponse.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/3-SpringBootWebRequestResponse.html.js"), meta: {"d":1700316244000,"g":["SpringBoot","JavaWeb"],"e":"<blockquote>\n<p>@RestController</p>\n<p>@RequestMapping(\"/simpleParam\")</p>\n<p>@RequestParam(\"name\")</p>\n<p>​\t@RequestParam(name = \"name\", required =false,defaultValue = \"1\") String username</p>\n<p>@DateTimeFormat(pattern = \"yyyy-MM-dd-HH:mm:ss\") LocalDateTime updateTime</p>\n<p>@RequestBody</p>\n<p>@PathVariable Integer id</p>\n</blockquote>","r":{"minutes":9.92,"words":2975},"t":"😤 3.SpringBootWeb 请求响应","y":"a"} }],
  ["/rear-end/JavaWeb/4-MybatisIntroduction.html", { loader: () => import(/* webpackChunkName: "4-MybatisIntroduction.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/4-MybatisIntroduction.html.js"), meta: {"d":1700316244000,"g":["SpringBoot","JavaWeb","Mybatis"],"e":"<blockquote>\n<p>官网：https://mybatis.org/mybatis-3/zh/index.html</p>\n</blockquote>\n<h2>1. 快速入门</h2>\n<p>什么是MyBatis?</p>\n<ul>\n<li>\n<p>MyBatis是一款优秀的 <strong>持久层 框架</strong>，用于简化JDBC的开发。</p>\n</li>\n<li>\n<p>MyBatis本是 Apache的一个开源项目iBatis，2010年这个项目由apache迁移到了google</p>\n</li>\n<li>\n<p>code，并且改名为MyBatis 。2013年11月迁移到Github。</p>\n</li>\n<li>\n<p>官网：<strong>https://mybatis.org/mybatis-3/zh/index.html</strong></p>\n</li>\n</ul>","r":{"minutes":2.85,"words":856},"t":"😤 4.Mybatis 入门","y":"a"} }],
  ["/rear-end/JavaWeb/5-MybatisUse.html", { loader: () => import(/* webpackChunkName: "5-MybatisUse.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/5-MybatisUse.html.js"), meta: {"d":1700316244000,"g":["SpringBoot","JavaWeb","Mybatis"],"e":"<h2>1. 使用案例</h2>\n<h3>1. 接收简单参数</h3>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Mapper</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EmpMapper</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 删除语句</span>\n  <span class=\"token annotation punctuation\">@Delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from emp where id = #{id}\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//使用#{key}方式获取方法中的参数值</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","r":{"minutes":6.75,"words":2025},"t":"😤 5.Mybatis 使用","y":"a"} }],
  ["/rear-end/JavaWeb/6-JWT.html", { loader: () => import(/* webpackChunkName: "6-JWT.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/6-JWT.html.js"), meta: {"d":1700316244000,"g":["SpringBoot","JavaWeb","JWT"],"e":"<blockquote>\n<p>官网：<strong>https://jwt.io/</strong></p>\n</blockquote>\n<h2>1. JWT</h2>\n<h3>1. 1 介绍</h3>\n<ul>\n<li>定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</li>\n</ul>\n<p>JWT的组成： （JWT令牌由三个部分组成，三个部分之间使用英文的点来分割）</p>\n<ul>\n<li>\n<p>第一部分：Header(头）， 记录令牌类型、签名算法等。 例如：</p>\n<ul>\n<li alg:hs256,type:jwt=\"\"></li>\n</ul>\n</li>\n<li>\n<p>第二部分：Payload(有效载荷），携带一些自定义信息、默认信息等。 例如：</p>\n<ul>\n<li id:1,username:tom=\"\"></li>\n</ul>\n</li>\n<li>\n<p>第三部分：Signature(签名），防止Token被篡改、确保安全性。将header、payload，并加入指定秘钥，通过指定签名算法计算而来。</p>\n</li>\n</ul>","r":{"minutes":9.98,"words":2995},"t":"😤 6.JWT-springboot","y":"a"} }],
  ["/rear-end/JavaWeb/7-AOP.html", { loader: () => import(/* webpackChunkName: "7-AOP.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/7-AOP.html.js"), meta: {"d":1700316244000,"g":["SpringBoot","JavaWeb"],"e":"<h2>1. 事务管理</h2>\n<p>事务的操作主要有三步：</p>\n<ol>\n<li>\n<p>开启事务（一组操作开始前，开启事务）：start transaction / begin ;</p>\n</li>\n<li>\n<p>提交事务（这组操作全部成功后，提交事务）：commit ;</p>\n</li>\n<li>\n<p>回滚事务（中间任何一个操作出现异常，回滚事务）：rollback ;</p>\n</li>\n</ol>\n<h3>1.1 <strong>Spring</strong>事务管理</h3>\n<h4><strong>Transactional</strong>注解</h4>\n<blockquote>\n<p>@Transactional作用：就是在当前这个方法执行开始之前来开启事务，方法执行完毕之后提交事务。如果在这个方法执行的过程当中出现了异常，就会进行事务的回滚操作。</p>\n<p>@Transactional注解：我们一般会在业务层当中来控制事务，因为在业务层当中，一个业务功能可能会包含多个数据访问的操作。在业务层来控制事务，我们就可以将多个数据访问操作控制在一个事务范围内。</p>\n</blockquote>","r":{"minutes":8.87,"words":2661},"t":"😤 7.springboot-AOP","y":"a"} }],
  ["/rear-end/JavaWeb/8-Swagger.html", { loader: () => import(/* webpackChunkName: "8-Swagger.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/8-Swagger.html.js"), meta: {"d":1700480355000,"g":["SpringBoot","JavaWeb","Swagger"],"e":"<h2>快速入门的使用</h2>\n<blockquote>\n<p>文档的地址是service 根路径 swagger-ui.html</p>\n</blockquote>\n<h3>依赖的引入</h3>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>io.springfox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>springfox-swagger-ui<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.9.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>io.springfox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>springfox-swagger2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.9.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>","r":{"minutes":1.95,"words":584},"t":"😤 8. Swagger的使用","y":"a"} }],
  ["/rear-end/JavaWeb/9-cross-domain.html", { loader: () => import(/* webpackChunkName: "9-cross-domain.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/9-cross-domain.html.js"), meta: {"d":1700480355000,"g":["SpringBoot","JavaWeb"],"e":"<h2>NGINX 配置</h2>\n<blockquote>\n<p>让服务器告诉浏览器：允许跨域（返回 cross-origin-allow 响应头）</p>\n</blockquote>\n<div class=\"language-nginx\" data-ext=\"nginx\" data-title=\"nginx\"><pre class=\"language-nginx\"><code><span class=\"token directive\"><span class=\"token keyword\">location</span> ^~ /api/</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://127.0.0.1:8080/api/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Allow-Origin'</span> <span class=\"token variable\">$http_origin</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Allow-Credentials'</span> <span class=\"token string\">'true'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Methods <span class=\"token string\">'GET, POST, OPTIONS'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Headers <span class=\"token string\">'*'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">if</span> (<span class=\"token variable\">$request_method</span> = <span class=\"token string\">'OPTIONS'</span>)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Allow-Credentials'</span> <span class=\"token string\">'true'</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Allow-Origin'</span> <span class=\"token variable\">$http_origin</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Allow-Methods'</span> <span class=\"token string\">'GET, POST, OPTIONS'</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Allow-Headers'</span> <span class=\"token string\">'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Max-Age'</span> <span class=\"token number\">1728000</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Content-Type'</span> <span class=\"token string\">'text/plain; charset=utf-8'</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Content-Length'</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">return</span> <span class=\"token number\">204</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","r":{"minutes":0.9,"words":270},"t":"😤 9.跨域解决","y":"a"} }],
  ["/rear-end/JavaWeb/Collection.html", { loader: () => import(/* webpackChunkName: "Collection.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/Collection.html.js"), meta: {"d":1700316244000,"g":["SpringBoot","JavaWeb"],"u":98,"e":"<h2>1. 配置</h2>\n<div class=\"language-properties\" data-ext=\"properties\" data-title=\"properties\"><pre class=\"language-properties\"><code><span class=\"token comment\">#环境变量</span>\n<span class=\"token key attr-name\">springprofiles.active</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">dev</span>\n\n\n<span class=\"token comment\">#mysql</span>\n\n<span class=\"token comment\">#驱动类名称</span>\n<span class=\"token key attr-name\">spring.datasource.driver-class-name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token comment\">#数据库连接的url</span>\n<span class=\"token key attr-name\">spring.datasource.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://localhost:3306/mybatis</span>\n<span class=\"token comment\">#连接数据库的用户名</span>\n<span class=\"token key attr-name\">spring.datasource.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span>\n<span class=\"token comment\">#连接数据库的密码</span>\n<span class=\"token key attr-name\">spring.datasource.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1234</span>\n\n\n<span class=\"token comment\">#mybatis</span>\n\n<span class=\"token comment\">#指定mybatis输出日志的位置, 输出控制台</span>\n<span class=\"token key attr-name\">mybatis.configuration.log-impl</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.ibatis.logging.stdout.StdOutImpl</span>\n<span class=\"token comment\"># 开启 mybatis 的驼峰命名</span>\n<span class=\"token key attr-name\">mybatis.configuration.map-underscore-to-camel-case</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span>\n\n<span class=\"token comment\">#mybatis-plus</span>\n\n\n\n<span class=\"token comment\">#配置单个文件最大上传大小</span>\n<span class=\"token key attr-name\">spring.servlet.multipart.max-file-size</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10MB</span>\n<span class=\"token comment\">#配置单个请求最大上传大小(一次请求可以上传多个文件)</span>\n<span class=\"token key attr-name\">spring.servlet.multipart.max-request-size</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">100MB</span>\n</code></pre></div>","r":{"minutes":1.1,"words":331},"t":"😤 Javaweb 收集","y":"a"} }],
  ["/web/common/antiVibrationThrottling.html", { loader: () => import(/* webpackChunkName: "antiVibrationThrottling.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/common/antiVibrationThrottling.html.js"), meta: {"d":1708067721000,"e":"<h2>防抖</h2>\n<blockquote>\n<p>在一定的时间内触发一次\n<a href=\"/web/Javascript/Arguments\">额外知识点类数组对象</a> arguments</p>\n</blockquote>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fun<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> arguments\n        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token function\">fun</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>delay<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","r":{"minutes":0.32,"words":96},"t":"Javascript 防抖和节流","y":"a"} }],
  ["/web/common/Array.html", { loader: () => import(/* webpackChunkName: "Array.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/common/Array.html.js"), meta: {"d":1699094106000,"g":["Array","算法"],"e":"\n<h2>Reduce</h2>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span>currentIndex<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// accumulator:累加器 就是上一次 return 的值,初始值,第二个参数为空的时候就是数组的第一个值</span>\n    <span class=\"token comment\">// currentValue:当前值</span>\n    <span class=\"token comment\">// currentIndex:当前索引</span>\n    <span class=\"token comment\">// array:数组</span>\n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span>\n</code></pre></div>","r":{"minutes":1.81,"words":543},"t":"数组的相关算法","y":"a"} }],
  ["/web/common/designPattern.html", { loader: () => import(/* webpackChunkName: "designPattern.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/common/designPattern.html.js"), meta: {"d":1708508734000,"g":["设计模式","前端"],"e":"<h2>1. 构造器模式</h2>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age\n  \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">say</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> employee1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span>\n</code></pre></div>","r":{"minutes":3.47,"words":1042},"t":"🕹️ 19 种设计模式","y":"a"} }],
  ["/web/common/WaterfallFlow.html", { loader: () => import(/* webpackChunkName: "WaterfallFlow.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/common/WaterfallFlow.html.js"), meta: {"d":1699094106000,"g":["算法"],"e":"<blockquote>\n<p>HTML 代码</p>\n</blockquote>\n<details>\n<summary>点击展开代码</summary>\n<div class=\"language-vue\" data-ext=\"vue\" data-title=\"vue\"><pre class=\"language-vue\"><code>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wf-item<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(image,index) in images<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span>  <span class=\"token attr-name\">:src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wf-img<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index.toString()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div></details>","r":{"minutes":1.35,"words":404},"t":"🤔 瀑布流","y":"a"} }],
  ["/web/componentPackaging/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/componentPackaging/index.html.js"), meta: {"d":1699094106000,"g":["前端","rollup","SDK"],"e":"<h2>项目初始化</h2>\n<p>创建文件rollup.config.js</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>npm init <span class=\"token operator\">-</span>y\ntsc <span class=\"token operator\">--</span>init\n\n\nnpm install rollup <span class=\"token operator\">-</span><span class=\"token constant\">D</span>\nnpm install rollup<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>dts <span class=\"token operator\">-</span><span class=\"token constant\">D</span>\nnpm install rollup<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>typescript2 <span class=\"token operator\">-</span><span class=\"token constant\">D</span>\nnpm install typescript <span class=\"token operator\">-</span><span class=\"token constant\">D</span>\n</code></pre></div>","r":{"minutes":0.46,"words":139},"t":"🎃 组件 | SDK 封装","y":"a"} }],
  ["/web/componentPackaging/npm-packages.html", { loader: () => import(/* webpackChunkName: "npm-packages.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/componentPackaging/npm-packages.html.js"), meta: {"d":1699094106000,"g":["前端","rollup","SDK"],"e":"\n<h2>UI Component</h2>\n<p><a href=\"https://www.npmjs.com/package/what-tools-react-drop-upload\" target=\"_blank\" rel=\"noopener noreferrer\">what-tools-react-drop-upload</a></p>\n<h2>Logic</h2>\n","r":{"minutes":0.16,"words":48},"t":"📸 个人发布的 npm 包管理文档","y":"a"} }],
  ["/web/componentPackaging/rollup.html", { loader: () => import(/* webpackChunkName: "rollup.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/componentPackaging/rollup.html.js"), meta: {"d":1699094106000,"g":["前端","rollup"],"e":"\n<h2>初始化</h2>\n<h3>依赖安装</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>yarn init <span class=\"token operator\">-</span>y\nyarn add rollup\n</code></pre></div><h3>配置文件</h3>\n<p><code>rollup.config.js</code></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">export</span>  <span class=\"token keyword\">default</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">input</span> <span class=\"token operator\">:</span><span class=\"token string\">\"src/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">file</span><span class=\"token operator\">:</span><span class=\"token string\">\"dist/bundle.js\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">format</span><span class=\"token operator\">:</span><span class=\"token string\">\"iife\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>","r":{"minutes":1.34,"words":401},"t":"🎃 rollup 快速上手","y":"a"} }],
  ["/web/css/grid.html", { loader: () => import(/* webpackChunkName: "grid.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/css/grid.html.js"), meta: {"d":1699094106000,"g":["CSS"],"e":"<h2>父级</h2>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*grid-template-columns: 1fr 1fr 1fr;*/</span>  <span class=\"token comment\">/*设置列 4 列,每一列的宽度等均分配*/</span>\n    <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>auto-fill<span class=\"token punctuation\">,</span><span class=\"token function\">minmax</span><span class=\"token punctuation\">(</span>260px<span class=\"token punctuation\">,</span>1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/*设置列 自动计算个数,每一列的宽度最小值和最大值*/</span>\n    <span class=\"token property\">gap</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/*设置四周的间隙 */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","r":{"minutes":0.31,"words":92},"t":"🥴 Grid 布局","y":"a"} }],
  ["/web/Echarts/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/Echarts/index.html.js"), meta: {"d":1699094106000,"g":["前端","Echarts"],"e":"<figure><img src=\"https://echarts.apache.org/zh/images/logo.png?_v_=20200710_1\" alt=\"echart.png\" tabindex=\"0\" loading=\"lazy\"><figcaption>echart.png</figcaption></figure>\n<p><a href=\"https://echarts.apache.org/handbook/en/get-started\" target=\"_blank\" rel=\"noopener noreferrer\">Echarts官网地址</a></p>\n<h1>Get Start</h1>","r":{"minutes":6.98,"words":2095},"t":"🔨 Echarts 基本教程","y":"a"} }],
  ["/web/FFmpeg/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/FFmpeg/index.html.js"), meta: {"d":1699094106000,"g":["React","ffmpeg","video","前端"],"e":"<p>基于React项目使用</p>\n<h1><strong>安装ffmpeg.wasm</strong></h1>\n<div class=\"language-Shell\" data-ext=\"Shell\" data-title=\"Shell\"><pre class=\"language-Shell\"><code>$ npm install @ffmpeg/ffmpeg\n# or\n$ yarn add @ffmpeg/ffmpeg\n</code></pre></div><p>要在 node 环境中使用 ffmpeg.wasm，还需要安装</p>\n<div class=\"language-Shell\" data-ext=\"Shell\" data-title=\"Shell\"><pre class=\"language-Shell\"><code>$ npm install @ffmpeg/core\n# or\n$ yarn add @ffmpeg/core\n</code></pre></div>","r":{"minutes":8.15,"words":2445},"t":"😤 ffmpeg 基本入门教程","y":"a"} }],
  ["/web/Javascript/apply-bind-call.html", { loader: () => import(/* webpackChunkName: "apply-bind-call.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/Javascript/apply-bind-call.html.js"), meta: {"d":1708508734000,"g":["Javascript"],"e":"<h2>1. <code>apply</code> 方法</h2>\n<blockquote>\n<p><code>apply</code> 方法允许你调用一个函数，并指定函数内部的 <code>this</code> 值和一个参数数组（或类数组对象）作为参数。语法如下：</p>\n</blockquote>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">functionName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 函数体</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">functionName</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>thisValue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","r":{"minutes":0.85,"words":254},"t":"apply bind call","y":"a"} }],
  ["/web/Javascript/Arguments.html", { loader: () => import(/* webpackChunkName: "Arguments.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/Javascript/Arguments.html.js"), meta: {"d":1708067721000,"e":"<h2>Arguments 类数组对象</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments\" target=\"_blank\" rel=\"noopener noreferrer\">MDN 链接</a></p>\n<h3>Demo</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>\n<span class=\"token keyword\">function</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Expected output: 1</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Expected output: 2</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Expected output: 3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre></div>","r":{"minutes":0.17,"words":51},"t":"Arguments 类数组对象","y":"a"} }],
  ["/web/harmony/1-projectEngineeringStructure.html", { loader: () => import(/* webpackChunkName: "1-projectEngineeringStructure.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/harmony/1-projectEngineeringStructure.html.js"), meta: {"d":1709454909000,"g":["harmony"],"e":"<h2>Stage 模型下的工程结构</h2>\n<h3>宏观</h3>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>├── AppScope\n│   ├── app.json5  <span class=\"token comment\"># 应用的全局配置信息</span>\n│   └── resources <span class=\"token comment\"># 全局的配置的资源</span>\n│       └── base\n│           ├── element\n│           │   └── string.json\n│           └── media\n│               └── app_icon.png\n├── build-profile.json5 <span class=\"token comment\"># 应用级配置信息 包括签名 产品配置</span>\n├── entry <span class=\"token comment\"># 应用/服务模块 编译构建生成一个HAP</span>\n│   ├── build-profile.json5 <span class=\"token comment\"># 当前的模版信息 编译信息配置项</span>\n│   ├── hvigorfile.ts <span class=\"token comment\"># 模块编译构建任务脚本</span>\n│   ├── oh-package.json5\n│   └── src\n│       ├── main\n│       │   ├── ets <span class=\"token comment\"># 存放 ARTS 源码</span>\n│       │   │   ├── entryability\n│       │   │   │   └── EntryAbility.ts <span class=\"token comment\"># 应用服务的入口</span>\n│       │   │   └── pages\n│       │   │       └── Index.ets <span class=\"token comment\"># 应用服务包含页面</span>\n│       │   ├── module.json5 <span class=\"token comment\"># Stage 模型模块配置模块</span>\n│       │   └── resources <span class=\"token comment\"># 用于存放应用服务资源</span>\n│       │       ├── base\n│       │       │   ├── element\n│       │       │   │   ├── color.json\n│       │       │   │   └── string.json\n│       │       │   ├── media\n│       │       │   │   └── icon.png\n│       │       │   └── profile\n│       │       │       └── main_pages.json\n│       │       ├── en_US\n│       │       │   └── element\n│       │       │       └── string.json\n│       │       ├── rawfile\n│       │       └── zh_CN\n│       │           └── element\n│       │               └── string.json\n│       └── ohosTest\n│           ├── ets\n│           │   ├── <span class=\"token builtin class-name\">test</span>\n│           │   │   ├── Ability.test.ets\n│           │   │   └── List.test.ets\n│           │   ├── testability\n│           │   │   ├── TestAbility.ets\n│           │   │   └── pages\n│           │   │       └── Index.ets\n│           │   └── testrunner\n│           │       └── OpenHarmonyTestRunner.ts\n│           ├── module.json5\n│           └── resources\n│               └── base\n│                   ├── element\n│                   │   ├── color.json\n│                   │   └── string.json\n│                   ├── media\n│                   │   └── icon.png\n│                   └── profile\n│                       └── test_pages.json\n├── hvigor\n│   ├── hvigor-config.json5\n│   └── hvigor-wrapper.js\n├── hvigorfile.ts <span class=\"token comment\"># 应用级编译构建脚本</span>\n├── hvigorw\n├── hvigorw.bat\n├── local.properties\n├── oh-package-lock.json5\n├── oh-package.json5\n└── oh_modules <span class=\"token comment\"># 第三方依赖模块</span>\n    └── @ohos\n        └── hypium -<span class=\"token operator\">&gt;</span> <span class=\"token punctuation\">..</span>/.ohpm/@ohos+hypium@1.0.6/oh_modules/@ohos/hypium\n\n<span class=\"token number\">37</span> directories, <span class=\"token number\">34</span> files\n</code></pre></div>","r":{"minutes":2.75,"words":825},"t":"🦋 1-harmony 项目工程结构","y":"a"} }],
  ["/web/harmony/2-components.html", { loader: () => import(/* webpackChunkName: "2-components.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/harmony/2-components.html.js"), meta: {"d":1709475838000,"g":["harmony"],"r":{"minutes":0.03,"words":9},"t":"🦋 2-harmony 组件","y":"a"} }],
  ["/web/harmony/3-customComponents.html", { loader: () => import(/* webpackChunkName: "3-customComponents.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/harmony/3-customComponents.html.js"), meta: {"d":1709454942000,"g":["harmony"],"e":"<h2>同一文件内</h2>\n<blockquote>\n<p>父组件 &amp; 子组件</p>\n</blockquote>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entry</span></span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span>\nstruct Father<span class=\"token punctuation\">{</span>\n  \n  <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 调用子组件</span>\n    <span class=\"token function\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>title<span class=\"token operator\">:</span><span class=\"token string\">\"我是标题\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Component</span></span>\nstruct Son<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> title<span class=\"token operator\">:</span><span class=\"token builtin\">string</span>\n  <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    \n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","r":{"minutes":0.58,"words":174},"t":"🦋 3-自定义组件","y":"a"} }],
  ["/web/harmony/4-stateManagement.html", { loader: () => import(/* webpackChunkName: "4-stateManagement.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/harmony/4-stateManagement.html.js"), meta: {"d":1709454957000,"g":["harmony"],"e":"<h2>@State基本使用方法</h2>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">State</span></span> test<span class=\"token operator\">:</span><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">&gt;</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\">// 添加</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">)</span>\n</code></pre></div>","r":{"minutes":1.2,"words":361},"t":"🦋 4-Stage 状态管理","y":"a"} }],
  ["/web/harmony/5-router.html", { loader: () => import(/* webpackChunkName: "5-router.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/harmony/5-router.html.js"), meta: {"d":1709454977000,"g":["harmony"],"e":"\n<p>页面栈的最大容量是 32 个页面使用 router.clear()方法可以清空页面栈 释放内存</p>\n<p>Router 两种页面跳转的方式:</p>\n<ul>\n<li>router.pushUrl():入栈页面router.back()返回页面</li>\n<li>router.replaceUrl():替换当前的页面 无法返回</li>\n</ul>\n<p>Router 两种页面实例模式:</p>\n<ul>\n<li>Standard:标准模式每次跳转页面新建页面入栈</li>\n<li>Single:单例模式 如果目标的页面已存在页面中 将其移动到栈顶</li>\n</ul>\n<h2>页面路由</h2>","r":{"minutes":0.8,"words":241},"t":"🦋 5-页面路由","y":"a"} }],
  ["/web/harmony/6-pageAnimation.html", { loader: () => import(/* webpackChunkName: "6-pageAnimation.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/harmony/6-pageAnimation.html.js"), meta: {"d":1709475838000,"g":["harmony"],"e":"\n<h2>属性动画</h2>\n<p>给组件添加 animation属性添加动画</p>\n<p><code>width</code>,<code>height</code>,<code>Opacity</code>,<code>backgroundColor</code>,<code>scale</code>,<code>rotate</code>,<code>translate</code></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>参数类型</th>\n<th>必填</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>duration</td>\n<td>number</td>\n<td>否</td>\n<td><code>设置动画时长。默认值：1000单位：毫秒从API version 9开始，该接口支持在ArkTS卡片中使用。**说明：**- 在ArkTS卡片上最大动画持续时间为1000毫秒。- 设置浮点型类型的值时，向下取整；设置值为1.2，按照1处理。</code></td>\n</tr>\n<tr>\n<td>tempo</td>\n<td>number</td>\n<td>否</td>\n<td><code>动画播放速度。数值越大，动画播放速度越快，数值越小，播放速度越慢。值为0时，表示不存在动画。默认值：1</code></td>\n</tr>\n<tr>\n<td>curve</td>\n<td>string | <a href=\"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-appendix-enums-0000001478061741-V3#ZH-CN_TOPIC_0000001574248789__curve\" target=\"_blank\" rel=\"noopener noreferrer\">Curve</a> | <a href=\"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-curve-0000001427585072-V3#ZH-CN_TOPIC_0000001523808354__icurve\" target=\"_blank\" rel=\"noopener noreferrer\">ICurve</a>9+</td>\n<td>否</td>\n<td><code>设置动画曲线。默认值：Curve.EaseInOut从API version 9开始，该接口支持在ArkTS卡片中使用。</code></td>\n</tr>\n<tr>\n<td>delay</td>\n<td>number</td>\n<td>否</td>\n<td><code>设置动画延迟执行的时长。默认值：0，不延迟播放。单位：毫秒取值范围：[0, +∞)**说明：**设置浮点型类型的值时，向下取整。例如，设置值为1.2，按照1处理。</code></td>\n</tr>\n<tr>\n<td>iterations</td>\n<td>number</td>\n<td>否</td>\n<td><code>设置播放次数。默认值：1取值范围：[-1, +∞)**说明：**设置为-1时表示无限次播放。设置为0时表示无动画效果。</code></td>\n</tr>\n<tr>\n<td>playMode</td>\n<td><a href=\"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/ts-appendix-enums-0000001478061741-V3#ZH-CN_TOPIC_0000001574248789__playmode\" target=\"_blank\" rel=\"noopener noreferrer\">PlayMode</a></td>\n<td>否</td>\n<td><code>设置动画播放模式，默认播放完成后重头开始播放。默认值：PlayMode.Normal从API version 9开始，该接口支持在ArkTS卡片中使用。</code></td>\n</tr>\n<tr>\n<td>onFinish</td>\n<td><code>() =&gt; void</code></td>\n<td>否</td>\n<td><code>状态回调，动画播放完成时触发。从API version 9开始，该接口支持在ArkTS卡片中使用。**说明：**当iterations设置为-1时，动画效果无限循环不会停止，所以不会触发此回调</code></td>\n</tr>\n</tbody>\n</table>","r":{"minutes":3.77,"words":1131},"t":"🦋 6-页面动画","y":"a"} }],
  ["/web/harmony/7-lifeCycle.html", { loader: () => import(/* webpackChunkName: "7-lifeCycle.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/harmony/7-lifeCycle.html.js"), meta: {"d":1709475838000,"g":["harmony"],"e":"\n<iframe style=\"border: 1px solid rgba(0, 0, 0, 0.1);\" sandbox=\"allow-scripts allow-popups allow-forms allow-modals allow-same-origin\" width=\"800\" height=\"450\" src=\"https://pixso.cn/app/ifr?url=https://pixso.cn/app/board/bnFWVuhoAUXEjcEF2odNsg\" allowfullscreen=\"\"></iframe>\n<h2>EntryAbility 文件</h2>\n<blockquote>\n<p>hilog.info 日志</p>\n<p>'%{public}s'  public 表示日志是否公开</p>\n</blockquote>","r":{"minutes":1.76,"words":528},"t":"🦋 7-生命周期","y":"a"} }],
  ["/web/harmony/8-networkRequest.html", { loader: () => import(/* webpackChunkName: "8-networkRequest.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/harmony/8-networkRequest.html.js"), meta: {"d":1709475838000,"g":["harmony"],"e":"\n<ul>\n<li>http数据请求</li>\n<li>websocket</li>\n<li>socket</li>\n</ul>\n<h2>HTTP</h2>\n<h3>导入模块</h3>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> http <span class=\"token keyword\">from</span> <span class=\"token string\">'@ohos.net.http'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","r":{"minutes":3.16,"words":947},"t":"🦋 8-网络请求","y":"a"} }],
  ["/web/harmony/9-dataPersistence.html", { loader: () => import(/* webpackChunkName: "9-dataPersistence.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/harmony/9-dataPersistence.html.js"), meta: {"d":1709475838000,"g":["harmony"],"e":"\n<h2>首选项</h2>\n<p><a href=\"https://developer.harmonyos.com/cn/docs/documentation/doc-references-V3/js-apis-data-preferences-0000001427745052-V3#ZH-CN_TOPIC_0000001573928817__delete\" target=\"_blank\" rel=\"noopener noreferrer\">官网地址</a></p>\n<h3>导入模块</h3>\n<div class=\"language-typescript\" data-ext=\"ts\" data-title=\"ts\"><pre class=\"language-typescript\"><code><span class=\"token keyword\">import</span> dataPreferences <span class=\"token keyword\">from</span> <span class=\"token string\">'@ohos.data.preferences'</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","r":{"minutes":1.49,"words":447},"t":"🦋 9-数据持久化","y":"a"} }],
  ["/web/GoogleDrive/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/GoogleDrive/index.html.js"), meta: {"d":1699094106000,"g":["Google Drive","前端"],"e":"\n<h2>目录</h2>\n<ul>\n<li><a href=\"#%E5%BC%80%E5%A7%8B%E7%9A%84%E4%BA%94%E4%B8%AA%E6%AD%A5%E9%AA%A4\">开始的五个步骤</a></li>\n</ul>\n<p><a href=\"#%E9%80%9A%E8%BF%87api%E8%B0%83%E7%94%A8\">通过API调用</a></p>\n<p><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\">初始化</a><br>\n<a href=\"#%E5%88%A0%E9%99%A4%E7%BD%91%E7%9B%98%E6%96%87%E4%BB%B6\">删除网盘文件</a><br>\n<a href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\">文件上传</a><br>\n<a href=\"#%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\">文件下载</a></p>","r":{"minutes":9.07,"words":2720},"t":"😤 Google Drive 使用快速入门","y":"a"} }],
  ["/web/network-request/websocket.html", { loader: () => import(/* webpackChunkName: "websocket.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/network-request/websocket.html.js"), meta: {"d":1699094106000,"g":["WebSocket","前端"],"e":"\n<h2>使用教程</h2>\n<ol>\n<li>创建 WebSocket 对象：</li>\n</ol>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wss://example.com/socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","r":{"minutes":0.58,"words":175},"t":"🤕 WebSocket 快速使用教程","y":"a"} }],
  ["/web/network-request/XMLHttpRequest.html", { loader: () => import(/* webpackChunkName: "XMLHttpRequest.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/network-request/XMLHttpRequest.html.js"), meta: {"d":1699094106000,"g":["AJAX","XHR","前端"],"e":"<h3>1.XMLHttpRequest的意义和概念</h3>\n<p>XMLHttpRequest是一个特殊的对象，其目的是作用于服务器交换数据</p>\n<h4>主要功能：</h4>\n<pre><code>它可以使网页在不重新加载的情况下更新网页\n\n在页面加载后向服务器发送请求\n\n在页面加载后从服务器接收数据\n\n在后台向服务器发送数据\n</code></pre>\n<h3>2.属性</h3>\n<ul>\n<li>\n<p>readystate(只读):</p>\n<p>返回一个无符号短整型数字，代表请求的状态码</p>\n<p>0：表示XMLHttprequest实例已经生成，但是实例的open方法没有被调用</p>\n<p>1：表示open方法已经调用，可以使用实例的setRequestHeader()方法设置HTTP请求头信息。此时send方法还没调用</p>\n<p>2：表示实例的send方法已经调用，并且服务器返回的头信息和状态码已经收到</p>\n<p>3：表示正在接收服务器传来的数据体body部分。这时，如果实例的responseType属性等于text或者空字符串，responseText属性就会包含已经收到的部分信息</p>\n<p>4：表示服务器返回的数据已经完全接收，或本次接收已经失败</p>\n</li>\n<li>\n<p>onreadystatechange:</p>\n<p>当<strong>readystate</strong>属性发生变化时，调用的事件处理器</p>\n<ul>\n<li>\n<p>responseType:</p>\n<p>一个定义响应类型的枚举类</p>\n</li>\n<li>\n<p>response(只读):</p>\n<p>返回根据<strong>responseType</strong>的的值来返回对应类型的响应实体</p>\n</li>\n<li>\n<p>status(只读):</p>\n<p>返回一个无符号的短整型数字，代表请求的响应状态</p>\n</li>\n<li>\n<p>timeout:</p>\n<p>一个无符号长整型数字，代表当前请求的最大请求时间，超出该事件，请求会自动终止</p>\n</li>\n</ul>\n</li>\n</ul>","r":{"minutes":3.63,"words":1090},"t":"😤 XHR使用教程","y":"a"} }],
  ["/web/optimize/frontend-performance-optimization.html", { loader: () => import(/* webpackChunkName: "frontend-performance-optimization.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/optimize/frontend-performance-optimization.html.js"), meta: {"d":1699094106000,"g":["优化","前端"],"e":"\n<h2>目录</h2>\n<ul>\n<li><a href=\"#%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%BB%8B%E7%BB%8D\">前端性能优化介绍</a></li>\n</ul>\n<p><a href=\"#%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8Cweb%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\">如何进行Web性能优化</a></p>\n<p><a href=\"#%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87\">性能指标</a><br>\n<a href=\"#%E6%80%A7%E8%83%BD%E6%B5%8B%E9%87%8F\">性能测量</a></p>","r":{"minutes":43.42,"words":13026},"t":"🥳 前端性能优化","y":"a"} }],
  ["/web/optimize/general-SEO-optimization-plan.html", { loader: () => import(/* webpackChunkName: "general-SEO-optimization-plan.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/optimize/general-SEO-optimization-plan.html.js"), meta: {"d":1699094106000,"g":["优化","SEO","前端"],"e":"\n<h2>1.<strong>增加 Mate Descripition</strong></h2>\n<p>每个页面</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"description\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"xxxxxxxx\"</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>","r":{"minutes":1.97,"words":592},"t":"🫠 SEO 通用优化方案","y":"a"} }],
  ["/web/optimize/Gulp.html", { loader: () => import(/* webpackChunkName: "Gulp.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/optimize/Gulp.html.js"), meta: {"d":1699094106000,"g":["优化","前端","Gulp"],"e":"\n<h2>目录</h2>\n<ul>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\">初始化</a></li>\n</ul>\n<p><a href=\"#gulp%E4%B8%AD%E6%8F%90%E4%BE%9B%E7%9A%84%E6%96%B9%E6%B3%95\">gulp中提供的方法</a></p>\n<p><a href=\"#%E9%85%8D%E7%BD%AE\">配置</a></p>\n<p><a href=\"#task%E5%8F%82%E6%95%B0%E8%A7%A3%E9%87%8A\">task参数解释</a></p>\n<p><a href=\"#html%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9\">html文件压缩</a></p>","r":{"minutes":4.89,"words":1468},"t":"🥳 Gulp 代码压缩","y":"a"} }],
  ["/web/optimize/UniversalJs.html", { loader: () => import(/* webpackChunkName: "UniversalJs.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/optimize/UniversalJs.html.js"), meta: {"d":1699094106000,"g":["优化","babel","前端","Webpack"],"e":"\n<h2>目录</h2>\n<ul>\n<li><a href=\"#%E6%8B%9F%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\">拟解决的问题</a></li>\n</ul>\n<p><a href=\"#%E8%A7%A3%E5%86%B3%E7%9A%84%E6%96%B9%E5%BC%8F\">解决的方式</a></p>\n<p><a href=\"#webpack\">webpack</a><br>\n<a href=\"#babel\">babel</a></p>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95\">项目目录</a></p>","r":{"minutes":4.7,"words":1409},"t":"🤔 最大程度的实现 JS 的兼容性","y":"a"} }],
  ["/web/QrCode/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/QrCode/index.html.js"), meta: {"d":1699094106000,"g":["QrCode","React","前端"],"e":"\n<h2>目录</h2>\n<ul>\n<li>\n<p><a href=\"#qrcode%E5%89%8D%E7%AB%AF\">QRcode→前端</a></p>\n<ul>\n<li>\n<p><a href=\"#-%E7%89%88%E6%9C%AC%E7%BA%AA%E5%BD%95\"> 版本纪录</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E4%B8%8E%E7%8E%AF%E5%A2%83\">开发工具与环境</a></p>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C\">项目运行</a></p>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BE%9D%E8%B5%96%E5%8C%85\">项目核心依赖包</a></p>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83\">项目规范</a></p>\n<ul>\n<li>\n<p><a href=\"#%E5%91%BD%E5%90%8D%E7%9A%84%E8%A7%84%E5%88%99\">命名的规则</a></p>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%93%E6%9E%84\">项目的结构</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B6%E4%B9%A6%E5%86%99%E6%A0%BC%E5%BC%8F\">工程文件书写格式</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E6%A0%B8%E5%BF%83%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D\">项目核心库的介绍</a></p>\n<ul>\n<li>\n<p><a href=\"#%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%BA%93-react-qrbtf\">二维码生成库 react-qrbtf</a></p>\n<ul>\n<li>\n<p><a href=\"#%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8%E6%8F%90%E4%BE%9B%E7%9A%84-api\">直接调用提供的 API</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F\">自定义样式</a></p>\n</li>\n<li>\n<p><a href=\"#qe-%E7%A0%81%E7%AC%A6%E5%8F%B7%E7%9A%84%E7%BB%93%E6%9E%84\">QE 码符号的结构</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BB%8B%E7%BB%8D\">项目核心模块的介绍</a></p>\n<ul>\n<li>\n<p><a href=\"#%E5%85%A8%E5%B1%80-theme-%E8%AE%BE%E7%BD%AE\">全局 Theme 设置</a></p>\n<ul>\n<li>\n<p><a href=\"#%E8%B0%83%E8%89%B2%E6%9D%BF%E8%AE%BE%E7%BD%AE\">调色板设置</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E6%96%AD%E7%82%B9%E8%AE%BE%E7%BD%AE\">媒体查询断点设置</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%85%A8%E5%B1%80-font-%E8%AE%BE%E7%BD%AE\">全局 Font 设置</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%BF%AE%E6%94%B9mui%E7%BB%84%E4%BB%B6%E7%9A%84%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F\">修改MUI组件的默认样式</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%85%A8%E5%B1%80-context-%E7%9A%84%E4%BD%BF%E7%94%A8\">全局 Context 的使用</a></p>\n</li>\n<li>\n<p><a href=\"#uselocalstorage\">useLocalStorage</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%B0%86%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8%E8%87%B3%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E4%B8%AD\">将状态存储至本地存储中</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%B0%86%E7%8A%B6%E6%80%81%E4%BD%BF%E7%94%A8usestate%E5%AD%98%E5%82%A8\">将状态使用useState存储</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%8F%96%E5%87%BA%E6%83%B3%E8%A6%81%E4%BD%BF%E7%94%A8%E7%9A%84%E5%85%A8%E5%B1%80%E7%8A%B6%E6%80%81\">取出想要使用的全局状态</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC\">页面路由跳转</a></p>\n<ul>\n<li>\n<p><a href=\"#%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1%E8%A1%A8\">配置路由表</a></p>\n</li>\n<li>\n<p><a href=\"#%E9%80%9A%E8%BF%87%E7%82%B9%E5%87%BB%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC\">通过点击实现路由跳转</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E6%B5%81%E7%A8%8B\">二维码生成流程</a></p>\n<ul>\n<li>\n<p><a href=\"#%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85\">二维码生成库的封装</a></p>\n<ul>\n<li>\n<p><a href=\"#codegenerationinterfacejsx\">CodeGenerationInterface.jsx</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%A0%B7%E5%BC%8F%E4%B8%8Etype%E7%9A%84%E5%8C%B9%E9%85%8D\">二维码样式与type的匹配</a></p>\n</li>\n<li>\n<p><a href=\"#codelistpointsjsx\">CodeListPoints.jsx</a></p>\n</li>\n<li>\n<p><a href=\"#codelistpointscirclejsx\">CodeListPointsCircle.jsx</a></p>\n</li>\n<li>\n<p><a href=\"#codelistpointsdisturbjsx\">CodeListPointsDisturb.jsx</a></p>\n</li>\n<li>\n<p><a href=\"#codelistpointsdsjjsx\">CodeListPointsDSJ.jsx</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%9F%BA%E6%9C%AC%E7%94%9F%E6%88%90%E7%9A%84%E6%B5%81%E7%A8%8B\">基本生成的流程</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%96%87%E6%9C%AC%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%B1%BB%E5%9E%8Bwebsitetextappstore\">文本自动生成类型(website、text、appstore)</a></p>\n<ul>\n<li>\n<p><a href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%89%8B%E5%8A%A8%E7%94%9F%E6%88%90%E7%B1%BB%E5%9E%8Bmp3pdfimage\">文件上传手动生成类型(mp3、pdf、image)</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%96%87%E6%9C%AC%E6%89%8B%E5%8A%A8%E7%94%9F%E6%88%90%E7%B1%BB%E5%9E%8Bvcardemailwifisms\">文本手动生成类型(vcard、eMail、wifi、sms）</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%AD%98%E5%82%A8%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E6%B5%81%E7%A8%8B\">二维码存储历史记录流程</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ui-%E7%95%8C%E9%9D%A2%E9%9A%BE%E7%82%B9%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88\">UI 界面难点实现方案</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E9%A6%96%E9%A1%B5%E4%BA%8C%E7%BB%B4%E7%A0%81-tab-%E5%88%87%E6%8D%A2\">首页二维码 tab 切换</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%A6%96%E9%A1%B5%E5%8D%8A%E5%9C%86%E5%87%B9%E5%BD%A2%E8%BE%B9%E6%A1%86\">首页半圆凹形边框</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3\">后端接口文档</a></p>\n</li>\n</ul>\n</li>\n</ul>","r":{"minutes":19.87,"words":5961},"t":"🍔 二维码美化项目","y":"a"} }],
  ["/web/package/axios-shortcut.html", { loader: () => import(/* webpackChunkName: "axios-shortcut.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/package/axios-shortcut.html.js"), meta: {"d":1699094106000,"g":["axios","封装"],"e":"<figure><img src=\"https://www.z4a.net/images/2023/10/07/axios.png\" alt=\"axios.png\" tabindex=\"0\" loading=\"lazy\"><figcaption>axios.png</figcaption></figure>\n<h2>依赖安装</h2>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>npm install axios\nor\nyarn add axios\n</code></pre></div>","r":{"minutes":4.57,"words":1370},"t":"🪤 axios 快捷封装","y":"a"} }],
  ["/web/package/regular-expression.html", { loader: () => import(/* webpackChunkName: "regular-expression.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/package/regular-expression.html.js"), meta: {"d":1699094106000,"g":["正则表达式","工具"],"u":true,"e":"<div align=\"center\">\n    <img width=\"200px\" height=\"200px\" src=\"https://www.z4a.net/images/2023/09/12/logo.png\">\n    <h1>\n\t\t<a href=\"https://github.com/NightSquirrl/ant-unocss-ts-vite-react\" target=\"_blank\">正则表达式</a>\n\t</h1>\n</div>\n<br>\n<br>\n<h1>正则表达式</h1>\n<h2>基础正则表达式速查表</h2>\n<h3>字符</h3>\n<table>\n<thead>\n<tr>\n<th><strong>表达式</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[abc]</code></td>\n<td>字符集。匹配集合中所含的任一字符。</td>\n</tr>\n<tr>\n<td><code>[^abc]</code></td>\n<td>否定字符集。匹配任何不在集合中的字符。</td>\n</tr>\n<tr>\n<td><code>[a-z]</code></td>\n<td>字符范围。匹配指定范围内的任意字符。</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>匹配除换行符以外的任何单个字符。</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>转义字符。</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配任何字母数字，包括下划线（等价于<code>[A-Za-z0-9_]</code>）。</td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>匹配任何非字母数字（等价于<code>[^A-Za-z0-9_]</code>）。</td>\n</tr>\n<tr>\n<td><code>\\d</code></td>\n<td>数字。匹配任何数字。</td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>非数字。匹配任何非数字字符。</td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>空白。匹配任何空白字符，包括空格、制表符等。</td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>非空白。匹配任何非空白字符。</td>\n</tr>\n</tbody>\n</table>","r":{"minutes":10.4,"words":3121},"t":"🍕 正则表达式使用手册","y":"a"} }],
  ["/web/storage/cookie.html", { loader: () => import(/* webpackChunkName: "cookie.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/storage/cookie.html.js"), meta: {"d":1715445701000,"g":["storage"],"e":"<h2>Cookie</h2>\n<p>Cookie 说白了就是一个存储在浏览器里的一个小小的文本文件，它附着在 HTTP 请求上，在浏览器和服务器之间“飞来飞去”。它可以携带用户信息，当服务器检查 Cookie 的时候，便可以获取到客户端的状态。</p>\n<h3>缺点：</h3>\n<ul>\n<li>4KB</li>\n<li>过量的 Cookie 会带来巨大的性能浪费</li>\n<li>Cookie 是紧跟域名的</li>\n<li>Cookie 是明文传递的，容易泄露用户信息，安全性不高。</li>\n</ul>\n<h3>使用</h3>\n<ol>\n<li>\n<p>设置 Cookie：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">\"cookieName=cookieValue; expires=Thu, 31 Dec 2024 23:59:59 UTC; path=/\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>在上面的示例中，<code>cookieName</code> 是你要设置的 Cookie 的名称，<code>cookieValue</code> 是对应的值。<code>expires</code> 参数指定了 Cookie 的过期时间，这里设置为 2024 年 12 月 31 日。<code>path</code> 参数指定了 Cookie 的适用路径，这里设置为根路径 <code>/</code>。</p>\n</li>\n<li>\n<p>获取 Cookie：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> cookieValue <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">;</span>\n</code></pre></div><p>使用 <code>document.cookie</code> 可以获取当前页面的所有 Cookie。它返回一个字符串，包含了所有的 Cookie。</p>\n</li>\n<li>\n<p>解析 Cookie：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">parseCookie</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cookieString</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> cookies <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  cookieString<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">';'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cookie</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cookie<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> cookieName <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> cookieValue <span class=\"token operator\">=</span> <span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cookies<span class=\"token punctuation\">[</span>cookieName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> cookieValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> cookies<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> parsedCookies <span class=\"token operator\">=</span> <span class=\"token function\">parseCookie</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>cookie<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>上面的代码定义了一个 <code>parseCookie</code> 函数，它将 <code>document.cookie</code> 字符串解析为一个对象，其中 Cookie 的名称作为键，Cookie 的值作为对应的值。这样你就可以方便地通过 Cookie 名称访问其对应的值。</p>\n</li>\n<li>\n<p>删除 Cookie：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>document<span class=\"token punctuation\">.</span>cookie <span class=\"token operator\">=</span> <span class=\"token string\">\"cookieName=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\"</span><span class=\"token punctuation\">;</span>\n</code></pre></div><p>要删除一个 Cookie，你可以将其过期时间设置为过去的时间（比如 1970 年 1 月 1 日），这样浏览器会自动删除该 Cookie。</p>\n</li>\n</ol>","r":{"minutes":1.55,"words":465},"t":"Cookie","y":"a"} }],
  ["/web/threeJs/1-quick-get-start.html", { loader: () => import(/* webpackChunkName: "1-quick-get-start.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/threeJs/1-quick-get-start.html.js"), meta: {"d":1700561461000,"g":["three.js"],"e":"<blockquote>\n<p>文档地址:https://www.three3d.cn/</p>\n<p>官网文档地址:https://threejs.org/</p>\n</blockquote>\n<h2>基本的使用</h2>\n<h3>依赖引入</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 导入threejs</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">THREE</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 导入轨道控制器</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> OrbitControls <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/controls/OrbitControls.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 导入lil.gui</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">GUI</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/libs/lil-gui.module.min.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 导入hdr加载器</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RGBELoader <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/loaders/RGBELoader.js\"</span><span class=\"token punctuation\">;</span>\n\n</code></pre></div>","r":{"minutes":10.61,"words":3184},"t":"1. ThreeJS入门教程","y":"a"} }],
  ["/web/threeJs/2-shadow.html", { loader: () => import(/* webpackChunkName: "2-shadow.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/threeJs/2-shadow.html.js"), meta: {"d":1700561461000,"g":["three.js"],"e":"<h2>光照</h2>\n<blockquote>\n<p>目标：灯光与阴影\n//灯光阴影\n//1、材质要满足能够对光照有反应\n/2、设置渲染器开启阴影的计算renderer,shadowMap,enabled=true;\n//3、设置光照投射阴影directionalLight.castshadow=true;\n//4、设置物体投射阴影sphere,castshadow=true;\n//5、设置物体接收阴影plane.receiveShadow=true;</p>\n</blockquote>\n<ol>\n<li>开启场景中的阴影贴图</li>\n</ol>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>renderer<span class=\"token punctuation\">.</span>shadowMap<span class=\"token punctuation\">.</span>enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n</code></pre></div>","r":{"minutes":0.75,"words":224},"t":"2. 光","y":"a"} }],
  ["/web/uni-app/1-quick-get-start.html", { loader: () => import(/* webpackChunkName: "1-quick-get-start.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/uni-app/1-quick-get-start.html.js"), meta: {"d":1700834037000,"g":["uni-app"],"u":true,"e":"<h2>1. 项目的创建方式</h2>\n<h3>1.1 创建 uni-app 项目方式</h3>\n<p><strong>uni-app 支持两种方式创建项目：</strong></p>\n<ol>\n<li>通过 HBuilderX 创建（需安装 HBuilderX 编辑器）</li>\n<li>通过命令行创建（需安装 NodeJS 环境）</li>\n</ol>\n<h2>2. HBuilderX 创建 uni-app 项目</h2>\n<ol>\n<li>通过可视化的 hbuilderx 的界面创建项目</li>\n</ol>\n<figure><img src=\"https://img.picgo.net/2023/11/24/uniapp_picture_2.609bc84658543df29435596a.png\" alt=\"uniapp_picture_2.609bc846\" tabindex=\"0\" loading=\"lazy\"><figcaption>uniapp_picture_2.609bc846</figcaption></figure>","r":{"minutes":12.13,"words":3638},"t":"😢 uni-app 快速入门","y":"a"} }],
  ["/web/vue/communicationMode.html", { loader: () => import(/* webpackChunkName: "communicationMode.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/vue/communicationMode.html.js"), meta: {"d":1707592973000,"g":["Vue"],"e":"<h2>子组件和父组件的通信方式</h2>\n<h3>Vue2 中实现子组件给父组件传递数据的方法：</h3>\n<p>子组件中，使用 $emit 触发一个自定义事件，并传递需要传递的数据：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 子组件</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'custom-event'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","r":{"minutes":1.81,"words":544},"t":"Vue中组件的通信方式","y":"a"} }],
  ["/web/vue/vue-jsx.html", { loader: () => import(/* webpackChunkName: "vue-jsx.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/vue/vue-jsx.html.js"), meta: {"d":1708067721000,"e":"<h2>创建项目</h2>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> init vite <span class=\"token comment\"># 选择 vite 构建 选择 vue javascript</span>\n\n<span class=\"token function\">pnpm</span> i\n\n<span class=\"token function\">pnpm</span> i @vitejs/plugin-vue-jsx\n\n</code></pre></div>","r":{"minutes":0.34,"words":101},"t":"Vue3 使用 jsx","y":"a"} }],
  ["/web/vue/vue-router.html", { loader: () => import(/* webpackChunkName: "vue-router.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/vue/vue-router.html.js"), meta: {"d":1699094106000,"g":["Vue","vue-router"],"e":"\n<h2>路由的相关知识点</h2>\n<h3>前端路由</h3>\n<blockquote>\n<p>前端路由是后来发展到SPA（单页应用）时才出现的概念。 SPA 就是一个WEB项目只有一个 HTML 页面，一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转。</p>\n</blockquote>\n<p>前端路由在SPA项目中是必不可少的，页面的跳转、刷新都与路由有关，通过不同的url显示相应的页面。</p>\n<p>优点：前后端的彻底分离，不刷新页面，用户体验较好，页面持久性较好。</p>\n<h3>后端路由</h3>\n<p>当在地址栏切换不同的url时，都会向服务器发送一个请求，服务器接收并响应这个请求，在服务端拼接好html文件返回给页面来展示。</p>","r":{"minutes":5.67,"words":1702},"t":"🪤 vue-router","y":"a"} }],
  ["/web/vue/vue-vuex-pinia.html", { loader: () => import(/* webpackChunkName: "vue-vuex-pinia.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/vue/vue-vuex-pinia.html.js"), meta: {"d":1699094106000,"g":["Vue","vuex","pinia"],"e":"<figure><img src=\"https://pinia.vuejs.org/logo.svg\" alt=\"pinia.svg\" tabindex=\"0\" loading=\"lazy\"><figcaption>pinia.svg</figcaption></figure>\n<h1>Vue 状态管理 vuex pinia</h1>\n<h2>Vuex</h2>\n<h3>Vue2 选项式 API</h3>\n<blockquote>\n<p>状态管理 - 在 src 中创建文件夹 store，创建 index.js 文件</p>\n</blockquote>\n<div class=\"language-JavaScript\" data-ext=\"JavaScript\" data-title=\"JavaScript\"><pre class=\"language-JavaScript\"><code>import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex) // 把 Vuex 注册到Vue 上\n\nexport default new Vuex.Store({\n    // 在开发环境开启严格模式 这样修改数据 就必须通过 mutation 来处理\n    strict:products.env.NODE_ENV !== 'production',\n    // 状态\n    state: {\n    },\n    // 用来处理状态\n    mutations: {\n    },\n    // 用于异步处理\n    actions: {\n    },\n    // 用来挂载模块\n    modules: {\n    }\n})\n</code></pre></div>","r":{"minutes":6.95,"words":2086},"t":"🪤 Vue 状态管理","y":"a"} }],
  ["/web/webpack/Webpack_React.html", { loader: () => import(/* webpackChunkName: "Webpack_React.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/webpack/Webpack_React.html.js"), meta: {"d":1699094106000,"g":["Webpack","前端"],"e":"<div align=\"center\">\n    <img width=\"200px\" height=\"200px\" src=\"https://www.z4a.net/images/2023/09/12/logo.png\">\n    <h1>\n\t\t<a href=\"https://github.com/NightSquirrl/manual-react-webpack\" target=\"_blank\">🧐 Webpack + React</a>\n\t</h1>\n    <p>代码相关说明</p>\n</div>\n<br>\n<br>\n<h1>基础配置</h1>\n<h2>一、五大核心概念</h2>\n","r":{"minutes":13.01,"words":3902},"t":"🧐 Webpack + React","y":"a"} }],
  ["/web/webpack/webpack.html", { loader: () => import(/* webpackChunkName: "webpack.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/webpack/webpack.html.js"), meta: {"d":1699094106000,"g":["Webpack"],"e":"<blockquote>\n<p>高级篇 7.9</p>\n</blockquote>\n<h1>基础篇</h1>\n<h2>1. Why? 为什么需要 webpack</h2>\n<blockquote>\n<p>问题</p>\n</blockquote>\n<ol>\n<li>作用于问题 GRUNT IIFE</li>\n</ol>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 立即调用函数</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在外部调用</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 程序报错,无法访问到</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可以访问到</span>\n\n</code></pre></div>","r":{"minutes":24.31,"words":7292},"t":"🪤 Webpack","y":"a"} }],
  ["/server/Docker/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/Docker/index.html.js"), meta: {"d":1700743533000,"e":"<h2>Linux 安装 docker CentOS</h2>\n<h3>卸载旧版本</h3>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>yum remove <span class=\"token function\">docker</span> <span class=\"token punctuation\">\\</span>\n    docker-client <span class=\"token punctuation\">\\</span>\n    docker-client-latest <span class=\"token punctuation\">\\</span>\n    docker-common <span class=\"token punctuation\">\\</span>\n    docker-latest <span class=\"token punctuation\">\\</span>\n    docker-latest-logrotate <span class=\"token punctuation\">\\</span>\n    docker-logrotate <span class=\"token punctuation\">\\</span>\n    docker-engine\n</code></pre></div>","r":{"minutes":6.38,"words":1914},"t":"Docker","y":"a"} }],
  ["/server/mysql/1-install.html", { loader: () => import(/* webpackChunkName: "1-install.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/mysql/1-install.html.js"), meta: {"d":1699684826000,"g":["Java"],"u":98,"e":"<h2>1. MacOS 版本的安装</h2>\n<h3>1.1 下载地址</h3>\n<blockquote>\n<p>选择对应的版本下载即可</p>\n</blockquote>\n<p><a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener noreferrer\">MacOS 下载地址</a></p>\n<h3>1.2 解决无法启动MySQL问题</h3>\n<ol>\n<li>\n<p>打开设置中的mysql图标，发现红点，点击\"Start MySQL Server\"后，变绿后秒变红，无法启动。</p>\n</li>\n<li>\n<p>![image-20231111030503079](/Users/zeroeldath/Library/Application Support/typora-user-images/image-20231111030503079.png)</p>\n</li>\n<li>\n<p>进入configuration，找到Error log的位置，尝试打开。</p>\n</li>\n<li>\n<p>报错：无法打开data文件夹，权限不够。重新授权：</p>\n</li>\n</ol>","r":{"minutes":2.28,"words":684},"t":"🧐 1. MySql 的安装","y":"a"} }],
  ["/server/mysql/2-database-concept.html", { loader: () => import(/* webpackChunkName: "2-database-concept.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/mysql/2-database-concept.html.js"), meta: {"d":1700154209000,"g":["MySql"],"e":"<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>全程</th>\n<th>简称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据库</td>\n<td>存储数据的仓库，数据是有组织的进行存储</td>\n<td>DataBase（DB）</td>\n</tr>\n<tr>\n<td>数据库管理系统</td>\n<td>操纵和管理数据库的大型软件</td>\n<td>DataBase Management System (DBMS)</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>操作关系型数据库的编程语言，定义了一套操作</td>\n<td>Structured Query<br>Language (SQL)</td>\n</tr>\n</tbody>\n</table>","r":{"minutes":2.79,"words":836},"t":"🧐 2. 数据库的概念","y":"a"} }],
  ["/server/mysql/3-SQL-statement.html", { loader: () => import(/* webpackChunkName: "3-SQL-statement.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/mysql/3-SQL-statement.html.js"), meta: {"d":1700154209000,"g":["MySql"],"e":"<h2>1. DDL</h2>\n<p>Data Definition Language，数据定义语言，用来定义数据库对象(数据库，表，字段) 。</p>\n<h3>1.1 数据库操作</h3>\n<ol>\n<li>查询所有数据库</li>\n</ol>\n<div class=\"language-sql\" data-ext=\"sql\" data-title=\"sql\"><pre class=\"language-sql\"><code><span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","r":{"minutes":25.24,"words":7573},"t":"🧐 3. SQL 语句","y":"a"} }],
  ["/server/mysql/4-advanced-database.html", { loader: () => import(/* webpackChunkName: "4-advanced-database.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/mysql/4-advanced-database.html.js"), meta: {"d":1700154209000,"g":["MySql"],"e":"<h2>1. 存储引擎</h2>\n<h3>1.1 MySQL体系结构</h3>\n<figure><img src=\"https://img.picgo.net/2023/11/16/image-20231116223111923d8a0e8f70b3e742a.png\" alt=\"image-20231116223111923\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20231116223111923</figcaption></figure>\n<ol>\n<li>连接层</li>\n</ol>\n<p>最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于TCP/IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p>","r":{"minutes":26.12,"words":7835},"t":"🧐 4. 数据库进阶","y":"a"} }],
  ["/server/git/collect.html", { loader: () => import(/* webpackChunkName: "collect.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/git/collect.html.js"), meta: {"d":1709391746000,"g":["git"],"e":"<blockquote>\n<p>git 无法检测到 文件夹命名大小写的变化如何解决</p>\n</blockquote>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">git</span> config core.ignorecase <span class=\"token comment\"># 查看本地仓库git忽略大小写是打开还是关闭</span>\n<span class=\"token function\">git</span> config core.ignorecase <span class=\"token boolean\">false</span> <span class=\"token comment\"># 关闭忽略大小写</span>\n</code></pre></div>","r":{"minutes":0.21,"words":63},"t":"🥹 git 收集","y":"a"} }],
  ["/server/git/commonCommands.html", { loader: () => import(/* webpackChunkName: "commonCommands.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/git/commonCommands.html.js"), meta: {"d":1709391746000,"g":["git"],"e":"<h2>分支相关</h2>\n<blockquote>\n<p>查看本地和远程所有分支</p>\n</blockquote>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">git</span> br <span class=\"token parameter variable\">-a</span> \n</code></pre></div><blockquote>\n<p>查看本地所有分支</p>\n</blockquote>","r":{"minutes":2.36,"words":709},"t":"🥹 git 常用命令","y":"a"} }],
  ["/server/NGINX/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/NGINX/index.html.js"), meta: {"d":1699094106000,"g":["NGINX","封装"],"e":"<figure><img src=\"https://www.nginx.com/wp-content/uploads/2021/08/NGINX-Part-of-F5-horiz-black-type-1.svg\" alt=\"NGINX\" tabindex=\"0\" loading=\"lazy\"><figcaption>NGINX</figcaption></figure>\n<h1>NGINX</h1>\n<h2>下载安装</h2>\n<p>移centos 为例</p>\n<ol>\n<li>更新系统软件包列表：</li>\n</ol>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>yum update\n</code></pre></div>","r":{"minutes":7.46,"words":2239},"t":"🪤 NGINX 使用教程","y":"a"} }],
  ["/server/window/terminal.html", { loader: () => import(/* webpackChunkName: "terminal.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/window/terminal.html.js"), meta: {"d":1706886792000,"g":["图床"],"e":"<h2>Hyper</h2>\n<h2>安装Linux子系统</h2>\n<h3>安装</h3>\n<p>window 搜索功打开虚拟和Linux</p>\n<p>命令行终端安装Ubuntu</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>wsl --set-default-version <span class=\"token number\">2</span>\n\nwsl <span class=\"token parameter variable\">-l</span> <span class=\"token parameter variable\">-o</span>\n\nwsl.exe <span class=\"token parameter variable\">--install</span> Ubuntu-22.04\n\n</code></pre></div>","r":{"minutes":0.48,"words":143},"t":"😤 window 终端 + Linux 子系统","y":"a"} }],
  ["/server/node/nodeVersionControl.html", { loader: () => import(/* webpackChunkName: "nodeVersionControl.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/node/nodeVersionControl.html.js"), meta: {"d":1707592973000,"g":["node","nvm"],"e":"\n<h2>下载安装</h2>\n<p><a href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener noreferrer\">NVM Window github 地址如下</a></p>\n<p><a href=\"https://github.com/nvm-sh/nvm?tab=readme-ov-file#installing-and-updating\" target=\"_blank\" rel=\"noopener noreferrer\">其他系统的下载地址</a></p>\n<p>选择合适的系统版本下载</p>","r":{"minutes":0.51,"words":154},"t":"🥹 node 版本控制","y":"a"} }],
  ["/web/PDF/pdfjs/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/PDF/pdfjs/index.html.js"), meta: {"d":1699094106000,"g":["pdfjs","前端"],"e":"\n<h2>目录</h2>\n<p><a href=\"#pdf%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90%E7%9A%84%E5%8E%9F%E7%90%86\">pdf页面生成的原理</a></p>\n<p><a href=\"#%E5%9C%A8pdf%E6%B8%B2%E6%9F%93%E5%88%B0%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%96%B9%E5%BC%8F\">在pdf渲染到页面的方式</a>\n<a href=\"#1-canvas\">1. canvas</a><br>\n<a href=\"#2-svg%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F\">2. svg渲染模式</a></p>","r":{"minutes":4.68,"words":1403},"t":"😤 pdfjs 源码基本说明","y":"a"} }],
  ["/web/react/code-init/ant-unocss-ts-vite-react.html", { loader: () => import(/* webpackChunkName: "ant-unocss-ts-vite-react.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/react/code-init/ant-unocss-ts-vite-react.html.js"), meta: {"d":1699094106000,"g":["React","初始代码库","antd","axios","前端"],"e":"<div align=\"center\">\n    <img width=\"200px\" height=\"200px\" src=\"https://www.z4a.net/images/2023/09/12/logo.png\">\n    <h1>\n\t\t<a href=\"https://github.com/NightSquirrl/ant-unocss-ts-vite-react\" target=\"_blank\">ant-unocss-ts-vite-react</a>\n\t</h1>\n    <p>-代码相关说明-</p>\n</div>\n<br>\n<br>\n<h1>主要使用到的技术</h1>\n<p><code>vite axios unocss eslint antd ts react-router</code></p>","r":{"minutes":1.87,"words":561},"t":"😤 react 脚手架封装","y":"a"} }],
  ["/404.html", { loader: () => import(/* webpackChunkName: "404.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/404.html.js"), meta: {"t":""} }],
  ["/interview/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/interview/index.html.js"), meta: {"t":"Interview"} }],
  ["/server/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/index.html.js"), meta: {"t":"Server"} }],
  ["/rear-end/Java/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/index.html.js"), meta: {"t":"Java"} }],
  ["/rear-end/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/index.html.js"), meta: {"t":"Rear End"} }],
  ["/rear-end/JavaWeb/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/index.html.js"), meta: {"t":"Java Web"} }],
  ["/web/common/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/common/index.html.js"), meta: {"t":"Common"} }],
  ["/web/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/index.html.js"), meta: {"t":"Web"} }],
  ["/web/css/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/css/index.html.js"), meta: {"t":"Css"} }],
  ["/web/Javascript/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/Javascript/index.html.js"), meta: {"t":"Javascript"} }],
  ["/web/harmony/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/harmony/index.html.js"), meta: {"t":"Harmony"} }],
  ["/web/network-request/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/network-request/index.html.js"), meta: {"t":"Network Request"} }],
  ["/web/optimize/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/optimize/index.html.js"), meta: {"t":"Optimize"} }],
  ["/web/package/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/package/index.html.js"), meta: {"t":"Package"} }],
  ["/web/storage/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/storage/index.html.js"), meta: {"t":"Storage"} }],
  ["/web/threeJs/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/threeJs/index.html.js"), meta: {"t":"Three Js"} }],
  ["/web/uni-app/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/uni-app/index.html.js"), meta: {"t":"Uni App"} }],
  ["/web/vue/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/vue/index.html.js"), meta: {"t":"Vue"} }],
  ["/web/webpack/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/webpack/index.html.js"), meta: {"t":"Webpack"} }],
  ["/server/mysql/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/mysql/index.html.js"), meta: {"t":"Mysql"} }],
  ["/server/git/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/git/index.html.js"), meta: {"t":"Git"} }],
  ["/server/window/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/window/index.html.js"), meta: {"t":"Window"} }],
  ["/server/node/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/server/node/index.html.js"), meta: {"t":"Node"} }],
  ["/web/PDF/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/PDF/index.html.js"), meta: {"t":"PDF"} }],
  ["/web/react/code-init/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/react/code-init/index.html.js"), meta: {"t":"Code Init"} }],
  ["/web/react/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/web/react/index.html.js"), meta: {"t":"React"} }],
  ["/category/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/category/index.html.js"), meta: {"t":"分类","I":false} }],
  ["/tag/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/index.html.js"), meta: {"t":"标签","I":false} }],
  ["/tag/%E9%9D%A2%E8%AF%95/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/面试/index.html.js"), meta: {"t":"标签: 面试","I":false} }],
  ["/tag/javascript/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/javascript/index.html.js"), meta: {"t":"标签: Javascript","I":false} }],
  ["/tag/react/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/react/index.html.js"), meta: {"t":"标签: React","I":false} }],
  ["/tag/typescript/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/typescript/index.html.js"), meta: {"t":"标签: Typescript","I":false} }],
  ["/tag/vue/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/vue/index.html.js"), meta: {"t":"标签: Vue","I":false} }],
  ["/tag/%E5%9B%BE%E5%BA%8A/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/图床/index.html.js"), meta: {"t":"标签: 图床","I":false} }],
  ["/tag/%E6%9C%8D%E5%8A%A1%E5%99%A8/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/服务器/index.html.js"), meta: {"t":"标签: 服务器","I":false} }],
  ["/tag/java/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/java/index.html.js"), meta: {"t":"标签: Java","I":false} }],
  ["/tag/maven/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/maven/index.html.js"), meta: {"t":"标签: Maven","I":false} }],
  ["/tag/javaweb/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/javaweb/index.html.js"), meta: {"t":"标签: JavaWeb","I":false} }],
  ["/tag/springboot/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/springboot/index.html.js"), meta: {"t":"标签: SpringBoot","I":false} }],
  ["/tag/mybatis-plus/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/mybatis-plus/index.html.js"), meta: {"t":"标签: Mybatis-plus","I":false} }],
  ["/tag/redis/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/redis/index.html.js"), meta: {"t":"标签: Redis","I":false} }],
  ["/tag/spring/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/spring/index.html.js"), meta: {"t":"标签: Spring","I":false} }],
  ["/tag/mybatis/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/mybatis/index.html.js"), meta: {"t":"标签: Mybatis","I":false} }],
  ["/tag/jwt/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/jwt/index.html.js"), meta: {"t":"标签: JWT","I":false} }],
  ["/tag/swagger/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/swagger/index.html.js"), meta: {"t":"标签: Swagger","I":false} }],
  ["/tag/array/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/array/index.html.js"), meta: {"t":"标签: Array","I":false} }],
  ["/tag/%E7%AE%97%E6%B3%95/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/算法/index.html.js"), meta: {"t":"标签: 算法","I":false} }],
  ["/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/设计模式/index.html.js"), meta: {"t":"标签: 设计模式","I":false} }],
  ["/tag/%E5%89%8D%E7%AB%AF/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/前端/index.html.js"), meta: {"t":"标签: 前端","I":false} }],
  ["/tag/rollup/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/rollup/index.html.js"), meta: {"t":"标签: rollup","I":false} }],
  ["/tag/sdk/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/sdk/index.html.js"), meta: {"t":"标签: SDK","I":false} }],
  ["/tag/css/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/css/index.html.js"), meta: {"t":"标签: CSS","I":false} }],
  ["/tag/echarts/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/echarts/index.html.js"), meta: {"t":"标签: Echarts","I":false} }],
  ["/tag/ffmpeg/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/ffmpeg/index.html.js"), meta: {"t":"标签: ffmpeg","I":false} }],
  ["/tag/video/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/video/index.html.js"), meta: {"t":"标签: video","I":false} }],
  ["/tag/harmony/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/harmony/index.html.js"), meta: {"t":"标签: harmony","I":false} }],
  ["/tag/google-drive/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/google-drive/index.html.js"), meta: {"t":"标签: Google Drive","I":false} }],
  ["/tag/websocket/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/websocket/index.html.js"), meta: {"t":"标签: WebSocket","I":false} }],
  ["/tag/ajax/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/ajax/index.html.js"), meta: {"t":"标签: AJAX","I":false} }],
  ["/tag/xhr/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/xhr/index.html.js"), meta: {"t":"标签: XHR","I":false} }],
  ["/tag/%E4%BC%98%E5%8C%96/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/优化/index.html.js"), meta: {"t":"标签: 优化","I":false} }],
  ["/tag/seo/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/seo/index.html.js"), meta: {"t":"标签: SEO","I":false} }],
  ["/tag/gulp/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/gulp/index.html.js"), meta: {"t":"标签: Gulp","I":false} }],
  ["/tag/babel/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/babel/index.html.js"), meta: {"t":"标签: babel","I":false} }],
  ["/tag/webpack/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/webpack/index.html.js"), meta: {"t":"标签: Webpack","I":false} }],
  ["/tag/qrcode/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/qrcode/index.html.js"), meta: {"t":"标签: QrCode","I":false} }],
  ["/tag/axios/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/axios/index.html.js"), meta: {"t":"标签: axios","I":false} }],
  ["/tag/%E5%B0%81%E8%A3%85/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/封装/index.html.js"), meta: {"t":"标签: 封装","I":false} }],
  ["/tag/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/正则表达式/index.html.js"), meta: {"t":"标签: 正则表达式","I":false} }],
  ["/tag/%E5%B7%A5%E5%85%B7/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/工具/index.html.js"), meta: {"t":"标签: 工具","I":false} }],
  ["/tag/storage/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/storage/index.html.js"), meta: {"t":"标签: storage","I":false} }],
  ["/tag/three.js/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/three.js/index.html.js"), meta: {"t":"标签: three.js","I":false} }],
  ["/tag/uni-app/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/uni-app/index.html.js"), meta: {"t":"标签: uni-app","I":false} }],
  ["/tag/vue-router/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/vue-router/index.html.js"), meta: {"t":"标签: vue-router","I":false} }],
  ["/tag/vuex/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/vuex/index.html.js"), meta: {"t":"标签: vuex","I":false} }],
  ["/tag/pinia/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/pinia/index.html.js"), meta: {"t":"标签: pinia","I":false} }],
  ["/tag/mysql/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/mysql/index.html.js"), meta: {"t":"标签: MySql","I":false} }],
  ["/tag/git/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/git/index.html.js"), meta: {"t":"标签: git","I":false} }],
  ["/tag/nginx/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/nginx/index.html.js"), meta: {"t":"标签: NGINX","I":false} }],
  ["/tag/node/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/node/index.html.js"), meta: {"t":"标签: node","I":false} }],
  ["/tag/nvm/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/nvm/index.html.js"), meta: {"t":"标签: nvm","I":false} }],
  ["/tag/pdfjs/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/pdfjs/index.html.js"), meta: {"t":"标签: pdfjs","I":false} }],
  ["/tag/%E5%88%9D%E5%A7%8B%E4%BB%A3%E7%A0%81%E5%BA%93/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/初始代码库/index.html.js"), meta: {"t":"标签: 初始代码库","I":false} }],
  ["/tag/antd/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/tag/antd/index.html.js"), meta: {"t":"标签: antd","I":false} }],
  ["/article/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/article/index.html.js"), meta: {"t":"文章","I":false} }],
  ["/star/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/star/index.html.js"), meta: {"t":"星标","I":false} }],
  ["/timeline/", { loader: () => import(/* webpackChunkName: "index.html" */"D:/code/whatToolsBlog/src/.vuepress/.temp/pages/timeline/index.html.js"), meta: {"t":"时间轴","I":false} }],
]);
