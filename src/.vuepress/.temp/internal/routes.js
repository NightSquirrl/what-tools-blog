export const redirects = JSON.parse("{\"/rear-end/Java/26- IOStream(ByteStream&CharacterStream).html\":\"/rear-end/Java/26-%20IOStream(ByteStream_CharacterStream).html\",\"/rear-end/Java/26- IOStream(ByteStream&CharacterStream).md\":\"/rear-end/Java/26-%20IOStream(ByteStream_CharacterStream).html\",\"/rear-end/Java/32-IO(Exception&File&ComprehensiveCase).html\":\"/rear-end/Java/32-IO(Exception_File_ComprehensiveCase).html\",\"/rear-end/Java/32-IO(Exception&File&ComprehensiveCase).md\":\"/rear-end/Java/32-IO(Exception_File_ComprehensiveCase).html\",\"/web/webpack/Webpack+React.html\":\"/web/webpack/Webpack_React.html\",\"/web/webpack/Webpack+React.md\":\"/web/webpack/Webpack_React.html\",\"/web/Vue文档/9. 进阶/9.5 渲染函数 &amp; JSX.html\":\"/web/Vue%E6%96%87%E6%A1%A3/9.%20%E8%BF%9B%E9%98%B6/9.5%20%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0%20_amp_%20JSX.html\",\"/web/Vue文档/9. 进阶/9.5 渲染函数 &amp; JSX.md\":\"/web/Vue%E6%96%87%E6%A1%A3/9.%20%E8%BF%9B%E9%98%B6/9.5%20%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0%20_amp_%20JSX.html\"}")

export const routes = Object.fromEntries([
  ["/", { loader: () => import(/* webpackChunkName: "v-4ec95bbd" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/index.html.js"), meta: {"y":"h","t":"回到主页","i":"home"} }],
  ["/interview/Vue.html", { loader: () => import(/* webpackChunkName: "v-69554a77" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/interview/Vue.html.js"), meta: {"g":["面试","Vue"],"e":"<h2>Vue.js 与其他前端框架（如React和Angular）相比有什么优势和区别？</h2>\n<details>\n  <summary>点击展开/折叠</summary>\n<ol>\n<li>简单性和易用性：</li>\n</ol>\n<p>Vue.js 是一款轻量级框架，容易学习和上手。它提供了直观的API和清晰的文档，使开发者可以迅速构建应用程序。\nReact 和 Angular 在某些方面更复杂，需要更多的学习成本。</p>\n<ol start=\"2\">\n<li>渐进式框架：</li>\n</ol>\n<p>Vue.js 被称为渐进式框架，允许你逐步采用它的特性。这意味着你可以在现有项目中集成Vue.js，而不必一次性重写整个应用。\nReact 和 Angular 在集成到现有项目时可能需要更多的工作。</p>\n<ol start=\"3\">\n<li>双向数据绑定：</li>\n</ol>\n<p>Vue.js 提供了直接的双向数据绑定，使数据在视图和模型之间保持同步。这使得开发人员更容易管理应用程序的状态。\nReact 和 Angular 也支持数据绑定，但它们的实现方式略有不同。</p>\n<ol start=\"4\">\n<li>组件化开发：</li>\n</ol>\n<p>Vue.js、React 和 Angular 都鼓励组件化开发，但Vue.js在这方面表现出色。Vue组件的定义非常简单，易于复用和维护。\nReact 使用JSX来创建组件，Angular使用模板。这些框架的组件系统也很强大，但可能需要更多的配置。</p>\n<ol start=\"5\">\n<li>生态系统和社区：</li>\n</ol>\n<p>React 和 Angular 有庞大的生态系统和活跃的社区支持，有丰富的第三方库和插件。\nVue.js 的生态系统也在不断壮大，虽然相对较小，但社区也非常积极。</p>\n<ol start=\"6\">\n<li>性能：</li>\n</ol>\n<p>Vue.js 在性能方面表现良好，具有虚拟DOM机制，可以高效地更新视图。\nReact 也使用虚拟DOM，性能也很出色。Angular 在某些情况下可能需要更多的性能优化工作。</p>\n<ol start=\"7\">\n<li>工具和生态系统：</li>\n</ol>\n<p>Vue.js 提供了一些强大的工具，如Vue CLI，用于快速搭建项目，并与Vue Router和Vuex等官方库集成。\nReact 和 Angular 也有类似的工具和库，但Vue的工具生态系统在某些方面更加直观和易用。</p>\n<p>使用案例：</p>\n<p>Vue.js 适用于中小型应用程序和单页面应用程序（SPA），以及需要快速原型开发的项目。\nReact 和 Angular 适用于各种规模的应用，包括大型企业级应用。总之，选择使用哪个前端框架取决于项目的需求和团队的偏好。Vue.js在简单性、易用性和渐进式开发方面具有优势，适合许多项目，但React和Angular在大型应用和企业级项目中也有其优势。</p>\n</details>","y":"a","t":"Vue 面试题"} }],
  ["/server/basic-use-of-drawing-bed.html", { loader: () => import(/* webpackChunkName: "v-b7d3577c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/basic-use-of-drawing-bed.html.js"), meta: {"g":["图床"],"u":97,"e":"<h2>1. 下载与安装</h2>\n<p><a href=\"https://github.com/Molunerfinn/PicGo/releases\" target=\"_blank\" rel=\"noopener noreferrer\">下载地址PicGo</a></p>\n<p><a href=\"https://www.picgo.net\" target=\"_blank\" rel=\"noopener noreferrer\">图床网站地址</a></p>\n<h2>2. 配置图床地址</h2>\n<h3>2.1 菜单“插件设置”搜索插件\"chevereto\"安装</h3>\n<figure><img src=\"https://img.picgo.net/2022/04/16/20220416203220.png\" alt=\"\" tabindex=\"0\" loading=\"lazy\"><figcaption></figcaption></figure>","y":"a","t":"😤 图床的基本使用"} }],
  ["/server/serverInitializationUsage.html", { loader: () => import(/* webpackChunkName: "v-618de911" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/serverInitializationUsage.html.js"), meta: {"g":["服务器"],"u":96,"e":"<h2>连接命令</h2>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">ssh</span> root@ip\n<span class=\"token comment\"># 然后会让你输入密码</span>\nxxxxx  \n<span class=\"token comment\"># 成功进入</span>\n</code></pre></div><blockquote>\n<p>细节</p>\n<p>​\t如果此时你已经连接过了,然后你又重装了服务器的系统</p>\n<p>​\t当你再次连接的时候是无法连接上的</p>\n<p>​\t基本的错误如下</p>\n</blockquote>","y":"a","t":"🧐 服务器的初始化使用"} }],
  ["/rear-end/JavaWeb/1-Maven.html", { loader: () => import(/* webpackChunkName: "v-65cf9b2e" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/1-Maven.html.js"), meta: {"g":["Maven","JavaWeb"],"e":"<h2>1. 初识 Maven</h2>\n<blockquote>\n<p>🤔网站:</p>\n<p>Maven 官网:https://maven.apache.org/</p>\n<p>Maven 仓库https://mvnrepository.com/</p>\n</blockquote>\n<h3>1.1 什么是 Maven</h3>\n<p>Maven是Apache旗下的一个开源项目，是一款用于管理和构建java项目的工具。</p>\n<p>官网:https://maven.apache.org/</p>\n<h3>1.2 Maven的作用</h3>\n<p>使用Maven能够做什么呢？</p>\n<ol>\n<li>依赖管理</li>\n<li>统一项目结构</li>\n<li>项目构建</li>\n</ol>","y":"a","t":"😤 1.Maven"} }],
  ["/rear-end/JavaWeb/10-mybatis-plus.html", { loader: () => import(/* webpackChunkName: "v-af2294ca" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/10-mybatis-plus.html.js"), meta: {"g":["SpringBoot","JavaWeb","Mybatis-plus"],"e":"<h2>1. 入门</h2>\n<h3>1.1 引入MybatisPlus的起步依赖</h3>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code><span class=\"token comment\">&lt;!--MybatisPlus--&gt;</span>\u000b<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\u000b    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>com.baomidou<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\u000b    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>mybatis-plus-boot-starter<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\u000b    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>3.5.3.1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\u000b<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n\n</code></pre></div>","y":"a","t":"😤 10.Mybatis-plus"} }],
  ["/rear-end/JavaWeb/11-redis.html", { loader: () => import(/* webpackChunkName: "v-38d08cc7" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/11-redis.html.js"), meta: {"g":["SpringBoot","JavaWeb","Redis"],"e":"<h2>Redis 的安装</h2>\n<p>Redis是基于C语言编写的，因此首先需要安装Redis所需要的gcc依赖：</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> gcc tcl\n</code></pre></div><p>官网下载:https://redis.io/download/</p>","y":"a","t":"😤 11.Redis"} }],
  ["/rear-end/JavaWeb/12-Spring.html", { loader: () => import(/* webpackChunkName: "v-8ef27c38" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/12-Spring.html.js"), meta: {"g":["SpringBoot","JavaWeb","Spring"],"e":"<h2>SpringMvc的基本概念</h2>\n<p>SpringMVC是隶属于Spring框架的一部分，主要是用来进行Web开发，是对Servlet进行了封装。</p>\n<p>SpringMVC是处于Web层的框架，所以其主要的作用就是用来接收前端发过来的请求和数据然后经过处理并将处理的结果响应给前端，所以如何处理请求和响应是SpringMVC中非常重要的一块内容。</p>\n<h3>定义</h3>\n<ul>\n<li>\n<p>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</p>\n</li>\n<li>\n<p>优点</p>\n<ul>\n<li>使用简单、开发便捷(相比于Servlet)</li>\n<li>灵活性强</li>\n</ul>\n<p>这里所说的优点，就需要我们在使用的过程中慢慢体会。</p>\n</li>\n</ul>","y":"a","t":"😤 12.Spring"} }],
  ["/rear-end/JavaWeb/2-SpringBootBasis.html", { loader: () => import(/* webpackChunkName: "v-213fc20e" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/2-SpringBootBasis.html.js"), meta: {"g":["SpringBoot","JavaWeb"],"e":"<blockquote>\n<p>😉网站</p>\n<p>Spring官网:https://spring.io</p>\n</blockquote>\n<figure><img src=\"https://img.picgo.net/2023/11/17/Image-From-day04-SpringBootWeb3f4d3174641f5cbc.png\" alt=\"Image From day04-SpringBootWeb入门\" tabindex=\"0\" loading=\"lazy\"><figcaption>Image From day04-SpringBootWeb入门</figcaption></figure>","y":"a","t":"😤 2.SpringBoot基础"} }],
  ["/rear-end/JavaWeb/3-SpringBootWebRequestResponse.html", { loader: () => import(/* webpackChunkName: "v-7b252d40" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/3-SpringBootWebRequestResponse.html.js"), meta: {"g":["SpringBoot","JavaWeb"],"e":"<blockquote>\n<p>@RestController</p>\n<p>@RequestMapping(\"/simpleParam\")</p>\n<p>@RequestParam(\"name\")</p>\n<p>​\t@RequestParam(name = \"name\", required =false,defaultValue = \"1\") String username</p>\n<p>@DateTimeFormat(pattern = \"yyyy-MM-dd-HH:mm:ss\") LocalDateTime updateTime</p>\n<p>@RequestBody</p>\n<p>@PathVariable Integer id</p>\n</blockquote>","y":"a","t":"😤 3.SpringBootWeb 请求响应"} }],
  ["/rear-end/JavaWeb/4-MybatisIntroduction.html", { loader: () => import(/* webpackChunkName: "v-3c6ae9c9" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/4-MybatisIntroduction.html.js"), meta: {"g":["SpringBoot","JavaWeb","Mybatis"],"e":"<blockquote>\n<p>官网：https://mybatis.org/mybatis-3/zh/index.html</p>\n</blockquote>\n<h2>1. 快速入门</h2>\n<p>什么是MyBatis?</p>\n<ul>\n<li>\n<p>MyBatis是一款优秀的 <strong>持久层 框架</strong>，用于简化JDBC的开发。</p>\n</li>\n<li>\n<p>MyBatis本是 Apache的一个开源项目iBatis，2010年这个项目由apache迁移到了google</p>\n</li>\n<li>\n<p>code，并且改名为MyBatis 。2013年11月迁移到Github。</p>\n</li>\n<li>\n<p>官网：<strong>https://mybatis.org/mybatis-3/zh/index.html</strong></p>\n</li>\n</ul>","y":"a","t":"😤 4.Mybatis 入门"} }],
  ["/rear-end/JavaWeb/5-MybatisUse.html", { loader: () => import(/* webpackChunkName: "v-28c9c9a9" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/5-MybatisUse.html.js"), meta: {"g":["SpringBoot","JavaWeb","Mybatis"],"e":"<h2>1. 使用案例</h2>\n<h3>1. 接收简单参数</h3>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token annotation punctuation\">@Mapper</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EmpMapper</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 删除语句</span>\n  <span class=\"token annotation punctuation\">@Delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete from emp where id = #{id}\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//使用#{key}方式获取方法中的参数值</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","y":"a","t":"😤 5.Mybatis 使用"} }],
  ["/rear-end/JavaWeb/6-JWT.html", { loader: () => import(/* webpackChunkName: "v-1fe37f0d" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/6-JWT.html.js"), meta: {"g":["SpringBoot","JavaWeb","JWT"],"e":"<blockquote>\n<p>官网：<strong>https://jwt.io/</strong></p>\n</blockquote>\n<h2>1. JWT</h2>\n<h3>1. 1 介绍</h3>\n<ul>\n<li>定义了一种简洁的、自包含的格式，用于在通信双方以json数据格式安全的传输信息。由于数字签名的存在，这些信息是可靠的。</li>\n</ul>\n<p>JWT的组成： （JWT令牌由三个部分组成，三个部分之间使用英文的点来分割）</p>\n<ul>\n<li>\n<p>第一部分：Header(头）， 记录令牌类型、签名算法等。 例如：</p>\n<ul>\n<li alg:hs256,type:jwt=\"\"></li>\n</ul>\n</li>\n<li>\n<p>第二部分：Payload(有效载荷），携带一些自定义信息、默认信息等。 例如：</p>\n<ul>\n<li id:1,username:tom=\"\"></li>\n</ul>\n</li>\n<li>\n<p>第三部分：Signature(签名），防止Token被篡改、确保安全性。将header、payload，并加入指定秘钥，通过指定签名算法计算而来。</p>\n</li>\n</ul>","y":"a","t":"😤 6.JWT-springboot"} }],
  ["/rear-end/JavaWeb/7-AOP.html", { loader: () => import(/* webpackChunkName: "v-8185c05e" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/7-AOP.html.js"), meta: {"g":["SpringBoot","JavaWeb"],"e":"<h2>1. 事务管理</h2>\n<p>事务的操作主要有三步：</p>\n<ol>\n<li>\n<p>开启事务（一组操作开始前，开启事务）：start transaction / begin ;</p>\n</li>\n<li>\n<p>提交事务（这组操作全部成功后，提交事务）：commit ;</p>\n</li>\n<li>\n<p>回滚事务（中间任何一个操作出现异常，回滚事务）：rollback ;</p>\n</li>\n</ol>\n<h3>1.1 <strong>Spring</strong>事务管理</h3>\n<h4><strong>Transactional</strong>注解</h4>\n<blockquote>\n<p>@Transactional作用：就是在当前这个方法执行开始之前来开启事务，方法执行完毕之后提交事务。如果在这个方法执行的过程当中出现了异常，就会进行事务的回滚操作。</p>\n<p>@Transactional注解：我们一般会在业务层当中来控制事务，因为在业务层当中，一个业务功能可能会包含多个数据访问的操作。在业务层来控制事务，我们就可以将多个数据访问操作控制在一个事务范围内。</p>\n</blockquote>","y":"a","t":"😤 7.springboot-AOP"} }],
  ["/rear-end/JavaWeb/8-Swagger.html", { loader: () => import(/* webpackChunkName: "v-093c4de8" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/8-Swagger.html.js"), meta: {"g":["SpringBoot","JavaWeb","Swagger"],"e":"<h2>快速入门的使用</h2>\n<blockquote>\n<p>文档的地址是service 根路径 swagger-ui.html</p>\n</blockquote>\n<h3>依赖的引入</h3>\n<div class=\"language-xml\" data-ext=\"xml\" data-title=\"xml\"><pre class=\"language-xml\"><code><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>io.springfox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>springfox-swagger-ui<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.9.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>io.springfox<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>springfox-swagger2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">&gt;</span></span>2.9.2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>","y":"a","t":"😤 8. Swagger的使用"} }],
  ["/rear-end/JavaWeb/9-cross-domain.html", { loader: () => import(/* webpackChunkName: "v-01ba41b0" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/9-cross-domain.html.js"), meta: {"g":["SpringBoot","JavaWeb"],"e":"<h2>NGINX 配置</h2>\n<blockquote>\n<p>让服务器告诉浏览器：允许跨域（返回 cross-origin-allow 响应头）</p>\n</blockquote>\n<div class=\"language-nginx\" data-ext=\"nginx\" data-title=\"nginx\"><pre class=\"language-nginx\"><code><span class=\"token directive\"><span class=\"token keyword\">location</span> ^~ /api/</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token directive\"><span class=\"token keyword\">proxy_pass</span> http://127.0.0.1:8080/api/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Allow-Origin'</span> <span class=\"token variable\">$http_origin</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Allow-Credentials'</span> <span class=\"token string\">'true'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Methods <span class=\"token string\">'GET, POST, OPTIONS'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">add_header</span> Access-Control-Allow-Headers <span class=\"token string\">'*'</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token directive\"><span class=\"token keyword\">if</span> (<span class=\"token variable\">$request_method</span> = <span class=\"token string\">'OPTIONS'</span>)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Allow-Credentials'</span> <span class=\"token string\">'true'</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Allow-Origin'</span> <span class=\"token variable\">$http_origin</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Allow-Methods'</span> <span class=\"token string\">'GET, POST, OPTIONS'</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Allow-Headers'</span> <span class=\"token string\">'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Access-Control-Max-Age'</span> <span class=\"token number\">1728000</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Content-Type'</span> <span class=\"token string\">'text/plain; charset=utf-8'</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">add_header</span> <span class=\"token string\">'Content-Length'</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">;</span>\n        <span class=\"token directive\"><span class=\"token keyword\">return</span> <span class=\"token number\">204</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","y":"a","t":"😤 9.跨域解决"} }],
  ["/rear-end/JavaWeb/Collection.html", { loader: () => import(/* webpackChunkName: "v-be6aaed2" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/Collection.html.js"), meta: {"g":["SpringBoot","JavaWeb"],"u":98,"e":"<h2>1. 配置</h2>\n<div class=\"language-properties\" data-ext=\"properties\" data-title=\"properties\"><pre class=\"language-properties\"><code><span class=\"token comment\">#环境变量</span>\n<span class=\"token key attr-name\">springprofiles.active</span> <span class=\"token punctuation\">=</span> <span class=\"token value attr-value\">dev</span>\n\n\n<span class=\"token comment\">#mysql</span>\n\n<span class=\"token comment\">#驱动类名称</span>\n<span class=\"token key attr-name\">spring.datasource.driver-class-name</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"token comment\">#数据库连接的url</span>\n<span class=\"token key attr-name\">spring.datasource.url</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">jdbc:mysql://localhost:3306/mybatis</span>\n<span class=\"token comment\">#连接数据库的用户名</span>\n<span class=\"token key attr-name\">spring.datasource.username</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">root</span>\n<span class=\"token comment\">#连接数据库的密码</span>\n<span class=\"token key attr-name\">spring.datasource.password</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">1234</span>\n\n\n<span class=\"token comment\">#mybatis</span>\n\n<span class=\"token comment\">#指定mybatis输出日志的位置, 输出控制台</span>\n<span class=\"token key attr-name\">mybatis.configuration.log-impl</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">org.apache.ibatis.logging.stdout.StdOutImpl</span>\n<span class=\"token comment\"># 开启 mybatis 的驼峰命名</span>\n<span class=\"token key attr-name\">mybatis.configuration.map-underscore-to-camel-case</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">true</span>\n\n<span class=\"token comment\">#mybatis-plus</span>\n\n\n\n<span class=\"token comment\">#配置单个文件最大上传大小</span>\n<span class=\"token key attr-name\">spring.servlet.multipart.max-file-size</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">10MB</span>\n<span class=\"token comment\">#配置单个请求最大上传大小(一次请求可以上传多个文件)</span>\n<span class=\"token key attr-name\">spring.servlet.multipart.max-request-size</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">100MB</span>\n</code></pre></div>","y":"a","t":"😤 Javaweb 收集"} }],
  ["/rear-end/Java/1-IntroductionToFundamentals.html", { loader: () => import(/* webpackChunkName: "v-63e0ba94" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/1-IntroductionToFundamentals.html.js"), meta: {"g":["Java"],"e":"<h2>1. Java概述</h2>\n<h3>1.1 Java是什么？</h3>\n<p>语言：人与人交流沟通的表达方式</p>\n<p>计算机语言：人与计算机之间进行信息交流沟通的一种特殊语言</p>\n<p>Java是一门非常火的计算机语言。（也叫做编程语言）</p>\n<p>我们想要让计算机做一些事情，那么就可以通过Java语言告诉计算机就可以了</p>\n<h3>1.2 下载和安装</h3>\n<h4>1.2.1 下载</h4>\n<p>通过官方网站获取JDK</p>\n<p><a href=\"http://www.oracle.com/\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.oracle.com</a></p>","y":"a","t":"😢 1. Java基础入门"} }],
  ["/rear-end/Java/10-String.html", { loader: () => import(/* webpackChunkName: "v-2078f6a0" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/10-String.html.js"), meta: {"g":["Java"],"e":"<h2>1.API</h2>\n<h3>1.1API概述</h3>\n<ul>\n<li>\n<p>什么是API</p>\n<p>​\tAPI (Application Programming Interface) ：应用程序编程接口</p>\n</li>\n<li>\n<p>java中的API</p>\n<p>​\t指的就是 JDK 中提供的各种功能的 Java类，这些类将底层的实现封装了起来，我们不需要关心这些类是如何实现的，只需要学习这些类如何使用即可，我们可以通过帮助文档来学习这些API如何使用。</p>\n</li>\n</ul>\n<h2>2.String类</h2>\n<h3>2.1String类概述</h3>","y":"a","t":"😢 10.字符串"} }],
  ["/rear-end/Java/11-SetArrayList.html", { loader: () => import(/* webpackChunkName: "v-d74af6c6" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/11-SetArrayList.html.js"), meta: {"g":["Java"],"e":"<h2>1.ArrayList</h2>\n<h3>集合和数组的优势对比：</h3>\n<ol>\n<li>长度可变</li>\n<li>添加数据的时候不需要考虑索引，默认将数据添加到末尾</li>\n</ol>\n<h3>1.1 ArrayList类概述</h3>\n<ul>\n<li>\n<p>什么是集合</p>\n<p>​\t提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</p>\n</li>\n<li>\n<p>ArrayList集合的特点</p>\n<p>​\t长度可以变化，只能存储引用数据类型。</p>\n</li>\n<li>\n<p>泛型的使用</p>\n<p>​\t用于约束集合中存储元素的数据类型</p>\n</li>\n</ul>","y":"a","t":"😢 11.集合ArrayList"} }],
  ["/rear-end/Java/12-ObjectOrientedAdvancement(StaticInheritance).html", { loader: () => import(/* webpackChunkName: "v-185c081b" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/12-ObjectOrientedAdvancement(StaticInheritance).html.js"), meta: {"g":["Java"],"e":"<h2>1. 复习回顾</h2>\n<h3>1.1 如何定义类</h3>\n<p>类的定义格式如下:</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>修饰符 <span class=\"token keyword\">class</span> 类名 <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1.成员变量（属性）</span>\n    <span class=\"token comment\">// 2.成员方法 (行为) </span>\n    <span class=\"token comment\">// 3.构造方法 （初始化类的对象数据的）</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","y":"a","t":"😢 12.面向对象进阶(static 继承)"} }],
  ["/rear-end/Java/13-AdvancedObjectOriented(Polymorphic).html", { loader: () => import(/* webpackChunkName: "v-9d2e33f0" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/13-AdvancedObjectOriented(Polymorphic).html.js"), meta: {"g":["Java"],"e":"<h2>1. 多态</h2>\n<h3>1.1 多态的形式</h3>\n<p><strong>多态是继封装、继承之后，面向对象的第三大特性。</strong></p>\n<p><strong>多态是出现在继承或者实现关系中的</strong>。</p>\n<p><strong>多态体现的格式</strong>：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>父类类型 变量名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 子类<span class=\"token operator\">/</span>实现类构造器<span class=\"token punctuation\">;</span>\n变量名<span class=\"token punctuation\">.</span>方法名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","y":"a","t":"😢 13.面向对象进阶(多态)"} }],
  ["/rear-end/Java/14-AdvancedObjectOriented(Interface).html", { loader: () => import(/* webpackChunkName: "v-1be190ec" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/14-AdvancedObjectOriented(Interface).html.js"), meta: {"g":["Java"],"e":"<h2>1. 抽象类</h2>\n<h3>1.1 概述</h3>\n<h4>1.1.1 抽象类引入</h4>\n<p>​\t父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了(因为子类对象会调用自己重写的方法)。换句话说，父类可能知道子类应该有哪个功能，但是功能具体怎么实现父类是不清楚的（由子类自己决定），父类只需要提供一个没有方法体的定义即可，具体实现交给子类自己去实现。<strong>我们把没有方法体的方法称为抽象方法。Java语法规定，包含抽象方法的类就是抽象类</strong>。</p>\n<ul>\n<li><strong>抽象方法</strong> ： 没有方法体的方法。</li>\n<li><strong>抽象类</strong>：包含抽象方法的类。</li>\n</ul>","y":"a","t":"😢 14.面向对象进阶(接口)"} }],
  ["/rear-end/Java/15-ObjectOriented(ComprehensiveExercise1).html", { loader: () => import(/* webpackChunkName: "v-626ea252" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/15-ObjectOriented(ComprehensiveExercise1).html.js"), meta: {"g":["Java"],"e":"<h2>1. 设计游戏的目的</h2>\n<ul>\n<li>锻炼逻辑思维能力</li>\n<li>利用Java的图形化界面，写一个项目，知道前面学习的知识点在实际开发中的应用场景</li>\n</ul>\n<h2>2. 游戏的最终效果呈现</h2>\n<p>Hello，各位同学大家好。今天，我们要写一个非常有意思的小游戏 ---《拼图小游戏》\n我们先来看一下游戏的最终成品展示，然后再一步一步的从0开始，完成游戏里面每一个细节。\n游戏运行之后，就是这样的界面。</p>\n<p>刚开始打开，是登录页面，因为是第一次运行，需要注册。点击注册就会跳转到注册页面</p>\n<figure><img src=\"https://img.picgo.net/2023/11/06/image-2023110618165961229513e901e7a854c.png\" alt=\"image-20231106181659612\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20231106181659612</figcaption></figure>","y":"a","t":"😢 15.面向对象进阶(综合练习 1)"} }],
  ["/rear-end/Java/16-ObjectOriented(ComprehensiveExercise2).html", { loader: () => import(/* webpackChunkName: "v-c360a6ce" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/16-ObjectOriented(ComprehensiveExercise2).html.js"), meta: {"g":["Java"],"e":"<h2>1. 美化界面</h2>\n<p>界面搭建好之后，就需要美化界面了，本次需要美化下面四个地方：</p>\n<ol>\n<li>\n<p>将15张小图片移动到界面的中央偏下方</p>\n</li>\n<li>\n<p>添加背景图片</p>\n</li>\n<li>\n<p>添加图片的边框</p>\n</li>\n<li>\n<p>优化路径</p>\n</li>\n</ol>\n<h3>1.1 小图片居中</h3>\n<p>原本的小图片，都在左上角的位置，不好看，我想让他们居中，这样就需要给每一张图片在x和y都进行一个偏移即可。</p>\n<p>代码示例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//内循环 --- 表示在一行添加4张图片</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//获取当前要加载图片的序号</span>\n        <span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//创建一个JLabel的对象（管理容器）</span>\n        <span class=\"token class-name\">JLabel</span> jLabel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JLabel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageIcon</span><span class=\"token punctuation\">(</span>path <span class=\"token operator\">+</span> num <span class=\"token operator\">+</span> <span class=\"token string\">\".jpg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//指定图片位置，并进行适当的偏移</span>\n        jLabel<span class=\"token punctuation\">.</span><span class=\"token function\">setBounds</span><span class=\"token punctuation\">(</span><span class=\"token number\">105</span> <span class=\"token operator\">*</span> j <span class=\"token operator\">+</span> <span class=\"token number\">83</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> <span class=\"token number\">134</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//给图片添加边框</span>\n        <span class=\"token comment\">//0:表示让图片凸起来</span>\n        <span class=\"token comment\">//1：表示让图片凹下去</span>\n        jLabel<span class=\"token punctuation\">.</span><span class=\"token function\">setBorder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BevelBorder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BevelBorder</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOWERED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//把管理容器添加到界面中</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getContentPane</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>jLabel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","y":"a","t":"😢 16.面向对象进阶(综合练习 2)"} }],
  ["/rear-end/Java/17-CommonAPIs.html", { loader: () => import(/* webpackChunkName: "v-06e4e274" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/17-CommonAPIs.html.js"), meta: {"g":["Java"],"e":"\n<h2>1.1 概述</h2>\n<blockquote>\n<p>tips：了解内容</p>\n</blockquote>\n<p>查看API文档，我们可以看到API文档中关于Math类的定义如下：</p>\n<figure><img src=\"https://img.picgo.net/2023/11/06/image-20231106182557021f7531538a3f38105.png\" alt=\"image-20231106182557021\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20231106182557021</figcaption></figure>","y":"a","t":"😢 17.常用 API"} }],
  ["/rear-end/Java/18-RegularExpressions.html", { loader: () => import(/* webpackChunkName: "v-760983da" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/18-RegularExpressions.html.js"), meta: {"g":["Java"],"e":"\n<h2>1.1 正则表达式的概念及演示</h2>\n<ul>\n<li>在Java中，我们经常需要验证一些字符串，例如：年龄必须是2位的数字、用户名必须是8位长度而且只能包含大小写字母、数字等。正则表达式就是用来验证各种字符串的规则。它内部描述了一些规则，我们可以验证用户输入的字符串是否匹配这个规则。</li>\n<li>先看一个不使用正则表达式验证的例子：下面的程序让用户输入一个QQ号码，我们要验证：\n<ul>\n<li>QQ号码必须是5--15位长度</li>\n<li>而且必须全部是数字</li>\n<li>而且首位不能为0</li>\n</ul>\n</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>a08regexdemo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RegexDemo1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 假如现在要求校验一个qq号码是否正确。\n            规则:6位及20位之内，日不能在开头，必须全部是数字。\n            先使用目前所学知识完成校验需求然后体验一下正则表达式检验。\n        */</span>\n\n        <span class=\"token class-name\">String</span> qq <span class=\"token operator\">=</span><span class=\"token string\">\"1234567890\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token function\">checkQQ</span><span class=\"token punctuation\">(</span>qq<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>qq<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[1-9]\\\\d{5,19}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">checkQQ</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> qq<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//规则:6位及20位之内，日不能在开头，必须全部是数字 。</span>\n        <span class=\"token comment\">//核心思想:</span>\n        <span class=\"token comment\">//先把异常数据进行过滤</span>\n        <span class=\"token comment\">//下面的就是满足要求的数据了。</span>\n        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> qq<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span> <span class=\"token operator\">||</span> len <span class=\"token operator\">&gt;</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//0不能在开头</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>qq<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">//必须全部是数字</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> qq<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> qq<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">|</span> c <span class=\"token operator\">&gt;</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","y":"a","t":"😢 18.正则表达式"} }],
  ["/rear-end/Java/19-CommonAPIs(TimePackaging).html", { loader: () => import(/* webpackChunkName: "v-cb12eefe" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/19-CommonAPIs(TimePackaging).html.js"), meta: {"g":["Java"],"e":"\n<h2>1.1 Date概述</h2>\n<p>java.util.Date`类 表示特定的瞬间，精确到毫秒。</p>\n<p>继续查阅Date类的描述，发现Date拥有多个构造函数，只是部分已经过时，我们重点看以下两个构造函数</p>\n<ul>\n<li><code>public Date()</code>：从运行程序的此时此刻到时间原点经历的毫秒值,转换成Date对象，分配Date对象并初始化此对象，以表示分配它的时间（精确到毫秒）。</li>\n<li><code>public Date(long date)</code>：将指定参数的毫秒值date,转换成Date对象，分配Date对象并初始化此对象，以表示自从标准基准时间（称为“历元（epoch）”，即1970年1月1日00:00:00 GMT）以来的指定毫秒数。</li>\n</ul>","y":"a","t":"😢 19.常用 API(时间 包装类)"} }],
  ["/rear-end/Java/2-JavaBasicGrammar.html", { loader: () => import(/* webpackChunkName: "v-c68af7c6" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/2-JavaBasicGrammar.html.js"), meta: {"g":["Java"],"e":"<h2>1. 注释</h2>\n<p>​\t注释是对代码的解释和说明文字。</p>\n<p>Java中的注释分为三种：</p>\n<ul>\n<li>单行注释：</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">// 这是单行注释文字</span>\n</code></pre></div><ul>\n<li>多行注释：</li>\n</ul>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token comment\">/*\n这是多行注释文字\n这是多行注释文字\n这是多行注释文字\n*/</span>\n注意：多行注释不能嵌套使用。\n</code></pre></div>","y":"a","t":"😢 2. Java基础语法"} }],
  ["/rear-end/Java/20-Algorithm.html", { loader: () => import(/* webpackChunkName: "v-522eb993" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/20-Algorithm.html.js"), meta: {"g":["Java"],"e":"\n<p>​\t数据结构是数据存储的方式，算法是数据计算的方式。所以在开发中，算法和数据结构息息相关。今天的讲义中会涉及部分数据结构的专业名词，如果各位铁粉有疑惑，可以先看一下哥们后面录制的数据结构，再回头看算法。</p>\n<h2>1. 基本查找</h2>\n<p>​\t也叫做顺序查找</p>\n<p>​        说明：顺序查找适合于存储结构为数组或者链表。</p>\n<p><strong>基本思想</strong>：顺序查找也称为线形查找，属于无序查找算法。从数据结构线的一端开始，顺序扫描，依次将遍历到的结点与要查找的值相比较，若相等则表示查找成功；若遍历结束仍没有找到相同的，表示查找失败。</p>","y":"a","t":"😢 20.算法"} }],
  ["/rear-end/Java/21-Set01.html", { loader: () => import(/* webpackChunkName: "v-ec731304" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/21-Set01.html.js"), meta: {"g":["Java"],"e":"<h2>1.Collection集合</h2>\n<h3>1.1数组和集合的区别【理解】</h3>\n<ul>\n<li>\n<p>相同点</p>\n<p>都是容器,可以存储多个数据</p>\n</li>\n<li>\n<p>不同点</p>\n<ul>\n<li>\n<p>数组的长度是不可变的,集合的长度是可变的</p>\n</li>\n<li>\n<p>数组可以存基本数据类型和引用数据类型</p>\n<p>集合只能存引用数据类型,如果要存基本数据类型,需要存对应的包装类</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3>1.2集合类体系结构【理解】</h3>\n<figure><img src=\"https://img.picgo.net/2023/11/06/01_b2049fb450de998e.png\" alt=\"01_集合类体系结构图\" tabindex=\"0\" loading=\"lazy\"><figcaption>01_集合类体系结构图</figcaption></figure>","y":"a","t":"😢 21.集合 01"} }],
  ["/rear-end/Java/22-Set02.html", { loader: () => import(/* webpackChunkName: "v-d9a61708" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/22-Set02.html.js"), meta: {"g":["Java"],"e":"<h2>1.泛型</h2>\n<h3>1.1泛型概述</h3>\n<ul>\n<li>\n<p>泛型的介绍</p>\n<p>​\t泛型是JDK5中引入的特性，它提供了编译时类型安全检测机制</p>\n</li>\n<li>\n<p>泛型的好处</p>\n<ol>\n<li>把运行时期的问题提前到了编译期间</li>\n<li>避免了强制类型转换</li>\n</ol>\n</li>\n<li>\n<p>泛型的定义格式</p>\n<ul>\n<li><code>&lt;类型&gt;: 指定一种类型的格式.尖括号里面可以任意书写,一般只写一个字母.例如: &lt;E&gt; &lt;T&gt;</code></li>\n<li><code>&lt;类型1,类型2…&gt;: 指定多种类型的格式,多种类型之间用逗号隔开.例如: &lt;E,T&gt; &lt;K,V&gt;</code></li>\n</ul>\n</li>\n</ul>","y":"a","t":"😢 22.集合 02"} }],
  ["/rear-end/Java/23-Set03.html", { loader: () => import(/* webpackChunkName: "v-c6d91b0c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/23-Set03.html.js"), meta: {"g":["Java"],"e":"<h2>1.Map集合</h2>\n<h3>1.1Map集合概述和特点【理解】</h3>\n<ul>\n<li>\n<p>Map集合概述</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">V</span><span class=\"token punctuation\">&gt;</span></span>  <span class=\"token class-name\">K</span>：键的类型；<span class=\"token class-name\">V</span>：值的类型\n</code></pre></div></li>\n<li>\n<p>Map集合的特点</p>\n<ul>\n<li>双列集合,一个键对应一个值</li>\n<li>键不可以重复,值可以重复</li>\n</ul>\n</li>\n<li>\n<p>Map集合的基本使用</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MapDemo01</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//创建集合对象</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//V put(K key, V value) 将指定的值与该映射中的指定键相关联</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itheima001\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"林青霞\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itheima002\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"张曼玉\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itheima003\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"王祖贤\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"itheima003\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"柳岩\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//输出集合对象</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></li>\n</ul>","y":"a","t":"😢 23.集合 03"} }],
  ["/rear-end/Java/24-ThirdStageSynthesis(LandlordGame).html", { loader: () => import(/* webpackChunkName: "v-0a7e6f9c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/24-ThirdStageSynthesis(LandlordGame).html.js"), meta: {"g":["Java"],"e":"\n<p>在<strong>JDK1.5</strong>之后，如果我们定义一个方法需要接受多个参数，并且多个参数类型一致，我们可以对其简化.</p>\n<p><strong>格式：</strong></p>\n<div class=\"language-text\" data-ext=\"text\" data-title=\"text\"><pre class=\"language-text\"><code>修饰符 返回值类型 方法名(参数类型... 形参名){  }\n</code></pre></div><p><strong>底层：</strong></p>\n<p>​\t其实就是一个数组</p>\n<p><strong>好处：</strong></p>","y":"a","t":"😢 24.第三阶段综合练习(斗地主游戏)"} }],
  ["/rear-end/Java/25-StreamFlowAndMethodReferences.html", { loader: () => import(/* webpackChunkName: "v-07d77eaa" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/25-StreamFlowAndMethodReferences.html.js"), meta: {"g":["Java"],"e":"<h2>1.不可变集合</h2>\n<h3>1.1 什么是不可变集合</h3>\n<p>​\t是一个长度不可变，内容也无法修改的集合</p>\n<h3>1.2 使用场景</h3>\n<p>​\t如果某个数据不能被修改，把它防御性地拷贝到不可变集合中是个很好的实践。</p>\n<p>​\t当集合对象被不可信的库调用时，不可变形式是安全的。</p>\n<p>简单理解：</p>\n<p>​\t不想让别人修改集合中的内容</p>\n<p>比如说：</p>\n<p>1，斗地主的54张牌，是不能添加，不能删除，不能修改的</p>\n<p>2，斗地主的打牌规则：单张，对子，三张，顺子等，也是不能修改的</p>\n<p>3，用代码获取的操作系统硬件信息，也是不能被修改的</p>","y":"a","t":"😢 25.stream流和方法引用"} }],
  ["/rear-end/Java/26-%20IOStream(ByteStream_CharacterStream).html", { loader: () => import(/* webpackChunkName: "v-29a1b227" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/26- IOStream(ByteStream_CharacterStream).html.js"), meta: {"g":["Java"],"e":"\n<h2>1.1 什么是IO</h2>\n<p>生活中，你肯定经历过这样的场景。当你编辑一个文本文件，忘记了<code>ctrl+s</code> ，可能文件就白白编辑了。当你电脑上插入一个U盘，可以把一个视频，拷贝到你的电脑硬盘里。那么数据都是在哪些设备上的呢？键盘、内存、硬盘、外接设备等等。</p>\n<p>我们把这种数据的传输，可以看做是一种数据的流动，按照流动的方向，以内存为基准，分为<code>输入input</code> 和<code>输出output</code> ，即流向内存是输入流，流出内存的输出流。</p>\n<p>Java中I/O操作主要是指使用<code>java.io</code>包下的内容，进行输入、输出操作。<strong>输入</strong>也叫做<strong>读取</strong>数据，<strong>输出</strong>也叫做作<strong>写出</strong>数据。</p>","y":"a","t":"😢 26.IO流（字节流&字符流）"} }],
  ["/rear-end/Java/27-IOStream(OtherStreams).html", { loader: () => import(/* webpackChunkName: "v-7ac31293" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/27-IOStream(OtherStreams).html.js"), meta: {"g":["Java"],"e":"\n<p>昨天学习了基本的一些流，作为IO流的入门，今天我们要见识一些更强大的流。比如能够高效读写的缓冲流，能够转换编码的转换流，能够持久化存储对象的序列化流等等。这些功能更为强大的流，都是在基本的流对象基础之上创建而来的，就像穿上铠甲的武士一样，相当于是对基本流对象的一种增强。</p>\n<h2>1.1 概述</h2>\n<p>缓冲流,也叫高效流，是对4个基本的<code>FileXxx</code> 流的增强，所以也是4个流，按照数据类型分类：</p>\n<ul>\n<li><strong>字节缓冲流</strong>：<code>BufferedInputStream</code>，<code>BufferedOutputStream</code></li>\n<li><strong>字符缓冲流</strong>：<code>BufferedReader</code>，<code>BufferedWriter</code></li>\n</ul>","y":"a","t":"😢 27.IO流（其他流）"} }],
  ["/rear-end/Java/28-MultiThreading01.html", { loader: () => import(/* webpackChunkName: "v-1bc47058" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/28-MultiThreading01.html.js"), meta: {"g":["Java"],"e":"<h2>1.实现多线程</h2>\n<h3>1.1简单了解多线程【理解】</h3>\n<p>是指从软件或者硬件上实现多个线程并发执行的技术。\n具有多线程能力的计算机因有硬件支持而能够在同一时间执行多个线程，提升性能。</p>\n<figure><img src=\"https://img.picgo.net/2023/11/06/image-20231106195204646d111d04393be585f.png\" alt=\"image-20231106195204646\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20231106195204646</figcaption></figure>","y":"a","t":"😢 28.多线程01"} }],
  ["/rear-end/Java/29-MultiThreading02.html", { loader: () => import(/* webpackChunkName: "v-67aae238" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/29-MultiThreading02.html.js"), meta: {"g":["Java"],"e":"<h2>1. 线程池</h2>\n<h3>1.1 线程状态介绍</h3>\n<p>当线程被创建并启动以后，它既不是一启动就进入了执行状态，也不是一直处于执行状态。线程对象在不同的时期有不同的状态。那么Java中的线程存在哪几种状态呢？Java中的线程</p>\n<p>状态被定义在了java.lang.Thread.State枚举类中，State枚举类的源码如下：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n    \n        <span class=\"token comment\">/* 新建 */</span>\n        <span class=\"token constant\">NEW</span> <span class=\"token punctuation\">,</span> \n\n        <span class=\"token comment\">/* 可运行状态 */</span>\n        <span class=\"token constant\">RUNNABLE</span> <span class=\"token punctuation\">,</span> \n\n        <span class=\"token comment\">/* 阻塞状态 */</span>\n        <span class=\"token constant\">BLOCKED</span> <span class=\"token punctuation\">,</span> \n\n        <span class=\"token comment\">/* 无限等待状态 */</span>\n        <span class=\"token constant\">WAITING</span> <span class=\"token punctuation\">,</span> \n\n        <span class=\"token comment\">/* 计时等待 */</span>\n        <span class=\"token constant\">TIMED_WAITING</span> <span class=\"token punctuation\">,</span> \n\n        <span class=\"token comment\">/* 终止 */</span>\n        <span class=\"token constant\">TERMINATED</span><span class=\"token punctuation\">;</span>\n    \n\t<span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 获取当前线程的状态</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">State</span> <span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> jdk<span class=\"token punctuation\">.</span>internal<span class=\"token punctuation\">.</span>misc<span class=\"token punctuation\">.</span><span class=\"token constant\">VM</span><span class=\"token punctuation\">.</span><span class=\"token function\">toThreadState</span><span class=\"token punctuation\">(</span>threadStatus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n<span class=\"token punctuation\">}</span>\n</code></pre></div>","y":"a","t":"😢 29.多线程02"} }],
  ["/rear-end/Java/3-Operator.html", { loader: () => import(/* webpackChunkName: "v-95e87d96" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/3-Operator.html.js"), meta: {"g":["Java"],"e":"<h2>1.运算符和表达式</h2>\n<h3>1.1 运算符：</h3>\n<p>​\t就是对常量或者变量进行操作的符号。</p>\n<p>​\t比如： +  -  *  /</p>\n<h3>1.2 表达式：</h3>\n<p>​\t用运算符把常量或者变量连接起来的，符合Java语法的式子就是表达式。</p>\n<p>​\t比如：a + b 这个整体就是表达式。</p>\n<p>​\t而其中+是算术运算符的一种，所以这个表达式也称之为算术表达式。</p>\n<h2>2.算术运算符</h2>\n<p>分类：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token operator\">+</span> <span class=\"token operator\">-</span> <span class=\"token operator\">*</span> <span class=\"token operator\">/</span> <span class=\"token operator\">%</span>\n</code></pre></div>","y":"a","t":"😢 3. Java运算符"} }],
  ["/rear-end/Java/30-NetworkProgramming.html", { loader: () => import(/* webpackChunkName: "v-58af4764" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/30-NetworkProgramming.html.js"), meta: {"g":["Java"],"e":"<h2>1. 网络编程入门</h2>\n<h3>1.1 网络编程概述</h3>\n<ul>\n<li>\n<p>计算机网络</p>\n<p>是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传递的计算机系统</p>\n</li>\n<li>\n<p>网络编程</p>\n<p>在网络通信协议下，不同计算机上运行的程序，可以进行数据传输</p>\n</li>\n</ul>\n<h3>1.2 网络编程三要素</h3>\n<ul>\n<li>\n<p>IP地址</p>\n<p>要想让网络中的计算机能够互相通信，必须为每台计算机指定一个标识号，通过这个标识号来指定要接收数据的计算机和识别发送的计算机，而IP地址就是这个标识号。也就是设备的标识</p>\n</li>\n<li>\n<p>端口</p>\n<p>网络的通信，本质上是两个应用程序的通信。每台计算机都有很多的应用程序，那么在网络通信时，如何区分这些应用程序呢？如果说IP地址可以唯一标识网络中的设备，那么端口号就可以唯一标识设备中的应用程序了。也就是应用程序的标识</p>\n</li>\n<li>\n<p>协议</p>\n<p>通过计算机网络可以使多台计算机实现连接，位于同一个网络中的计算机在进行连接和通信时需要遵守一定的规则，这就好比在道路中行驶的汽车一定要遵守交通规则一样。在计算机网络中，这些连接和通信的规则被称为网络通信协议，它对数据的传输格式、传输速率、传输步骤等做了统一规定，通信双方必须同时遵守才能完成数据交换。常见的协议有UDP协议和TCP协议</p>\n</li>\n</ul>","y":"a","t":"😢 30.网络编程"} }],
  ["/rear-end/Java/31-ReflectionDynamicProxy.html", { loader: () => import(/* webpackChunkName: "v-553152d6" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/31-ReflectionDynamicProxy.html.js"), meta: {"g":["Java"],"e":"\n<h2>1.1 反射的概述：</h2>\n<p>​\t<strong>专业的解释（了解一下）：</strong></p>\n<p>​       是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；</p>\n<p>​       对于任意一个对象，都能够调用它的任意属性和方法；</p>\n<p>​       这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</p>\n<p>​\t<strong>通俗的理解：（掌握）</strong></p>\n<ul>\n<li>\n<p>利用<strong>反射</strong>创建的对象<strong>可以无视修饰符</strong>调用类里面的内容</p>\n</li>\n<li>\n<p>可以跟<strong>配置文件结合起来使用</strong>，把要创建的对象信息和方法写在配置文件中。</p>\n<p>读取到什么类，就创建什么类的对象</p>\n<p>读取到什么方法，就调用什么方法</p>\n<p>此时当需求变更的时候不需要修改代码，只要修改配置文件即可。</p>\n</li>\n</ul>","y":"a","t":"😢 31.反射动态代理"} }],
  ["/rear-end/Java/32-IO(Exception_File_ComprehensiveCase).html", { loader: () => import(/* webpackChunkName: "v-2b67df1b" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/32-IO(Exception_File_ComprehensiveCase).html.js"), meta: {"g":["Java"],"e":"\n<h2>1.1 异常概念</h2>\n<p>异常，就是不正常的意思。在生活中:医生说,你的身体某个部位有异常,该部位和正常相比有点不同,该部位的功能将受影响.在程序中的意思就是：</p>\n<ul>\n<li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常的情况，最终会导致JVM的非正常停止。</li>\n</ul>\n<p>在Java等面向对象的编程语言中，异常本身是一个类，产生异常就是创建异常对象并抛出了一个异常对象。Java处理异常的方式是中断处理。</p>\n<blockquote>\n<p>异常指的并不是语法错误,语法错了,编译不通过,不会产生字节码文件,根本不能运行.</p>\n</blockquote>","y":"a","t":"😢 32.IO(异常&File&综合案例）"} }],
  ["/rear-end/Java/4-FlowControlStatement.html", { loader: () => import(/* webpackChunkName: "v-3b6a5a3a" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/4-FlowControlStatement.html.js"), meta: {"g":["Java"],"e":"<h2>1. 流程控制语句</h2>\n<p>在一个程序执行的过程中，各条语句的执行顺序对程序的结果是有直接影响的。所以，我们必须清楚每条语句的执行流程。而且，很多时候要通过控制语句的执行顺序来实现我们想要的功能。</p>\n<h3>1.1 流程控制语句分类</h3>\n<p>​\t顺序结构</p>\n<p>​\t判断和选择结构(if, switch)</p>\n<p>​\t循环结构(for, while, do…while)</p>\n<h3>1.2 顺序结构</h3>\n<p>顺序结构是程序中最简单最基本的流程控制，没有特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的。</p>\n","y":"a","t":"😢 4.流程控制语句"} }],
  ["/rear-end/Java/5-Array.html", { loader: () => import(/* webpackChunkName: "v-f2665344" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/5-Array.html.js"), meta: {"g":["Java"],"e":"<h2>1.数组</h2>\n<h3>1.1 概念：</h3>\n<p>​\t指的是一种容器，可以同来存储同种数据类型的多个值。</p>\n<p>​\t但是数组容器在存储数据的时候，需要结合隐式转换考虑。</p>\n<p>比如：</p>\n<p>​\t定义了一个int类型的数组。那么boolean。double类型的数据是不能存到这个数组中的，</p>\n<p>​\t但是byte类型，short类型，int类型的数据是可以存到这个数组里面的。</p>\n<p>建议：</p>\n<p>​\t容器的类，和存储的数据类型保持一致。</p>\n<p>举例：</p>\n<p>​\t整数1 2 3 4 56 就可以使用int类型的数组来存储。</p>","y":"a","t":"😢 5.数组"} }],
  ["/rear-end/Java/6-Function.html", { loader: () => import(/* webpackChunkName: "v-1468d578" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/6-Function.html.js"), meta: {"g":["Java"],"e":"<h2>1. 方法概述</h2>\n<h3>1.1 方法的概念</h3>\n<p>​\t方法（method）是程序中最小的执行单元</p>\n<ul>\n<li>注意：\n<ul>\n<li>方法必须先创建才可以使用，该过程成为方法定义</li>\n<li>方法创建后并不是直接可以运行的，需要手动使用后，才执行，该过程成为方法调用</li>\n</ul>\n</li>\n</ul>\n<h2>2. 方法的定义和调用</h2>\n<h3>2.1 无参数方法定义和调用</h3>\n<ul>\n<li>\n<p>定义格式：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> 方法名 <span class=\"token punctuation\">(</span>   <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 方法体;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></li>\n<li>\n<p>范例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> method <span class=\"token punctuation\">(</span>    <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 方法体;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div></li>\n<li>\n<p>调用格式：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code>方法名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div></li>\n<li>\n<p>范例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div></li>\n<li>\n<p>注意：</p>\n<p>​\t方法必须先定义，后调用，否则程序将报错</p>\n</li>\n</ul>","y":"a","t":"😢 6.方法"} }],
  ["/rear-end/Java/7-Phase-1-ComprehensiveExercise.html", { loader: () => import(/* webpackChunkName: "v-bb85f552" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/7-Phase-1-ComprehensiveExercise.html.js"), meta: {"g":["Java"],"e":"<h2>练习一：飞机票</h2>\n<p>需求:</p>\n<p>​\t机票价格按照淡季旺季、头等舱和经济舱收费、输入机票原价、月份和头等舱或经济舱。</p>\n<p>​\t按照如下规则计算机票价格：旺季（5-10月）头等舱9折，经济舱8.5折，淡季（11月到来年4月）头等舱7折，经济舱6.5折。</p>\n<p>代码示例：</p>\n<div class=\"language-java\" data-ext=\"java\" data-title=\"java\"><pre class=\"language-java\"><code><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>itheima<span class=\"token punctuation\">.</span>test</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test1</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 机票价格按照淡季旺季、头等舱和经济舱收费、输入机票原价、月份和头等舱或经济舱。\n        按照如下规则计算机票价格：旺季（5-10月）头等舱9折，经济舱8.5折，淡季（11月到来年4月）头等舱7折，经济舱6.5折。*/</span>\n\n        <span class=\"token comment\">//分析：</span>\n        <span class=\"token comment\">//1.键盘录入机票原价、月份、头等舱或经济舱</span>\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入机票的原价\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ticket <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入当前的月份\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"请输入当前购买的舱位 0 头等舱 1 经济舱\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> seat <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//2.先判断月份是旺季还是淡季</span>\n        <span class=\"token comment\">//ctrl + alt + M 自动抽取方法</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>month <span class=\"token operator\">&gt;=</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> month <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//旺季 //3.继续判断当前机票是经济舱还是头等舱</span>\n            <span class=\"token comment\">//ticket = getPrice(ticket, seat, 0.9, 0.85);</span>\n            ticket <span class=\"token operator\">=</span> <span class=\"token function\">getTicket</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">,</span> seat<span class=\"token punctuation\">,</span> <span class=\"token number\">0.9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.85</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>month <span class=\"token operator\">&gt;=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> month <span class=\"token operator\">&lt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>month <span class=\"token operator\">&gt;=</span> <span class=\"token number\">11</span> <span class=\"token operator\">&amp;&amp;</span> month <span class=\"token operator\">&lt;=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//淡季</span>\n            <span class=\"token comment\">//ticket = getPrice(ticket, seat, 0.7, 0.65);</span>\n            ticket <span class=\"token operator\">=</span> <span class=\"token function\">getTicket</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">,</span> seat<span class=\"token punctuation\">,</span> <span class=\"token number\">0.7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.65</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//表示键盘录入的月份是一个非法数据</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"键盘录入的月份不合法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>ticket<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getTicket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> ticket<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> seat<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> v2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seat <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//头等舱</span>\n            ticket <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ticket <span class=\"token operator\">*</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seat <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//经济舱</span>\n            ticket <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ticket <span class=\"token operator\">*</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"没有这个舱位\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> ticket<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//1.我要干嘛？根据舱位和折扣来计算最终的票价</span>\n    <span class=\"token comment\">//2.我干这件事，需要什么才能完成？原价 舱位 头等舱的折扣 经济舱的折扣</span>\n    <span class=\"token comment\">//3.方法的调用处是否需要继续使用这个结果  需要</span>\n    <span class=\"token comment\">/*  public static int getPrice(int ticket, int seat, double v0, double v1) {\n        if (seat == 0) {\n            //头等舱\n            ticket = (int) (ticket * v0);\n        } else if (seat == 1) {\n            //经济舱\n            ticket = (int) (ticket * v1);\n        } else {\n            System.out.println(\"没有这个舱位\");\n        }\n        return ticket;\n    }*/</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","y":"a","t":"😢 7.第一阶段综合练习"} }],
  ["/rear-end/Java/8-ObjectOriented.html", { loader: () => import(/* webpackChunkName: "v-d648ee8a" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/8-ObjectOriented.html.js"), meta: {"g":["Java"],"e":"<h2>1. 类和对象</h2>\n<h3>1.1 类和对象的理解</h3>\n<p>客观存在的事物皆为对象 ，所以我们也常常说万物皆对象。</p>\n<ul>\n<li>类\n<ul>\n<li>类的理解\n<ul>\n<li>类是对现实生活中一类具有共同属性和行为的事物的抽象</li>\n<li>类是对象的数据类型，类是具有相同属性和行为的一组对象的集合</li>\n<li>简单理解：类就是对现实事物的一种描述</li>\n</ul>\n</li>\n<li>类的组成\n<ul>\n<li>属性：指事物的特征，例如：手机事物（品牌，价格，尺寸）</li>\n<li>行为：指事物能执行的操作，例如：手机事物（打电话，发短信）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>类和对象的关系\n<ul>\n<li>类：类是对现实生活中一类具有共同属性和行为的事物的抽象</li>\n<li>对象：是能够看得到摸的着的真实存在的实体</li>\n<li>简单理解：<strong>类是对事物的一种描述，对象则为具体存在的事物</strong></li>\n</ul>\n</li>\n</ul>","y":"a","t":"😢 8.面向对象"} }],
  ["/rear-end/Java/9-Phase-2-ObjectOrientedPractice.html", { loader: () => import(/* webpackChunkName: "v-216e40b4" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/9-Phase-2-ObjectOrientedPractice.html.js"), meta: {"g":["Java"],"e":"<h2>练习一：文字版格斗游戏</h2>\n<p>需求:</p>\n<p>​\t格斗游戏，每个游戏角色的姓名，血量，都不相同，在选定人物的时候（new对象的时候），这些信息就应该被确定下来。</p>\n<p>举例：</p>\n<p>​\t程序运行之后结果为：</p>\n<p>​\t姓名为:乔峰\t\t血量为:100</p>\n<p>​\t姓名为:鸠摩智\t血量为:100</p>\n<p>​\t乔峰举起拳头打了鸠摩智一下，造成了XX点伤害，鸠摩智还剩下XXX点血。</p>\n<p>​\t鸠摩智举起拳头打了鸠摩智一下，造成了XX点伤害，乔峰还剩下XXX点血。</p>\n<p>​\t乔峰举起拳头打了鸠摩智一下，造成了XX点伤害，鸠摩智还剩下XXX点血。</p>","y":"a","t":"😢 9.面向对象练习"} }],
  ["/rear-end/Java/JavaSummarize.html", { loader: () => import(/* webpackChunkName: "v-0be73e20" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/JavaSummarize.html.js"), meta: {"g":["Java"],"u":true,"e":"<h2>1. Java 的三大平台</h2>\n<p>​\tJavaSE、JavaME、JavaEE</p>\n<p>​\tJavaSE、JavaME、JavaEE</p>\n<h3>1.1 JavaSE</h3>\n<p>​\t是其他两个版本的基础。</p>\n<h3>1.2 JavaME</h3>\n<p>​\tJava语言的小型版，用于嵌入式消费类电子设备或者小型移动设备的开发。</p>\n<p>​\t其中最为主要的还是小型移动设备的开发（手机）。渐渐的没落了，已经被安卓和IOS给替代了。</p>\n<p>​\t但是，安卓也是可以用Java来开发的。</p>\n<h3>1.3 JavaEE</h3>\n<p>​\t用于Web方向的网站开发。（主要从事后台服务器的开发）</p>","y":"a","t":"😢 Java 总结"} }],
  ["/server/Docker/", { loader: () => import(/* webpackChunkName: "v-d98b26c0" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/Docker/index.html.js"), meta: {"e":"<h2>Linux 安装 docker CentOS</h2>\n<h3>卸载旧版本</h3>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>yum remove <span class=\"token function\">docker</span> <span class=\"token punctuation\">\\</span>\n    docker-client <span class=\"token punctuation\">\\</span>\n    docker-client-latest <span class=\"token punctuation\">\\</span>\n    docker-common <span class=\"token punctuation\">\\</span>\n    docker-latest <span class=\"token punctuation\">\\</span>\n    docker-latest-logrotate <span class=\"token punctuation\">\\</span>\n    docker-logrotate <span class=\"token punctuation\">\\</span>\n    docker-engine\n</code></pre></div>","y":"a","t":"Docker"} }],
  ["/server/NGINX/", { loader: () => import(/* webpackChunkName: "v-a1bdfcdc" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/NGINX/index.html.js"), meta: {"g":["NGINX","封装"],"e":"<figure><img src=\"https://www.nginx.com/wp-content/uploads/2021/08/NGINX-Part-of-F5-horiz-black-type-1.svg\" alt=\"NGINX\" tabindex=\"0\" loading=\"lazy\"><figcaption>NGINX</figcaption></figure>\n<h1>NGINX</h1>\n<h2>下载安装</h2>\n<p>移centos 为例</p>\n<ol>\n<li>更新系统软件包列表：</li>\n</ol>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>yum update\n</code></pre></div>","y":"a","t":"🪤 NGINX 使用教程"} }],
  ["/server/mysql/1-install.html", { loader: () => import(/* webpackChunkName: "v-17e90edd" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/mysql/1-install.html.js"), meta: {"g":["Java"],"u":98,"e":"<h2>1. MacOS 版本的安装</h2>\n<h3>1.1 下载地址</h3>\n<blockquote>\n<p>选择对应的版本下载即可</p>\n</blockquote>\n<p><a href=\"https://dev.mysql.com/downloads/mysql/\" target=\"_blank\" rel=\"noopener noreferrer\">MacOS 下载地址</a></p>\n<h3>1.2 解决无法启动MySQL问题</h3>\n<ol>\n<li>\n<p>打开设置中的mysql图标，发现红点，点击\"Start MySQL Server\"后，变绿后秒变红，无法启动。</p>\n</li>\n<li>\n<p>![image-20231111030503079](/Users/zeroeldath/Library/Application Support/typora-user-images/image-20231111030503079.png)</p>\n</li>\n<li>\n<p>进入configuration，找到Error log的位置，尝试打开。</p>\n</li>\n<li>\n<p>报错：无法打开data文件夹，权限不够。重新授权：</p>\n</li>\n</ol>","y":"a","t":"🧐 1. MySql 的安装"} }],
  ["/server/mysql/2-database-concept.html", { loader: () => import(/* webpackChunkName: "v-d285a036" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/mysql/2-database-concept.html.js"), meta: {"g":["MySql"],"e":"<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>全程</th>\n<th>简称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据库</td>\n<td>存储数据的仓库，数据是有组织的进行存储</td>\n<td>DataBase（DB）</td>\n</tr>\n<tr>\n<td>数据库管理系统</td>\n<td>操纵和管理数据库的大型软件</td>\n<td>DataBase Management System (DBMS)</td>\n</tr>\n<tr>\n<td>SQL</td>\n<td>操作关系型数据库的编程语言，定义了一套操作</td>\n<td>Structured Query<br>Language (SQL)</td>\n</tr>\n</tbody>\n</table>","y":"a","t":"🧐 2. 数据库的概念"} }],
  ["/server/mysql/3-SQL-statement.html", { loader: () => import(/* webpackChunkName: "v-45dacb06" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/mysql/3-SQL-statement.html.js"), meta: {"g":["MySql"],"e":"<h2>1. DDL</h2>\n<p>Data Definition Language，数据定义语言，用来定义数据库对象(数据库，表，字段) 。</p>\n<h3>1.1 数据库操作</h3>\n<ol>\n<li>查询所有数据库</li>\n</ol>\n<div class=\"language-sql\" data-ext=\"sql\" data-title=\"sql\"><pre class=\"language-sql\"><code><span class=\"token keyword\">show</span> <span class=\"token keyword\">databases</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","y":"a","t":"🧐 3. SQL 语句"} }],
  ["/server/mysql/4-advanced-database.html", { loader: () => import(/* webpackChunkName: "v-2d120e6f" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/mysql/4-advanced-database.html.js"), meta: {"g":["MySql"],"e":"<h2>1. 存储引擎</h2>\n<h3>1.1 MySQL体系结构</h3>\n<figure><img src=\"https://img.picgo.net/2023/11/16/image-20231116223111923d8a0e8f70b3e742a.png\" alt=\"image-20231116223111923\" tabindex=\"0\" loading=\"lazy\"><figcaption>image-20231116223111923</figcaption></figure>\n<ol>\n<li>连接层</li>\n</ol>\n<p>最上层是一些客户端和链接服务，包含本地sock 通信和大多数基于客户端/服务端工具实现的类似于TCP/IP的通信。主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。</p>","y":"a","t":"🧐 4. 数据库进阶"} }],
  ["/server/node/node%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6.html", { loader: () => import(/* webpackChunkName: "v-60547b1f" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/node/node 版本控制.html.js"), meta: {"g":["node","nvm"],"e":"\n<h2>下载安装</h2>\n<p><a href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener noreferrer\">NVM Window github 地址如下</a></p>\n<p><a href=\"https://github.com/nvm-sh/nvm?tab=readme-ov-file#installing-and-updating\" target=\"_blank\" rel=\"noopener noreferrer\">其他系统的下载地址</a></p>\n<p>选择合适的系统版本下载</p>","y":"a","t":"🥹 node 版本控制"} }],
  ["/server/window/terminal.html", { loader: () => import(/* webpackChunkName: "v-786044d8" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/window/terminal.html.js"), meta: {"g":["图床"],"e":"<h2>Hyper</h2>\n<h2>安装Linux子系统</h2>\n<h3>安装</h3>\n<p>window 搜索功打开虚拟和Linux</p>\n<p>命令行终端安装Ubuntu</p>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code>wsl --set-default-version <span class=\"token number\">2</span>\n\nwsl <span class=\"token parameter variable\">-l</span> <span class=\"token parameter variable\">-o</span>\n\nwsl.exe <span class=\"token parameter variable\">--install</span> Ubuntu-22.04\n\n</code></pre></div>","y":"a","t":"😤 window 终端 + Linux 子系统"} }],
  ["/web/Echarts/", { loader: () => import(/* webpackChunkName: "v-7cea01ad" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Echarts/index.html.js"), meta: {"g":["前端","Echarts"],"e":"<figure><img src=\"https://echarts.apache.org/zh/images/logo.png?_v_=20200710_1\" alt=\"echart.png\" tabindex=\"0\" loading=\"lazy\"><figcaption>echart.png</figcaption></figure>\n<p><a href=\"https://echarts.apache.org/handbook/en/get-started\" target=\"_blank\" rel=\"noopener noreferrer\">Echarts官网地址</a></p>\n<h1>Get Start</h1>","y":"a","t":"🔨 Echarts 基本教程"} }],
  ["/web/FFmpeg/", { loader: () => import(/* webpackChunkName: "v-cab055c0" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/FFmpeg/index.html.js"), meta: {"g":["React","ffmpeg","video","前端"],"e":"<p>基于React项目使用</p>\n<h1><strong>安装ffmpeg.wasm</strong></h1>\n<div class=\"language-Shell\" data-ext=\"Shell\" data-title=\"Shell\"><pre class=\"language-Shell\"><code>$ npm install @ffmpeg/ffmpeg\n# or\n$ yarn add @ffmpeg/ffmpeg\n</code></pre></div><p>要在 node 环境中使用 ffmpeg.wasm，还需要安装</p>\n<div class=\"language-Shell\" data-ext=\"Shell\" data-title=\"Shell\"><pre class=\"language-Shell\"><code>$ npm install @ffmpeg/core\n# or\n$ yarn add @ffmpeg/core\n</code></pre></div>","y":"a","t":"😤 ffmpeg 基本入门教程"} }],
  ["/web/GoogleDrive/", { loader: () => import(/* webpackChunkName: "v-6957fa14" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/GoogleDrive/index.html.js"), meta: {"g":["Google Drive","前端"],"e":"\n<h2>目录</h2>\n<ul>\n<li><a href=\"#%E5%BC%80%E5%A7%8B%E7%9A%84%E4%BA%94%E4%B8%AA%E6%AD%A5%E9%AA%A4\">开始的五个步骤</a></li>\n</ul>\n<p><a href=\"#%E9%80%9A%E8%BF%87api%E8%B0%83%E7%94%A8\">通过API调用</a></p>\n<p><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\">初始化</a><br>\n<a href=\"#%E5%88%A0%E9%99%A4%E7%BD%91%E7%9B%98%E6%96%87%E4%BB%B6\">删除网盘文件</a><br>\n<a href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0\">文件上传</a><br>\n<a href=\"#%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD\">文件下载</a></p>","y":"a","t":"😤 Google Drive 使用快速入门"} }],
  ["/web/QrCode/", { loader: () => import(/* webpackChunkName: "v-3942f7f7" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/QrCode/index.html.js"), meta: {"g":["QrCode","React","前端"],"e":"\n<h2>目录</h2>\n<ul>\n<li>\n<p><a href=\"#qrcode%E5%89%8D%E7%AB%AF\">QRcode→前端</a></p>\n<ul>\n<li>\n<p><a href=\"#-%E7%89%88%E6%9C%AC%E7%BA%AA%E5%BD%95\"> 版本纪录</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E4%B8%8E%E7%8E%AF%E5%A2%83\">开发工具与环境</a></p>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E8%BF%90%E8%A1%8C\">项目运行</a></p>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E6%A0%B8%E5%BF%83%E4%BE%9D%E8%B5%96%E5%8C%85\">项目核心依赖包</a></p>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E8%A7%84%E8%8C%83\">项目规范</a></p>\n<ul>\n<li>\n<p><a href=\"#%E5%91%BD%E5%90%8D%E7%9A%84%E8%A7%84%E5%88%99\">命名的规则</a></p>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%93%E6%9E%84\">项目的结构</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%B7%A5%E7%A8%8B%E6%96%87%E4%BB%B6%E4%B9%A6%E5%86%99%E6%A0%BC%E5%BC%8F\">工程文件书写格式</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E6%A0%B8%E5%BF%83%E5%BA%93%E7%9A%84%E4%BB%8B%E7%BB%8D\">项目核心库的介绍</a></p>\n<ul>\n<li>\n<p><a href=\"#%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%BA%93-react-qrbtf\">二维码生成库 react-qrbtf</a></p>\n<ul>\n<li>\n<p><a href=\"#%E7%9B%B4%E6%8E%A5%E8%B0%83%E7%94%A8%E6%8F%90%E4%BE%9B%E7%9A%84-api\">直接调用提供的 API</a></p>\n</li>\n<li>\n<p><a href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A0%B7%E5%BC%8F\">自定义样式</a></p>\n</li>\n<li>\n<p><a href=\"#qe-%E7%A0%81%E7%AC%A6%E5%8F%B7%E7%9A%84%E7%BB%93%E6%9E%84\">QE 码符号的结构</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BB%8B%E7%BB%8D\">项目核心模块的介绍</a></p>\n<ul>\n<li>\n<p><a href=\"#%E5%85%A8%E5%B1%80-theme-%E8%AE%BE%E7%BD%AE\">全局 Theme 设置</a></p>\n<ul>\n<li>\n<p><a href=\"#%E8%B0%83%E8%89%B2%E6%9D%BF%E8%AE%BE%E7%BD%AE\">调色板设置</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2%E6%96%AD%E7%82%B9%E8%AE%BE%E7%BD%AE\">媒体查询断点设置</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%85%A8%E5%B1%80-font-%E8%AE%BE%E7%BD%AE\">全局 Font 设置</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%BF%AE%E6%94%B9mui%E7%BB%84%E4%BB%B6%E7%9A%84%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F\">修改MUI组件的默认样式</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%85%A8%E5%B1%80-context-%E7%9A%84%E4%BD%BF%E7%94%A8\">全局 Context 的使用</a></p>\n</li>\n<li>\n<p><a href=\"#uselocalstorage\">useLocalStorage</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%B0%86%E7%8A%B6%E6%80%81%E5%AD%98%E5%82%A8%E8%87%B3%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E4%B8%AD\">将状态存储至本地存储中</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%B0%86%E7%8A%B6%E6%80%81%E4%BD%BF%E7%94%A8usestate%E5%AD%98%E5%82%A8\">将状态使用useState存储</a></p>\n</li>\n<li>\n<p><a href=\"#%E5%8F%96%E5%87%BA%E6%83%B3%E8%A6%81%E4%BD%BF%E7%94%A8%E7%9A%84%E5%85%A8%E5%B1%80%E7%8A%B6%E6%80%81\">取出想要使用的全局状态</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%A1%B5%E9%9D%A2%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC\">页面路由跳转</a></p>\n<ul>\n<li>\n<p><a href=\"#%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1%E8%A1%A8\">配置路由表</a></p>\n</li>\n<li>\n<p><a href=\"#%E9%80%9A%E8%BF%87%E7%82%B9%E5%87%BB%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC\">通过点击实现路由跳转</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E6%B5%81%E7%A8%8B\">二维码生成流程</a></p>\n<ul>\n<li>\n<p><a href=\"#%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90%E5%BA%93%E7%9A%84%E5%B0%81%E8%A3%85\">二维码生成库的封装</a></p>\n<ul>\n<li>\n<p><a href=\"#codegenerationinterfacejsx\">CodeGenerationInterface.jsx</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%A0%B7%E5%BC%8F%E4%B8%8Etype%E7%9A%84%E5%8C%B9%E9%85%8D\">二维码样式与type的匹配</a></p>\n</li>\n<li>\n<p><a href=\"#codelistpointsjsx\">CodeListPoints.jsx</a></p>\n</li>\n<li>\n<p><a href=\"#codelistpointscirclejsx\">CodeListPointsCircle.jsx</a></p>\n</li>\n<li>\n<p><a href=\"#codelistpointsdisturbjsx\">CodeListPointsDisturb.jsx</a></p>\n</li>\n<li>\n<p><a href=\"#codelistpointsdsjjsx\">CodeListPointsDSJ.jsx</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%9F%BA%E6%9C%AC%E7%94%9F%E6%88%90%E7%9A%84%E6%B5%81%E7%A8%8B\">基本生成的流程</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%96%87%E6%9C%AC%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%B1%BB%E5%9E%8Bwebsitetextappstore\">文本自动生成类型(website、text、appstore)</a></p>\n<ul>\n<li>\n<p><a href=\"#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%89%8B%E5%8A%A8%E7%94%9F%E6%88%90%E7%B1%BB%E5%9E%8Bmp3pdfimage\">文件上传手动生成类型(mp3、pdf、image)</a></p>\n</li>\n<li>\n<p><a href=\"#%E6%96%87%E6%9C%AC%E6%89%8B%E5%8A%A8%E7%94%9F%E6%88%90%E7%B1%BB%E5%9E%8Bvcardemailwifisms\">文本手动生成类型(vcard、eMail、wifi、sms）</a></p>\n</li>\n<li>\n<p><a href=\"#%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%AD%98%E5%82%A8%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E6%B5%81%E7%A8%8B\">二维码存储历史记录流程</a></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#ui-%E7%95%8C%E9%9D%A2%E9%9A%BE%E7%82%B9%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88\">UI 界面难点实现方案</a></p>\n<ul>\n<li>\n<ul>\n<li><a href=\"#%E9%A6%96%E9%A1%B5%E4%BA%8C%E7%BB%B4%E7%A0%81-tab-%E5%88%87%E6%8D%A2\">首页二维码 tab 切换</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E9%A6%96%E9%A1%B5%E5%8D%8A%E5%9C%86%E5%87%B9%E5%BD%A2%E8%BE%B9%E6%A1%86\">首页半圆凹形边框</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%90%8E%E7%AB%AF%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3\">后端接口文档</a></p>\n</li>\n</ul>\n</li>\n</ul>","y":"a","t":"🍔 二维码美化项目"} }],
  ["/web/Vue/vue-jsx.html", { loader: () => import(/* webpackChunkName: "v-5a5b3aaa" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue/vue-jsx.html.js"), meta: {"e":"<h2>创建项目</h2>\n<div class=\"language-bash\" data-ext=\"sh\" data-title=\"sh\"><pre class=\"language-bash\"><code><span class=\"token function\">npm</span> init vite <span class=\"token comment\"># 选择 vite 构建 选择 vue javascript</span>\n\n<span class=\"token function\">pnpm</span> i\n\n<span class=\"token function\">pnpm</span> i @vitejs/plugin-vue-jsx\n\n</code></pre></div>","y":"a","t":"Vue3 使用 jsx"} }],
  ["/web/Vue/vue-router.html", { loader: () => import(/* webpackChunkName: "v-6bf8a6cf" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue/vue-router.html.js"), meta: {"g":["Vue","vue-router"],"e":"\n<h2>路由的相关知识点</h2>\n<h3>前端路由</h3>\n<blockquote>\n<p>前端路由是后来发展到SPA（单页应用）时才出现的概念。 SPA 就是一个WEB项目只有一个 HTML 页面，一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转。</p>\n</blockquote>\n<p>前端路由在SPA项目中是必不可少的，页面的跳转、刷新都与路由有关，通过不同的url显示相应的页面。</p>\n<p>优点：前后端的彻底分离，不刷新页面，用户体验较好，页面持久性较好。</p>\n<h3>后端路由</h3>\n<p>当在地址栏切换不同的url时，都会向服务器发送一个请求，服务器接收并响应这个请求，在服务端拼接好html文件返回给页面来展示。</p>","y":"a","t":"🪤 vue-router"} }],
  ["/web/Vue/vue-vuex-pinia.html", { loader: () => import(/* webpackChunkName: "v-eaa6feb4" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue/vue-vuex-pinia.html.js"), meta: {"g":["Vue","vuex","pinia"],"e":"<figure><img src=\"https://pinia.vuejs.org/logo.svg\" alt=\"pinia.svg\" tabindex=\"0\" loading=\"lazy\"><figcaption>pinia.svg</figcaption></figure>\n<h1>Vue 状态管理 vuex pinia</h1>\n<h2>Vuex</h2>\n<h3>Vue2 选项式 API</h3>\n<blockquote>\n<p>状态管理 - 在 src 中创建文件夹 store，创建 index.js 文件</p>\n</blockquote>\n<div class=\"language-JavaScript\" data-ext=\"JavaScript\" data-title=\"JavaScript\"><pre class=\"language-JavaScript\"><code>import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex) // 把 Vuex 注册到Vue 上\n\nexport default new Vuex.Store({\n    // 在开发环境开启严格模式 这样修改数据 就必须通过 mutation 来处理\n    strict:products.env.NODE_ENV !== 'production',\n    // 状态\n    state: {\n    },\n    // 用来处理状态\n    mutations: {\n    },\n    // 用于异步处理\n    actions: {\n    },\n    // 用来挂载模块\n    modules: {\n    }\n})\n</code></pre></div>","y":"a","t":"🪤 Vue 状态管理"} }],
  ["/web/Vue/%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "v-d45fc9bc" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue/通信方式.html.js"), meta: {"g":["Vue"],"e":"<h2>子组件和父组件的通信方式</h2>\n<h3>Vue2 中实现子组件给父组件传递数据的方法：</h3>\n<p>子组件中，使用 $emit 触发一个自定义事件，并传递需要传递的数据：</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 子组件</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'custom-event'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","y":"a","t":"Vue中组件的通信方式"} }],
  ["/web/css/grid.html", { loader: () => import(/* webpackChunkName: "v-71953b96" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/css/grid.html.js"), meta: {"g":["CSS"],"e":"<h2>父级</h2>\n<div class=\"language-css\" data-ext=\"css\" data-title=\"css\"><pre class=\"language-css\"><code><span class=\"token selector\">.wrapper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*grid-template-columns: 1fr 1fr 1fr;*/</span>  <span class=\"token comment\">/*设置列 4 列,每一列的宽度等均分配*/</span>\n    <span class=\"token property\">grid-template-columns</span><span class=\"token punctuation\">:</span> <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span>auto-fill<span class=\"token punctuation\">,</span><span class=\"token function\">minmax</span><span class=\"token punctuation\">(</span>260px<span class=\"token punctuation\">,</span>1fr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/*设置列 自动计算个数,每一列的宽度最小值和最大值*/</span>\n    <span class=\"token property\">gap</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span> <span class=\"token comment\">/*设置四周的间隙 */</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","y":"a","t":"🥴 Grid 布局"} }],
  ["/web/network-request/XMLHttpRequest.html", { loader: () => import(/* webpackChunkName: "v-054de5d9" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/network-request/XMLHttpRequest.html.js"), meta: {"g":["AJAX","XHR","前端"],"e":"<h3>1.XMLHttpRequest的意义和概念</h3>\n<p>XMLHttpRequest是一个特殊的对象，其目的是作用于服务器交换数据</p>\n<h4>主要功能：</h4>\n<pre><code>它可以使网页在不重新加载的情况下更新网页\n\n在页面加载后向服务器发送请求\n\n在页面加载后从服务器接收数据\n\n在后台向服务器发送数据\n</code></pre>\n<h3>2.属性</h3>\n<ul>\n<li>\n<p>readystate(只读):</p>\n<p>返回一个无符号短整型数字，代表请求的状态码</p>\n<p>0：表示XMLHttprequest实例已经生成，但是实例的open方法没有被调用</p>\n<p>1：表示open方法已经调用，可以使用实例的setRequestHeader()方法设置HTTP请求头信息。此时send方法还没调用</p>\n<p>2：表示实例的send方法已经调用，并且服务器返回的头信息和状态码已经收到</p>\n<p>3：表示正在接收服务器传来的数据体body部分。这时，如果实例的responseType属性等于text或者空字符串，responseText属性就会包含已经收到的部分信息</p>\n<p>4：表示服务器返回的数据已经完全接收，或本次接收已经失败</p>\n</li>\n<li>\n<p>onreadystatechange:</p>\n<p>当<strong>readystate</strong>属性发生变化时，调用的事件处理器</p>\n<ul>\n<li>\n<p>responseType:</p>\n<p>一个定义响应类型的枚举类</p>\n</li>\n<li>\n<p>response(只读):</p>\n<p>返回根据<strong>responseType</strong>的的值来返回对应类型的响应实体</p>\n</li>\n<li>\n<p>status(只读):</p>\n<p>返回一个无符号的短整型数字，代表请求的响应状态</p>\n</li>\n<li>\n<p>timeout:</p>\n<p>一个无符号长整型数字，代表当前请求的最大请求时间，超出该事件，请求会自动终止</p>\n</li>\n</ul>\n</li>\n</ul>","y":"a","t":"😤 XHR使用教程"} }],
  ["/web/network-request/websocket.html", { loader: () => import(/* webpackChunkName: "v-21c34802" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/network-request/websocket.html.js"), meta: {"g":["WebSocket","前端"],"e":"\n<h2>使用教程</h2>\n<ol>\n<li>创建 WebSocket 对象：</li>\n</ol>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wss://example.com/socket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>","y":"a","t":"🤕 WebSocket 快速使用教程"} }],
  ["/web/optimize/Gulp.html", { loader: () => import(/* webpackChunkName: "v-f0533334" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/optimize/Gulp.html.js"), meta: {"g":["优化","前端","Gulp"],"e":"\n<h2>目录</h2>\n<ul>\n<li><a href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\">初始化</a></li>\n</ul>\n<p><a href=\"#gulp%E4%B8%AD%E6%8F%90%E4%BE%9B%E7%9A%84%E6%96%B9%E6%B3%95\">gulp中提供的方法</a></p>\n<p><a href=\"#%E9%85%8D%E7%BD%AE\">配置</a></p>\n<p><a href=\"#task%E5%8F%82%E6%95%B0%E8%A7%A3%E9%87%8A\">task参数解释</a></p>\n<p><a href=\"#html%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9\">html文件压缩</a></p>","y":"a","t":"🥳 Gulp 代码压缩"} }],
  ["/web/optimize/UniversalJs.html", { loader: () => import(/* webpackChunkName: "v-a8d76374" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/optimize/UniversalJs.html.js"), meta: {"g":["优化","babel","前端","Webpack"],"e":"\n<h2>目录</h2>\n<ul>\n<li><a href=\"#%E6%8B%9F%E8%A7%A3%E5%86%B3%E7%9A%84%E9%97%AE%E9%A2%98\">拟解决的问题</a></li>\n</ul>\n<p><a href=\"#%E8%A7%A3%E5%86%B3%E7%9A%84%E6%96%B9%E5%BC%8F\">解决的方式</a></p>\n<p><a href=\"#webpack\">webpack</a><br>\n<a href=\"#babel\">babel</a></p>\n<p><a href=\"#%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95\">项目目录</a></p>","y":"a","t":"🤔 最大程度的实现 JS 的兼容性"} }],
  ["/web/optimize/frontend-performance-optimization.html", { loader: () => import(/* webpackChunkName: "v-7c30b7b5" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/optimize/frontend-performance-optimization.html.js"), meta: {"g":["优化","前端"],"e":"\n<h2>目录</h2>\n<ul>\n<li><a href=\"#%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%BB%8B%E7%BB%8D\">前端性能优化介绍</a></li>\n</ul>\n<p><a href=\"#%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8Cweb%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96\">如何进行Web性能优化</a></p>\n<p><a href=\"#%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87\">性能指标</a><br>\n<a href=\"#%E6%80%A7%E8%83%BD%E6%B5%8B%E9%87%8F\">性能测量</a></p>","y":"a","t":"🥳 前端性能优化"} }],
  ["/web/optimize/general-SEO-optimization-plan.html", { loader: () => import(/* webpackChunkName: "v-201163f4" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/optimize/general-SEO-optimization-plan.html.js"), meta: {"g":["优化","SEO","前端"],"e":"\n<h2>1.<strong>增加 Mate Descripition</strong></h2>\n<p>每个页面</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"description\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"xxxxxxxx\"</span><span class=\"token operator\">&gt;</span>\n</code></pre></div>","y":"a","t":"🫠 SEO 通用优化方案"} }],
  ["/web/package/axios-shortcut.html", { loader: () => import(/* webpackChunkName: "v-4f065d02" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/package/axios-shortcut.html.js"), meta: {"g":["axios","封装"],"e":"<figure><img src=\"https://www.z4a.net/images/2023/10/07/axios.png\" alt=\"axios.png\" tabindex=\"0\" loading=\"lazy\"><figcaption>axios.png</figcaption></figure>\n<h2>依赖安装</h2>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>npm install axios\nor\nyarn add axios\n</code></pre></div>","y":"a","t":"🪤 axios 快捷封装"} }],
  ["/web/package/regular-expression.html", { loader: () => import(/* webpackChunkName: "v-550d67d6" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/package/regular-expression.html.js"), meta: {"g":["正则表达式","工具"],"u":true,"e":"<div align=\"center\">\n    <img width=\"200px\" height=\"200px\" src=\"https://www.z4a.net/images/2023/09/12/logo.png\">\n    <h1>\n\t\t<a href=\"https://github.com/NightSquirrl/ant-unocss-ts-vite-react\" target=\"_blank\">正则表达式</a>\n\t</h1>\n</div>\n<br>\n<br>\n<h1>正则表达式</h1>\n<h2>基础正则表达式速查表</h2>\n<h3>字符</h3>\n<table>\n<thead>\n<tr>\n<th><strong>表达式</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[abc]</code></td>\n<td>字符集。匹配集合中所含的任一字符。</td>\n</tr>\n<tr>\n<td><code>[^abc]</code></td>\n<td>否定字符集。匹配任何不在集合中的字符。</td>\n</tr>\n<tr>\n<td><code>[a-z]</code></td>\n<td>字符范围。匹配指定范围内的任意字符。</td>\n</tr>\n<tr>\n<td><code>.</code></td>\n<td>匹配除换行符以外的任何单个字符。</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>转义字符。</td>\n</tr>\n<tr>\n<td><code>\\w</code></td>\n<td>匹配任何字母数字，包括下划线（等价于<code>[A-Za-z0-9_]</code>）。</td>\n</tr>\n<tr>\n<td><code>\\W</code></td>\n<td>匹配任何非字母数字（等价于<code>[^A-Za-z0-9_]</code>）。</td>\n</tr>\n<tr>\n<td><code>\\d</code></td>\n<td>数字。匹配任何数字。</td>\n</tr>\n<tr>\n<td><code>\\D</code></td>\n<td>非数字。匹配任何非数字字符。</td>\n</tr>\n<tr>\n<td><code>\\s</code></td>\n<td>空白。匹配任何空白字符，包括空格、制表符等。</td>\n</tr>\n<tr>\n<td><code>\\S</code></td>\n<td>非空白。匹配任何非空白字符。</td>\n</tr>\n</tbody>\n</table>","y":"a","t":"🍕 正则表达式使用手册"} }],
  ["/web/threeJs/1-quick-get-start.html", { loader: () => import(/* webpackChunkName: "v-2032c6ba" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/threeJs/1-quick-get-start.html.js"), meta: {"g":["three.js"],"e":"<blockquote>\n<p>文档地址:https://www.three3d.cn/</p>\n<p>官网文档地址:https://threejs.org/</p>\n</blockquote>\n<h2>基本的使用</h2>\n<h3>依赖引入</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 导入threejs</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">THREE</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 导入轨道控制器</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> OrbitControls <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/controls/OrbitControls.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 导入lil.gui</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> <span class=\"token constant\">GUI</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/libs/lil-gui.module.min.js\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 导入hdr加载器</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> RGBELoader <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"three/examples/jsm/loaders/RGBELoader.js\"</span><span class=\"token punctuation\">;</span>\n\n</code></pre></div>","y":"a","t":"1. ThreeJS入门教程"} }],
  ["/web/threeJs/2-shadow.html", { loader: () => import(/* webpackChunkName: "v-acf5ab36" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/threeJs/2-shadow.html.js"), meta: {"g":["three.js"],"e":"<h2>光照</h2>\n<blockquote>\n<p>目标：灯光与阴影\n//灯光阴影\n//1、材质要满足能够对光照有反应\n/2、设置渲染器开启阴影的计算renderer,shadowMap,enabled=true;\n//3、设置光照投射阴影directionalLight.castshadow=true;\n//4、设置物体投射阴影sphere,castshadow=true;\n//5、设置物体接收阴影plane.receiveShadow=true;</p>\n</blockquote>\n<ol>\n<li>开启场景中的阴影贴图</li>\n</ol>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>renderer<span class=\"token punctuation\">.</span>shadowMap<span class=\"token punctuation\">.</span>enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n</code></pre></div>","y":"a","t":"2. 光"} }],
  ["/web/uni-app/1-quick-get-start.html", { loader: () => import(/* webpackChunkName: "v-e9c1a874" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/uni-app/1-quick-get-start.html.js"), meta: {"g":["uni-app"],"u":true,"e":"<h2>1. 项目的创建方式</h2>\n<h3>1.1 创建 uni-app 项目方式</h3>\n<p><strong>uni-app 支持两种方式创建项目：</strong></p>\n<ol>\n<li>通过 HBuilderX 创建（需安装 HBuilderX 编辑器）</li>\n<li>通过命令行创建（需安装 NodeJS 环境）</li>\n</ol>\n<h2>2. HBuilderX 创建 uni-app 项目</h2>\n<ol>\n<li>通过可视化的 hbuilderx 的界面创建项目</li>\n</ol>\n<figure><img src=\"https://img.picgo.net/2023/11/24/uniapp_picture_2.609bc84658543df29435596a.png\" alt=\"uniapp_picture_2.609bc846\" tabindex=\"0\" loading=\"lazy\"><figcaption>uniapp_picture_2.609bc846</figcaption></figure>","y":"a","t":"😢 uni-app 快速入门"} }],
  ["/web/webpack/Webpack_React.html", { loader: () => import(/* webpackChunkName: "v-6d2e15ff" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/webpack/Webpack_React.html.js"), meta: {"g":["Webpack","前端"],"e":"<div align=\"center\">\n    <img width=\"200px\" height=\"200px\" src=\"https://www.z4a.net/images/2023/09/12/logo.png\">\n    <h1>\n\t\t<a href=\"https://github.com/NightSquirrl/manual-react-webpack\" target=\"_blank\">🧐 Webpack + React</a>\n\t</h1>\n    <p>代码相关说明</p>\n</div>\n<br>\n<br>\n<h1>基础配置</h1>\n<h2>一、五大核心概念</h2>\n","y":"a","t":"🧐 Webpack + React"} }],
  ["/web/webpack/", { loader: () => import(/* webpackChunkName: "v-6930f13a" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/webpack/index.html.js"), meta: {"g":["Webpack"],"e":"<blockquote>\n<p>高级篇 7.9</p>\n</blockquote>\n<h1>基础篇</h1>\n<h2>1. Why? 为什么需要 webpack</h2>\n<blockquote>\n<p>问题</p>\n</blockquote>\n<ol>\n<li>作用于问题 GRUNT IIFE</li>\n</ol>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 立即调用函数</span>\n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 在外部调用</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 程序报错,无法访问到</span>\n\n<span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可以访问到</span>\n\n</code></pre></div>","y":"a","t":"🪤 Webpack"} }],
  ["/web/%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/Array.html", { loader: () => import(/* webpackChunkName: "v-17898b92" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/常用方法/Array.html.js"), meta: {"g":["Array","算法"],"e":"\n<h2>Reduce</h2>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>array<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span> currentValue<span class=\"token punctuation\">,</span>currentIndex<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// accumulator:累加器 就是上一次 return 的值,初始值,第二个参数为空的时候就是数组的第一个值</span>\n    <span class=\"token comment\">// currentValue:当前值</span>\n    <span class=\"token comment\">// currentIndex:当前索引</span>\n    <span class=\"token comment\">// array:数组</span>\n    \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> initialValue<span class=\"token punctuation\">)</span>\n</code></pre></div>","y":"a","t":"数组的相关算法"} }],
  ["/web/%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/WaterfallFlow.html", { loader: () => import(/* webpackChunkName: "v-b3293a2a" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/常用方法/WaterfallFlow.html.js"), meta: {"g":["算法"],"e":"<blockquote>\n<p>HTML 代码</p>\n</blockquote>\n<details>\n<summary>点击展开代码</summary>\n<div class=\"language-vue\" data-ext=\"vue\" data-title=\"vue\"><pre class=\"language-vue\"><code>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrapper<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wf-item<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>(image,index) in images<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span>  <span class=\"token attr-name\">:src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wf-img<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>index.toString()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div></details>","y":"a","t":"🤔 瀑布流"} }],
  ["/web/%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/", { loader: () => import(/* webpackChunkName: "v-f1bd9522" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/组件封装/index.html.js"), meta: {"g":["前端","rollup","SDK"],"e":"<h2>项目初始化</h2>\n<p>创建文件rollup.config.js</p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>npm init <span class=\"token operator\">-</span>y\ntsc <span class=\"token operator\">--</span>init\n\n\nnpm install rollup <span class=\"token operator\">-</span><span class=\"token constant\">D</span>\nnpm install rollup<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>dts <span class=\"token operator\">-</span><span class=\"token constant\">D</span>\nnpm install rollup<span class=\"token operator\">-</span>plugin<span class=\"token operator\">-</span>typescript2 <span class=\"token operator\">-</span><span class=\"token constant\">D</span>\nnpm install typescript <span class=\"token operator\">-</span><span class=\"token constant\">D</span>\n</code></pre></div>","y":"a","t":"🎃 组件 | SDK 封装"} }],
  ["/web/%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/npm-packages.html", { loader: () => import(/* webpackChunkName: "v-61c37582" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/组件封装/npm-packages.html.js"), meta: {"g":["前端","rollup","SDK"],"e":"\n<h2>UI Component</h2>\n<p><a href=\"https://www.npmjs.com/package/what-tools-react-drop-upload\" target=\"_blank\" rel=\"noopener noreferrer\">what-tools-react-drop-upload</a></p>\n<h2>Logic</h2>\n","y":"a","t":"📸 个人发布的 npm 包管理文档"} }],
  ["/web/%E7%BB%84%E4%BB%B6%E5%B0%81%E8%A3%85/rollup.html", { loader: () => import(/* webpackChunkName: "v-5549424e" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/组件封装/rollup.html.js"), meta: {"g":["前端","rollup"],"e":"\n<h2>初始化</h2>\n<h3>依赖安装</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>yarn init <span class=\"token operator\">-</span>y\nyarn add rollup\n</code></pre></div><h3>配置文件</h3>\n<p><code>rollup.config.js</code></p>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">export</span>  <span class=\"token keyword\">default</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">input</span> <span class=\"token operator\">:</span><span class=\"token string\">\"src/index.js\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">output</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">file</span><span class=\"token operator\">:</span><span class=\"token string\">\"dist/bundle.js\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">format</span><span class=\"token operator\">:</span><span class=\"token string\">\"iife\"</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n</code></pre></div>","y":"a","t":"🎃 rollup 快速上手"} }],
  ["/web/PDF/pdfjs/", { loader: () => import(/* webpackChunkName: "v-3519f989" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/PDF/pdfjs/index.html.js"), meta: {"g":["pdfjs","前端"],"e":"\n<h2>目录</h2>\n<p><a href=\"#pdf%E9%A1%B5%E9%9D%A2%E7%94%9F%E6%88%90%E7%9A%84%E5%8E%9F%E7%90%86\">pdf页面生成的原理</a></p>\n<p><a href=\"#%E5%9C%A8pdf%E6%B8%B2%E6%9F%93%E5%88%B0%E9%A1%B5%E9%9D%A2%E7%9A%84%E6%96%B9%E5%BC%8F\">在pdf渲染到页面的方式</a>\n<a href=\"#1-canvas\">1. canvas</a><br>\n<a href=\"#2-svg%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F\">2. svg渲染模式</a></p>","y":"a","t":"😤 pdfjs 源码基本说明"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/1.%20%E5%BC%80%E5%A7%8B/1.1%E7%AE%80%E4%BB%8B.html", { loader: () => import(/* webpackChunkName: "v-567cd599" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/1. 开始/1.1简介.html.js"), meta: {"e":"\n<h2>什么是 Vue</h2>\n<h3>Vue 是一款用于构建用户界面的 JavaScript 框架</h3>\n<h3>基于标准 HTML、CSS 和 JavaScript 构建</h3>\n<h3>提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面</h3>\n<h2>渐进式框架</h2>\n<h3>Vue 被设计成具有灵活性和可逐步集成的特点，以适应不同需求场景</h3>\n<ul>\n<li>\n<p>增强静态的 HTML 而无需构建步骤</p>\n</li>\n<li>\n<p>在任何页面中作为 Web Components 嵌入</p>\n</li>\n<li>\n<p>单页应用 (SPA)</p>\n</li>\n<li>\n<p>全栈 / 服务端渲染 (SSR)</p>\n</li>\n<li>\n<p>Jamstack / 静态站点生成 (SSG)</p>\n</li>\n<li>\n<p>目标为桌面端、移动端、WebGL，甚至是命令行终端</p>\n</li>\n</ul>","y":"a","t":"简介"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/1.%20%E5%BC%80%E5%A7%8B/1.2%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B.html", { loader: () => import(/* webpackChunkName: "v-5eb43738" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/1. 开始/1.2快速开始.html.js"), meta: {"e":"\n<h2>采用构建工具</h2>\n<h3>线上构建</h3>\n<ul>\n<li>\n<p>可以通过 StackBlitz 在线使用单文件组件尝试 Vue</p>\n</li>\n<li>\n<p>https://vite.new/vue</p>\n</li>\n</ul>\n<h3>本地构建</h3>\n<ul>\n<li>\n<p>命令行运行：npm init vue@latest</p>\n<ul>\n<li>这一指令将会安装并执行 create-vue，它是 Vue 官方的项目脚手架工具</li>\n</ul>\n</li>\n<li>\n<p>然后进入项目目录，分别执行npm install和npm run dev</p>\n</li>\n<li>\n<p>当你准备将应用发布到生产环境时，运行npm run build</p>\n<ul>\n<li>此命令会在 ./dist 文件夹中为你的应用创建一个生产环境的构建版本</li>\n</ul>\n</li>\n</ul>","y":"a","t":"快速开始"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.1%20%E5%88%9B%E5%BB%BA%20Vue%20%E5%BA%94%E7%94%A8.html", { loader: () => import(/* webpackChunkName: "v-00355850" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.1 创建 Vue 应用.html.js"), meta: {"e":"\n<h2>应用实例</h2>\n<h3>每个 Vue 应用都是通过 createApp 函数创建一个新的 应用实例</h3>\n<h3>const app = createApp({/* 根组件选项 */})</h3>\n<h2>根组件</h2>\n<h3>传入 createApp 的对象实际上是一个“根组件”，其他组件将作为根组件的子组件</h3>\n<h3>如果你使用单文件组件，根组件可从其他文件导入</h3>\n<ul>\n<li>import App from './App.vue'const app = createApp(App)</li>\n</ul>\n<h2>挂载应用</h2>\n<h3>应用实例必须在调用了 .mount() 方法后才会渲染出来</h3>","y":"a","t":"2.1 创建 Vue 应用"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.10%20%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90.html", { loader: () => import(/* webpackChunkName: "v-835ccb0a" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.10 生命周期钩子.html.js"), meta: {"e":"\n<h2>简述</h2>\n<h3>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤</h3>\n<h3>比如设置好数据侦听，编译模板，挂载实例到 DOM 以及数据改变时更新 DOM</h3>\n<h3>在此过程中，它也会运行称为生命周期钩子的函数，让开发者有机会在特定阶段添加自己的代码</h3>\n<h2>注册周期钩子</h2>\n<h3>举个例子，onMounted 钩子可以用来在组件完成初始渲染并创建 DOM 节点后运行代码</h3>\n<h3>还有其他一些钩子，会在实例生命周期的不同阶段被调用，最常用的是 onMounted，onUpdated 和 onUnmounted</h3>\n<h3>当调用 onMounted 时，Vue 会自动将注册的回调函数与当前活动组件实例相关联</h3>","y":"a","t":"2.10 生命周期钩子"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.11%20%E4%BE%A6%E5%90%AC%E5%99%A8.html", { loader: () => import(/* webpackChunkName: "v-53b153f8" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.11 侦听器.html.js"), meta: {"e":"\n<h2>watch 函数</h2>\n<h3>计算属性允许我们声明性地计算推导值。然而，在有些情况下，为了应对一些状态的变化，我们需要运行些“副作用”</h3>\n<h3>使用 watch 函数在每次响应式状态发生变化时触发回调函数</h3>\n<h2>侦听来源类型</h2>\n<h3>watch 的第一个参数可以是不同形式的“来源”：它可以是一个 ref (包括计算属性)、一个响应式对象、一个 getter 函数、或多个来源组成的数组</h3>\n<h3>注意，你不能侦听响应式对象的 property，可以使用 getter 函数</h3>\n<p>// 提供一个 getter 函数\nwatch(\n() =&gt; obj.count,\n(count) =&gt; {\nconsole.log(<code>count is: ${count}</code>)\n}\n)</p>","y":"a","t":"2.11 侦听器"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.12%20%E6%A8%A1%E6%9D%BF%20ref.html", { loader: () => import(/* webpackChunkName: "v-205800b0" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.12 模板 ref.html.js"), meta: {"e":"\n<h2>简介</h2>\n<h3>虽然 Vue 的声明性渲染模型为你抽象了大部分对 DOM 的直接操作，但在某些情况下，我们仍然需要直接访问底层 DOM 元素。要实现这一点，我们可以使用特殊的 ref attribute，例如：</h3>\n<div class=\"language-vue\" data-ext=\"vue\" data-title=\"vue\"><pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>item in items<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>\n  {{ item.message }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>","y":"a","t":"2.12 模板 ref"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.13%20%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80.html", { loader: () => import(/* webpackChunkName: "v-4045dbfc" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.13 组件基础.html.js"), meta: {"e":"\n<h2>定义一个组件</h2>\n<h3>当使用构建步骤时，我们一般会将 Vue 组件定义在一个单独的 .vue 文件中，这被叫做单文件组件 (简称 SFC)</h3>\n<div class=\"language-vue\" data-ext=\"vue\" data-title=\"vue\"><pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ref <span class=\"token punctuation\">}</span> from <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>vue<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>count++<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>You clicked me {{ count }} times.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>","y":"a","t":"2.13 组件基础"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.2%20%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95.html", { loader: () => import(/* webpackChunkName: "v-7fc2f766" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.2 模板语法.html.js"), meta: {"e":"\n<h2>简介</h2>\n<h3>Vue 使用一种基于 HTML 的模板语法</h3>\n<h3>底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码</h3>\n<h3>你也可以结合可选的 JSX 支持直接手写渲染函数而不采用模板，但这将不会享受到和模板同等级别的编译时优化</h3>\n<h2>文本插值</h2>\n<h3>文本插值使用“Mustache”语法 (即双大括号)</h3>\n<ul>\n<li><code>Message: {{ msg }}</code></li>\n</ul>\n<h3>双大括号标签会被替换为相应组件实例中  property 的值，同时具有响应式</h3>","y":"a","t":"2.2 模板语法"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.3%20%E5%93%8D%E5%BA%94%E5%BC%8F%E5%9F%BA%E7%A1%80.html", { loader: () => import(/* webpackChunkName: "v-23c5d012" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.3 响应式基础.html.js"), meta: {"e":"\n<h2>声明响应式状态</h2>\n<h3>reactive</h3>\n<ul>\n<li>\n<p>我们可以使用 <code>reactive()</code> 函数创建一个响应式对象或数组</p>\n<ul>\n<li><code>const state = reactive({ count: 0 })</code></li>\n</ul>\n</li>\n<li>\n<p>Vue 能够跟踪对响应式对象属性的访问与更改操作</p>\n</li>\n<li>\n<p>如果要在组件模板中使用响应式状态，需在 <code>setup()</code> 函数中定义并返回</p>\n</li>\n</ul>\n<div class=\"language-vue\" data-ext=\"vue\" data-title=\"vue\"><pre class=\"language-vue\"><code>\n  import { reactive } from <span class=\"token entity\" title=\"'\">&amp;#39;</span>vue<span class=\"token entity\" title=\"'\">&amp;#39;</span>\n  \n  export default {\n    // `setup` 是一个专门用于组合式 API 的特殊钩子\n    setup() {\n      const state = reactive({ count: 0 })\n      // 暴露 state 到模板\n      return {\n        state\n      }\n    }\n  }\n</code></pre></div>","y":"a","t":"2.3 响应式基础"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.4%20%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7.html", { loader: () => import(/* webpackChunkName: "v-7e21e6ef" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.4 计算属性.html.js"), meta: {"e":"\n<h2>简介</h2>\n<h3>模板中的表达式虽然方便，但也只能用来做简单的操作。如果在模板中写太多逻辑，会让使其变得臃肿，难以维护</h3>\n<h3>所以，推荐使用计算属性来描述依赖响应式状态的复杂逻辑</h3>\n<h3><code>computed()</code> 方法期望接收一个 getter 函数，返回值为一个计算属性 ref</h3>\n<h3>Vue 的计算属性会自动追踪响应式依赖</h3>\n<h2>计算属性缓存 vs 方法</h2>\n<h3>若我们将同样的函数定义为一个方法而不是计算属性，两种方式在结果上确实是完全相同的</h3>\n<h3>不同之处在于计算属性值会基于其响应式依赖被缓存</h3>","y":"a","t":"2.4 计算属性"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.5%20%E7%B1%BB%E4%B8%8E%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A.html", { loader: () => import(/* webpackChunkName: "v-3c3da54a" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.5 类与样式绑定.html.js"), meta: {"e":"\n<h2>简介</h2>\n<h3>数据绑定的一个常见需求场景是操纵元素的 CSS 类列表和内联样式</h3>\n<h3>因为它们都是 attribute，我们可以使用 v-bind 来做，我们只需要通过表达式计算出一个字符串作为最终结果即可</h3>\n<h3>然而频繁地连接字符串让人很闹心，也很容易出错。因此，Vue 专门为 class 和 style 的 v-bind 用法提供了特殊的功能增强。除了字符串外，表达式的结果还可以是对象或数组</h3>\n<h2>绑定 HTML 类</h2>\n<h3>绑定对象</h3>\n<ul>\n<li>\n<p>我们可以给 :class (v-bind:class 的缩写) 传递一个对象来动态切换类</p>\n</li>\n<li>\n<p>举例：</p>\n<ul>\n<li>active 是否存在取决于数据属性 isActive 的真假值</li>\n</ul>\n</li>\n<li>\n<p>也可以在对象中写多个字段来操作多个类</p>\n</li>\n<li>\n<p>:class 指令也可以和一般的 class attribute 共存</p>\n<div class=\"static\" :class=\"{ active: isActive, 'text-danger': hasError }\"></div>\n<p>它将会被渲染成：</p>\n<div class=\"static active\"></div>\n</li>\n<li>\n<p>也可以绑定一个返回对象的计算属性（通用且好用的实践）</p>\n<p>const isActive = ref(true)\nconst error = ref(null)</p>\n<p>const classObject = computed(() =&gt; ({\nactive: isActive.value &amp;&amp; !error.value,\n'text-danger': error.value &amp;&amp; error.value.type === 'fatal'\n}))</p>\n<div :class=\"classObject\"></div>\n</li>\n</ul>","y":"a","t":"2.5 类与样式绑定"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.6%20%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93.html", { loader: () => import(/* webpackChunkName: "v-1ee6229a" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.6 条件渲染.html.js"), meta: {"e":"\n<h2>v-if</h2>\n<h3>v-if 指令被用于按条件渲染一个区块</h3>\n<ul>\n<li>Vue is awesome!</li>\n</ul>\n<h3>这个区块只会在指令的表达式为真时才被渲染</h3>\n<h2>v-else</h2>\n<h3>可以使用 v-else 为 v-if 添加一个“else 区块”</h3>\n<h3>一个 v-else 元素必须跟在一个 v-if 或者 v-else-if 元素后面，否则将不会识别它</h3>\n<h3>v-else-if</h3>\n<ul>\n<li>\n<p>v-else-if 提供的是相应于 v-if 的“else if 区块”</p>\n</li>\n<li>\n<p>可以连续多次重复使用</p>\n</li>\n<li>\n<p>和 v-else 相似，一个使用 v-else-if 的元素必须紧跟在一个 v-if 或一个 v-else-if 元素后面</p>\n</li>\n</ul>","y":"a","t":"2.6 条件渲染"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.7%20%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93.html", { loader: () => import(/* webpackChunkName: "v-bfa96742" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.7 列表渲染.html.js"), meta: {"e":"\n<h2>v-for</h2>\n<h3>可以使用 v-for 指令基于一个数组来渲染一个列表</h3>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>item in items<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>\n  {{ item.message }}\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>","y":"a","t":"2.7 列表渲染"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.8%20%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86.html", { loader: () => import(/* webpackChunkName: "v-5a064645" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.8 事件处理.html.js"), meta: {"e":"\n<h2>监听事件</h2>\n<h3>可以使用 v-on 指令 (简写为 @) 来监听 DOM 事件和运行 JavaScript 代码</h3>\n<h3>用法：v-on:click=\"methodName\" 或 @click=\"handler\"</h3>\n<h3>事件处理器的值可以是</h3>\n<ul>\n<li>\n<p>内联事件处理器</p>\n<ul>\n<li>内联的 JavaScript 语句</li>\n</ul>\n</li>\n<li>\n<p>方法事件处理器</p>\n<ul>\n<li>一个组件的属性名、或对某个方法的访问</li>\n</ul>\n</li>\n</ul>\n<h3>方法与内联事件判断</h3>","y":"a","t":"2.8 事件处理"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/2.9%20%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%91%E5%AE%9A.html", { loader: () => import(/* webpackChunkName: "v-7cca142a" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/2.9 表单输入绑定.html.js"), meta: {"e":"\n<h2>简介</h2>\n<h3>我们常常需要将表单输入框的内容同步给 JavaScript 中相应的变量，手动连接值绑定和更改事件监听器可能会很麻烦</h3>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span>\n  <span class=\"token attr-name\">:value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>text<span class=\"token punctuation\">'</span></span>\n  <span class=\"token attr-name\">@input</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>event =&gt; text = event.target.value<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre></div>","y":"a","t":"2.9 表单输入绑定"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/3.%20%E6%B7%B1%E5%85%A5%E7%BB%84%E4%BB%B6/3.1%20%E7%BB%84%E4%BB%B6%E6%B3%A8%E5%86%8C.html", { loader: () => import(/* webpackChunkName: "v-3a249197" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/3. 深入组件/3.1 组件注册.html.js"), meta: {"e":"\n<h2>简介</h2>\n<h3>一个 Vue 组件需要被“注册”，以至于Vue 在渲染模板时能找到其实现</h3>\n<h3>注册组件有两种方法</h3>\n<ul>\n<li>全局注册和局部注册</li>\n</ul>\n<h2>全局注册</h2>\n<h3>可以使用 app.component() 方法，将一个组件注册为全局组件</h3>\n<h3>如果使用单文件组件，你可以注册被导入的 .vue 文件</h3>\n<h3>app.component() 方法可以被链式调用</h3>\n<h3>全局注册的组件可以在此应用的任意组件的模板中使用</h3>\n<h3>全局注册的缺点</h3>\n<ul>\n<li>\n<p>全局注册使构建系统无法移除未使用的组件(也叫“tree-shaking”)。如果你全局注册了一个组件，却一次都没有使用，它仍然会出现在最终的构建产物中</p>\n</li>\n<li>\n<p>全局注册在大型项目中使项目的依赖关系变得不那么明确。在父组件中使用子组件时，很难定位子组件的实现。这可能会影响未来长期的可维护性，类似于使用过多的全局变量</p>\n</li>\n</ul>","y":"a","t":"3.1 组件注册"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/3.%20%E6%B7%B1%E5%85%A5%E7%BB%84%E4%BB%B6/3.2%20Props.html", { loader: () => import(/* webpackChunkName: "v-b366ced8" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/3. 深入组件/3.2 Props.html.js"), meta: {"e":"\n<h2>Props 声明</h2>\n<h3>组件需要显式声明 props，这样 Vue 才能知道外部传入的哪些是 props，哪些是透传 attribute</h3>\n<h3>在没有使用  的组件中，props 需使用 props 选项来定义</h3>\n<h3>请注意，传给 <code>defineProps()</code> 的参数和提供给 props 选项的值是相同的，两种声明方式背后其实使用的都是 props 选项</h3>\n<h3>除了使用字符串数组来声明 props 外，还可以使用对象的形式</h3>\n<ul>\n<li>对于以对象形式声明中的每个属性，key 是 prop 的名称，而值应该是预期类型的构造函数</li>\n</ul>","y":"a","t":"3.2 Props"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/3.%20%E6%B7%B1%E5%85%A5%E7%BB%84%E4%BB%B6/3.3%20%E7%BB%84%E4%BB%B6%E4%BA%8B%E4%BB%B6.html", { loader: () => import(/* webpackChunkName: "v-709eb15c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/3. 深入组件/3.3 组件事件.html.js"), meta: {"e":"\n<h2>触发与监听事件</h2>\n<h3>在组件的模板表达式中，可以直接使用 <code>$emit </code>函数触发自定义事件</h3>\n<h3>父组件可以通过 v-on (缩写为 @) 来监听事件</h3>\n<h3>注意，我们触发了一个以 camelCase 形式命名的事件，但在父组件中可以使用 kebab-case 形式来监听</h3>\n<h3>和原生 DOM 事件不太一样，组件触发的事件不会冒泡。你只能监听直接子组件触发的事件</h3>\n<h2>事件参数</h2>\n<h3>所有传入 <code>$emit() </code>的额外参数都会被直接传向监听器</h3>\n<h3>举个例子，<code>$emit('foo', 1, 2, 3)</code> 触发后，监听器函数将会收到这三个参数值</h3>","y":"a","t":"3.3 组件事件"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/3.%20%E6%B7%B1%E5%85%A5%E7%BB%84%E4%BB%B6/3.4%20%E9%80%8F%E4%BC%A0%20attribute.html", { loader: () => import(/* webpackChunkName: "v-706130e3" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/3. 深入组件/3.4 透传 attribute.html.js"), meta: {"e":"\n<h2>Attribute 继承</h2>\n<h3>“透传 attribute”的意思是 attribute 或者被传递给一个组件的 v-on 事件监听器，但并没有显式地声明在所接收组件的 props 或 emits 上</h3>\n<h3>当一个组件以单个元素为根作渲染时，透传的 attribute 会自动添加到根元素的 attribute 中</h3>\n<h3>对 class 和 style 的合并</h3>\n<ul>\n<li>如果一个子组件的根元素已经有了 class 或 style attribute，它会和从父组件上继承的值合并</li>\n</ul>\n<h3>v-on 监听器继承</h3>","y":"a","t":"3.4 透传 attribute"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/3.%20%E6%B7%B1%E5%85%A5%E7%BB%84%E4%BB%B6/3.5%20%E6%8F%92%E6%A7%BD.html", { loader: () => import(/* webpackChunkName: "v-4a100d26" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/3. 深入组件/3.5 插槽.html.js"), meta: {"e":"\n<h2>插槽内容与插口</h2>\n<h3>元素是一个插槽的插口，指出了父元素提供的插槽内容在哪里被渲染</h3>\n<h3>使用插槽后，组件的扩展性、可复用性都增强了</h3>\n<h3>Vue 组件的插槽机制是受原生 Web Component  元素的启发而诞生，同时还做了一些功能拓展</h3>\n<h2>渲染作用域</h2>\n<h3>插槽内容可以访问到父组件的数据，因为插槽内容本身也是父组件模板的一部分</h3>\n<h3>插槽内容无法访问子组件的数据</h3>\n<h3>规则是：任何父组件模板中的东西都只被编译到父组件的作用域中；而任何子组件模板中的东西都只被编译到子组件的作用域中</h3>\n","y":"a","t":"3.5 插槽"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/3.%20%E6%B7%B1%E5%85%A5%E7%BB%84%E4%BB%B6/3.6%20%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html", { loader: () => import(/* webpackChunkName: "v-368fcc9c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/3. 深入组件/3.6 依赖注入.html.js"), meta: {"e":"\n<h2>Provide (供给)</h2>\n<h3>要为组件后代供给数据，需要使用到 provide() 函数</h3>\n<h3>如果不使用 ，请确保 provide() 是在 setup() 同步调用的</h3>\n<h3>provide() 函数接收两个参数</h3>\n<ul>\n<li>\n<p>第一个参数被称为注入名，可以是一个字符串或是一个 Symbol</p>\n</li>\n<li>\n<p>第二个参数是供给的值，值可以是任意类型，包括响应式的状态</p>\n</li>\n</ul>\n<h3>供给的响应式状态使后代组件可以由此和供给者建立响应式的联系</h3>\n<h2>应用层 Provide</h2>","y":"a","t":"3.6 依赖注入"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/3.%20%E6%B7%B1%E5%85%A5%E7%BB%84%E4%BB%B6/3.7%20%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6.html", { loader: () => import(/* webpackChunkName: "v-13e06ebe" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/3. 深入组件/3.7 异步组件.html.js"), meta: {"e":"\n<h2>基础使用</h2>\n<h3>在大型项目中，我们可能需要拆分应用为更小的块，并仅在需要时再从服务器加载相关组件。为实现这点，Vue 提供了一个 defineAsyncComponent 方法</h3>\n<h3>defineAsyncComponent 方法接收一个返回 Promise 的加载函数</h3>\n<h3>ES 模块动态导入也会返回一个 Promise，所以多数情况下我们会将它和 defineAsyncComponent 搭配使用，类似 Vite 和 Webpack 这样的构建工具也支持这种语法，因此我们也可以用它来导入 Vue 单文件组件</h3>\n<h2>加载与错误状态</h2>","y":"a","t":"3.7 异步组件"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/4.%20%E5%8F%AF%E9%87%8D%E7%94%A8%E6%80%A7/4.1%20%E5%8F%AF%E7%BB%84%E5%90%88%E5%87%BD%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "v-4abc8a66" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/4. 可重用性/4.1 可组合函数.html.js"), meta: {"e":"\n<h2>什么是“可组合函数”</h2>\n<h3>在 Vue 应用的概念中，“可组合函数”是一个利用 Vue 组合式 API 来封装和复用有状态逻辑的函数</h3>\n<h3>当构建前端应用时，我们常常需要复用公共任务的逻辑。例如为了在不同地方格式化时间而抽取一个可复用的函数。这个格式化函数封装了无状态的逻辑：它在接收一些输入后立刻返回所期望的输出</h3>\n<h3>相比之下，有状态逻辑负责管理会随时变化的状态。一个简单的例子是跟踪当前鼠标在页面中的位置。在真实应用中，它也可以是像触摸手势或与数据库的连接状态这样的更复杂的逻辑</h3>\n<h2>约定和最佳实践</h2>\n<h3>命名</h3>\n","y":"a","t":"4.1 可组合函数"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/4.%20%E5%8F%AF%E9%87%8D%E7%94%A8%E6%80%A7/4.2%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4.html", { loader: () => import(/* webpackChunkName: "v-0b73de35" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/4. 可重用性/4.2 自定义指令.html.js"), meta: {"e":"\n<h2>介绍</h2>\n<h3>我们已经介绍过了两种 Vue 中重用逻辑的方式：组件和可组合函数。组件主要关注构建视图区块，而可组合函数关注于有状态的逻辑。自定义指令则主要是封装了可重用的对底层 DOM 访问的逻辑</h3>\n<h3>一个自定义指令被定义为一个包含类似于组件的生命周期钩子的对象。钩子接收指令绑定到的元素</h3>\n<h3>在  中，任何以 v 开头的 camelCase 格式的变量都会可以被用作一个自定义指令</h3>\n<h3>如果不使用 ，自定义指令可以通过 directives 选项注册</h3>\n<h3>常常也会将一个自定义指令注册到应用全局</h3>\n<ul>\n<li>app.directive('focus', {/* ... */})</li>\n</ul>","y":"a","t":"4.2 自定义指令"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/4.%20%E5%8F%AF%E9%87%8D%E7%94%A8%E6%80%A7/4.3%20%E6%8F%92%E4%BB%B6.html", { loader: () => import(/* webpackChunkName: "v-1897f6c4" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/4. 可重用性/4.3 插件.html.js"), meta: {"e":"\n<h2>介绍</h2>\n<h3>安装一个插件</h3>\n<ul>\n<li><code>app.use(myPlugin, {/* 可选的选项 */})</code></li>\n</ul>\n<h3>插件可以是</h3>\n<ul>\n<li>\n<p>一个拥有<code>install()</code>方法的对象</p>\n</li>\n<li>\n<p>或者就简单地只是一个函数，它自己就是安装函数</p>\n</li>\n</ul>\n<h3>安装函数接收应用实例和传递给 <code>app.use()</code> 的额外选项</h3>\n<h3>插件没有严格定义的使用范围，但是插件发挥作用的常见场景主要包括以下几种</h3>","y":"a","t":"4.3 插件"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/5.%20%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6/5.1%20Transition%C2%B7%E8%BF%87%E6%B8%A1.html", { loader: () => import(/* webpackChunkName: "v-209de090" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/5. 内置组件/5.1 Transition·过渡.html.js"), meta: {"e":"\n<h2>介绍</h2>\n<h3>Vue 提供了两个内置组件，实现基于状态变化的过渡和动画</h3>\n<ul>\n<li>和</li>\n</ul>\n<h3>会在一个元素或组件进入和离开 DOM 时应用动画， 会在一个元素或组件被插入到 v-for 列表中，或是被移动或从其中移除时应用动画</h3>\n<h2>组件</h2>\n<h3>是一个内置组件，意味着它在任意别的组件中都可以被使用。它可以在一般元素以及通过默认插槽传递的组件上应用进入和离开动画</h3>\n<h3>进入或离开可以由以下其中一种触发</h3>\n<ul>\n<li>\n<p>由 v-if 所带来的条件渲染</p>\n</li>\n<li>\n<p>由 v-show 所带来的条件显示</p>\n</li>\n<li>\n<p>由特殊元素  切换的动态组件</p>\n</li>\n</ul>","y":"a","t":"5.1 Transition·过渡"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/5.%20%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6/5.2%20TransitionGroup%C2%B7%E8%BF%87%E6%B8%A1%E7%BB%84.html", { loader: () => import(/* webpackChunkName: "v-48a31aee" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/5. 内置组件/5.2 TransitionGroup·过渡组.html.js"), meta: {"e":"\n<h2>和  的区别</h2>\n<h3>支持和  基本相同的 prop、CSS 过渡类和 JavaScript 钩子监听器，但有以下几点区别：</h3>\n<h3>默认情况下，它不会渲染一个包装器元素。但你可以通过传入 tag prop 来指定一个元素作为包装器元素来渲染</h3>\n<h3>过渡模式在这里不可用，因为我们不再是在互斥的元素之间进行切换</h3>\n<h3>其中的元素总是必须有一个独一无二的 key attribute</h3>\n<h3>CSS 过渡类会被应用在其中的每一个元素上，而不是这个组的容器上</h3>\n<h3>当你是在 DOM 模板中使用时，组件名需要写为</h3>\n<h2>进入 / 离开过渡</h2>","y":"a","t":"5.2 TransitionGroup·过渡组"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/5.%20%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6/5.3%20KeepAlive.html", { loader: () => import(/* webpackChunkName: "v-c511cc7c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/5. 内置组件/5.3 KeepAlive.html.js"), meta: {"e":"\n<h2>基本使用</h2>\n<h3>默认情况下，一个正活跃的组件实例会在切走后被卸载。这会导致它丢失其中所有的状态变化</h3>\n<h3>使我们可以在动态切换多个组件时视情况缓存组件实例</h3>\n<ul>\n<li></li>\n</ul>\n<h2>包含 / 排除</h2>\n<h3>默认情况下， 会不作区分地缓存它之中任何组件</h3>\n<h3>但我们可以通过 include 和 exclude prop 来定制该行为。这两个 prop 的值都是一个以英文逗号分隔的字符串、一个正则表达式，或是包含这两个类型的一个数组</h3>\n<h3>匹配的根据是组件的 name 选项，所以要想通过 KeepAlive 有条件地缓存的组件必须显式声明一个 name 选项</h3>","y":"a","t":"5.3 KeepAlive"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/5.%20%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6/5.4%20Teleport%C2%B7%E4%BC%A0%E9%80%81%E9%97%A8.html", { loader: () => import(/* webpackChunkName: "v-ed6c2a24" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/5. 内置组件/5.4 Teleport·传送门.html.js"), meta: {"e":"\n<h2>作用</h2>\n<h3>可以将一个组件的一部分模板“传送”到该组件的 DOM 层次结构之外的 DOM 节点中</h3>\n<h2>基本使用</h2>\n<h3>有时我们可能会遇到以下情况：组件模板的一部分在逻辑上属于它，但从视图角度来看，在 DOM 中它应该显示在 Vue 应用之外的其他地方</h3>\n<h3>举例：模态框</h3>\n<ul>\n<li>\n<p>理想情况下，我们希望模态框的按钮和模态框本身是在同一个组件中，因为它们都与组件的开关状态有关</p>\n</li>\n<li>\n<p>但这意味着该模态框将与按钮一起呈现，并且位于应用程序的 DOM 更深的层次结构中。在想要通过 CSS 选择器定位该模态框时非常困难</p>\n</li>\n<li>\n<p>试想下面这样的 HTML 结构</p>\n<ul>\n<li>代码</li>\n</ul>\n</li>\n<li>\n<p>接下来我们来看看 modal-button 的实现</p>\n<ul>\n<li>代码</li>\n</ul>\n<div class=\"language-vue\" data-ext=\"vue\" data-title=\"vue\"><pre class=\"language-vue\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">setup</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token script\"><span class=\"token language-javascript\">\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ref <span class=\"token punctuation\">}</span> from <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>vue<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> open <span class=\"token operator\">=</span> <span class=\"token function\">ref</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">&gt;</span></span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>open = true<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>Open Modal<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n  \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>open<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>modal<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">&gt;</span></span>Hello from the modal!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">&gt;</span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>open = false<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">&gt;</span></span>Close<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">&gt;</span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">&gt;</span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">&gt;</span></span>\n  \n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">scoped</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token style\"><span class=\"token language-css\">\n  <span class=\"token selector\">.modal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 999<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 20%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -150px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">&gt;</span></span>\n\n</code></pre></div></li>\n<li>\n<p>这个组件中有一个  按钮来触发打开模态框，和一个类名为 .modal 的 ，它包含了模态框的内容和一个用来关闭的按钮</p>\n</li>\n<li>\n<p>当在初始 HTML 结构中使用这个组件时，会有一些潜在的问题：</p>\n<ul>\n<li>\n<p>position: fixed 能够相对于视口放置的条件是：没有任何祖先元素设置了 transform、perspective 或者 filter</p>\n</li>\n<li>\n<p>如果我们想要用 CSS transform 为祖先节点  设置动画，则会破坏模态框的布局结构</p>\n</li>\n<li>\n<p>这个模态框的 z-index 被包含它的元素所制约</p>\n</li>\n</ul>\n</li>\n<li>\n<p>提供了一个更简洁的方式来解决此类问题，使我们无需考虑那么多层 DOM 结构的问题</p>\n</li>\n</ul>","y":"a","t":"5.4 Teleport·传送门"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/5.%20%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6/5.5%20Suspense.html", { loader: () => import(/* webpackChunkName: "v-29dc2c60" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/5. 内置组件/5.5 Suspense.html.js"), meta: {"e":"\n<h2>简介</h2>\n<h3>是一个内置组件，用来在组件树中编排异步依赖。它可以在等待组件树下的多个嵌套异步依赖项解析完成时，呈现加载状态</h3>\n<h3>是一项实验性功能，目前还不稳定</h3>\n<h2>异步依赖</h2>\n<h3>介绍</h3>\n<ul>\n<li>\n<p>要了解  所解决的问题和它是如何与异步依赖进行交互的，我们需要想象这样一种组件层级结构：</p>\n<ul>\n<li>结构</li>\n</ul>\n<div class=\"language-html\" data-ext=\"html\" data-title=\"html\"><pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Suspense</span><span class=\"token punctuation\">&gt;</span></span>\n  └─ <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Dashboard</span><span class=\"token punctuation\">&gt;</span></span>\n     ├─ <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Profile</span><span class=\"token punctuation\">&gt;</span></span>\n     │  └─ <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>FriendStatus</span><span class=\"token punctuation\">&gt;</span></span>（组件有异步的 setup()）\n     └─ <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Content</span><span class=\"token punctuation\">&gt;</span></span>\n        ├─ <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ActivityFeed</span><span class=\"token punctuation\">&gt;</span></span> （异步组件）\n        └─ <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Stats</span><span class=\"token punctuation\">&gt;</span></span>（异步组件）\n</code></pre></div></li>\n<li>\n<p>在这个组件树中有多个嵌套组件，要渲染出它们，首先得解析一些异步资源。如果没有 ，则它们每个都需要处理自己的加载、报错和完成状态。在最坏的情况下，我们可能会在页面上看到三个旋转的加载态，在不同的时间显示出内容</p>\n</li>\n<li>\n<p>有了  组件后，我们就可以在等待整个多层级组件树中的各个异步依赖获取结果时，在顶层展示出加载中或加载失败的状态</p>\n</li>\n<li>\n<p>可以等待的异步依赖有两种：</p>\n<ul>\n<li>\n<p>带有异步 <code>setup()</code> 钩子的组件</p>\n</li>\n<li>\n<p>异步组件</p>\n</li>\n</ul>\n</li>\n</ul>","y":"a","t":"5.5 Suspense"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/6.%20%E5%8D%87%E7%BA%A7%E8%A7%84%E6%A8%A1/6.1%20%E5%8D%95%E6%96%87%E4%BB%B6%E7%BB%84%E4%BB%B6.html", { loader: () => import(/* webpackChunkName: "v-b8a0af9c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/6. 升级规模/6.1 单文件组件.html.js"), meta: {"e":"\n<h2>介绍</h2>\n<h3>Vue 的单文件组件 (即 *.vue 文件，简称 SFC) 是一种特殊的文件格式，使我们能够将一个 Vue 组件的模板、逻辑与样式封装在单个文件中</h3>\n<h3>Vue 的单文件组件是 HTML、CSS 和 JavaScript 三种元素的自然延伸</h3>\n<h3>、 和  三个块在同一个文件中封装、组合了组件的视图、逻辑和样式</h3>\n<h2>为什么要使用 SFC</h2>\n<h3>尽管 SFC 需要一套构建步骤，但也相应地有非常多优势：</h3>\n<ul>\n<li>\n<p>使用熟悉的 HTML、CSS 和 JavaScript 语法编写模块化的组件</p>\n</li>\n<li>\n<p>罗列本身就强耦合的逻辑关注点</p>\n</li>\n<li>\n<p>预编译模板</p>\n</li>\n<li>\n<p>组件级隔离的 CSS</p>\n</li>\n<li>\n<p>在使用组合式 API 时语法更简单</p>\n</li>\n<li>\n<p>通过交叉分析模板和逻辑代码能进行更多编译时优化</p>\n</li>\n<li>\n<p>更好的 IDE 支持，提供自动补全和对模板中表达式的类型检查</p>\n</li>\n<li>\n<p>开箱即用的模块热更新 (HMR) 支持</p>\n</li>\n</ul>","y":"a","t":"单文件组件"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/6.%20%E5%8D%87%E7%BA%A7%E8%A7%84%E6%A8%A1/6.2%20%E5%B7%A5%E5%85%B7%E9%93%BE.html", { loader: () => import(/* webpackChunkName: "v-8a17784a" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/6. 升级规模/6.2 工具链.html.js"), meta: {"e":"\n<h2>在线尝试</h2>\n<h3>Vue SFC Playground</h3>\n<ul>\n<li>\n<p>https://sfc.vuejs.org/</p>\n</li>\n<li>\n<p>在线尝试单文件组件的使用，始终根据最新的提交部署，用来检查编译输出的结果</p>\n</li>\n</ul>\n<h3>StackBlitz 中的 Vue + Vite</h3>\n<ul>\n<li>\n<p>https://vite.new/vue</p>\n</li>\n<li>\n<p>类似 IDE 的环境，但实际是在浏览器中运行 Vite 开发服务器</p>\n</li>\n</ul>\n<h2>项目脚手架</h2>","y":"a","t":"工具链"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/6.%20%E5%8D%87%E7%BA%A7%E8%A7%84%E6%A8%A1/6.3%20%E8%B7%AF%E7%94%B1.html", { loader: () => import(/* webpackChunkName: "v-957e00ac" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/6. 升级规模/6.3 路由.html.js"), meta: {"e":"\n<h2>官方路由</h2>\n<h3>vue-router</h3>\n<h3>文档：https://router.vuejs.org/</h3>\n<h2>实现一个简单的路由</h2>\n<h3>如果只需要一个简单的页面路由，而不想为此引入一整个路由库，你可以通过动态组件的方式，监听浏览器 hashchange 事件或使用 History API 来更新当前组件</h3>\n<h3>例子</h3>\n<ul>\n<li>import { ref, computed } from 'vue'import Home from './Home.vue'import About from './About.vue'import NotFound from './NotFound.vue'const routes = {  '/': Home,  '/about': About}const currentPath = ref(window.location.hash)window.addEventListener('hashchange', () =&gt; {  currentPath.value = window.location.hash})const currentView = computed(() =&gt; {  return routes[currentPath.value.slice(1) || '/'] || NotFound})  Home |  About |  Broken Link</li>\n</ul>","y":"a","t":"路由"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/6.%20%E5%8D%87%E7%BA%A7%E8%A7%84%E6%A8%A1/6.4%20%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.html", { loader: () => import(/* webpackChunkName: "v-790159bd" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/6. 升级规模/6.4 状态管理.html.js"), meta: {"e":"\n<h2>什么是状态管理</h2>\n<h3>从技术上讲，每一个 Vue 组件实例都已经在“管理”它自己的响应式状态了</h3>\n<h3>比如计数器组件，它是一个独立的单元，由以下几个部分组成</h3>\n<ul>\n<li>状态：驱动整个应用的数据源；视图：对状态的一种声明式映射；动作：状态根据用户在视图中的输入而作出相应变更的可能方式</li>\n</ul>\n<h3>当我们有多个组件共享一个共同的状态时</h3>\n<ul>\n<li>\n<p>多个视图可能都依赖于同一部分状态</p>\n</li>\n<li>\n<p>不同视图中的动作可能需要更改同一部分状态</p>\n</li>\n</ul>\n<h3>对于情景 1，一个可行的办法是将共享状态“提升”到共同的祖先组件上去，再通过 props 传递下来。然而在深层次的组件树结构中这么做的话，很快就会使得代码变得繁琐冗长。这会导致另一个问题：props 深潜</h3>","y":"a","t":"状态管理"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/6.%20%E5%8D%87%E7%BA%A7%E8%A7%84%E6%A8%A1/6.5%20%E6%B5%8B%E8%AF%95.html", { loader: () => import(/* webpackChunkName: "v-55479038" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/6. 升级规模/6.5 测试.html.js"), meta: {"e":"\n<h2>为什么需要测试</h2>\n<h3>自动化测试通过预防回归，并鼓励将应用分解为可测试的函数、模块、类和组件，从而帮助你和你的团队快速、自信地构建复杂的 Vue 应用。与任何应用一样，新的 Vue 应用可能会以多种方式崩溃，因此，在发布前捕获并解决这些问题就变得十分重要</h3>\n<h2>何时测试</h2>\n<h3>尽早开始测试</h3>\n<h2>测试的类型</h2>\n<h3>单元测试：检查给定函数、类或可组合函数的输入是否产生预期的输出或副作用</h3>\n<h3>组件测试：检查你的组件是否正常挂载和渲染、是否可以与之互动，以及表现是否符合预期。这些测试比单元测试导入了更多的代码，更复杂，需要更多时间来执行</h3>","y":"a","t":"测试"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/6.%20%E5%8D%87%E7%BA%A7%E8%A7%84%E6%A8%A1/6.6%20%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93%20(SSR).html", { loader: () => import(/* webpackChunkName: "v-01e859e8" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/6. 升级规模/6.6 服务端渲染 (SSR).html.js"), meta: {"e":"\n<h2>总览</h2>\n<h3>什么是 SSR？</h3>\n<ul>\n<li>\n<p>Vue.js 是一个用于构建客户端应用的框架。默认情况下，Vue 组件在浏览器中生成和操作 DOM 作为输出。然而，我们也可以将相同的组件在服务端渲染成 HTML 字符串，直接返回给浏览器，最后再将静态的 HTML “激活” (hydrate) 为完全交互式的客户端应用</p>\n</li>\n<li>\n<p>一个由服务端渲染的 Vue.js 应用也可以被认为是“同构的”或“通用的”，因为应用的大部分代码同时运行在服务端和客户端</p>\n</li>\n</ul>\n<h3>为什么要用 SSR？</h3>\n<ul>\n<li>\n<p>优势</p>\n<ul>\n<li>\n<p>更快的内容到达时间</p>\n</li>\n<li>\n<p>统一的心智模型</p>\n</li>\n<li>\n<p>更好的 SEO</p>\n</li>\n</ul>\n</li>\n<li>\n<p>权衡之处</p>\n<ul>\n<li>\n<p>开发中的限制</p>\n</li>\n<li>\n<p>更多的与构建配置和部署相关的要求</p>\n</li>\n<li>\n<p>更高的服务端负载</p>\n</li>\n<li>\n<p>小结：在为你的应用使用 SSR 之前，你首先应该问自己是否真的需要它。这主要取决于内容到达时间对应用的重要程度</p>\n</li>\n</ul>\n</li>\n</ul>","y":"a","t":"服务端渲染 (SSR)"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/7.%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/7.1%20%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2.html", { loader: () => import(/* webpackChunkName: "v-21d35f5a" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/7. 最佳实践/7.1 生产环境部署.html.js"), meta: {"e":"\n<h2>开发环境 vs. 生产环境</h2>\n<h3>在开发过程中，Vue 提供了许多功能来提升开发体验：</h3>\n<ul>\n<li>\n<p>对常见错误和隐患的警告</p>\n</li>\n<li>\n<p>对 prop / 事件的校验</p>\n</li>\n<li>\n<p>响应性调试钩子</p>\n</li>\n<li>\n<p>开发工具集成</p>\n</li>\n</ul>\n<h3>然而，这些功能在生产环境中并不能发挥作用。一些警告检查也会产生少量的性能开销。当部署到生产环境中时，我们应该移除所有未使用的、仅用于开发环境的代码分支，来获得更小的包体积和更好的性能</h3>\n<h2>不使用构建工具</h2>","y":"a","t":"生产环境部署"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/7.%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/7.2%20%E6%80%A7%E8%83%BD.html", { loader: () => import(/* webpackChunkName: "v-32ba4644" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/7. 最佳实践/7.2 性能.html.js"), meta: {"e":"\n<h2>概述</h2>\n<h3>Vue 的设计对于大多数常见的使用情况来说都是性能优秀的，不需要太多的手动优化。然而，总有一些具有挑战性的场景需要进行额外的细微调整</h3>\n<h3>首先，让我们讨论一下网络性能的两个主要方面：</h3>\n<ul>\n<li>\n<p>页面加载性能：应用展示出内容与首次访问时变为可交互的速度</p>\n</li>\n<li>\n<p>更新性能：应用响应用户输入更新的速度</p>\n</li>\n</ul>\n<h3>虽然最理想的情况是将两者都最大化，但是不同的前端架构往往会影响到在这些方面是否能达到更理想的性能</h3>\n<h2>分析选项</h2>\n<h3>为了提高性能，我们首先需要知道如何衡量它。在这方面，有一些很棒的工具可以提供帮助：</h3>","y":"a","t":"性能"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/7.%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/7.3%20%E6%97%A0%E9%9A%9C%E7%A2%8D%E8%AE%BF%E9%97%AE.html", { loader: () => import(/* webpackChunkName: "v-135b7417" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/7. 最佳实践/7.3 无障碍访问.html.js"), meta: {"e":"\n<h2>介绍</h2>\n<h3>Web 无障碍访问 (也称为 a11y) 是指创建可供任何人都可以使用的网站的做法——无论是身患某种障碍、通过慢速的网络连接访问、使用老旧或损坏的硬件，还是仅处于某种不方便的环境</h3>\n<h3>可先阅读由万维网联盟 (W3C) 提供的 Web 无障碍访问的规划和管理</h3>\n<ul>\n<li>https://www.w3.org/WAI/planning-and-managing/</li>\n</ul>\n<h2>跳过链接</h2>\n<h3>你应该在每个页面的顶部添加一个直接指向主内容区域的链接，这样用户就可以跳过在多个网页上重复的内容</h3>\n<h3>通常这个链接会放在 App.vue 的顶部，这样它就会是所有页面上的第一个可聚焦元素</h3>","y":"a","t":"无障碍访问"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/7.%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/7.4%20%E5%AE%89%E5%85%A8.html", { loader: () => import(/* webpackChunkName: "v-2b936ec6" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/7. 最佳实践/7.4 安全.html.js"), meta: {"e":"\n<h2>报告漏洞</h2>\n<h3>建议始终使用最新版本的 Vue 及其官方配套库，以确保你的应用尽可能地安全</h3>\n<h3>如需报告漏洞，请发送电子邮件至 security@vuejs.org</h3>\n<h2>首要规则：不要使用无法信赖的模板</h2>\n<h3>使用 Vue 时最基本的安全规则就是不要将无法信赖的内容作为你的组件模板。使用无法信赖的模板相当于允许任意的 JavaScript 在你的应用中执行。更糟糕的是，如果在服务端渲染时执行了这些代码，可能会导致服务器被攻击</h3>\n<h2>Vue 如何保护你</h2>\n<h3>HTML 内容</h3>\n<ul>\n<li>无论是使用模板还是渲染函数，内容都是自动转义的。</li>\n</ul>","y":"a","t":"安全"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/8.%20TypeScript/8.1%20%E6%90%AD%E9%85%8D%20TypeScript%20%E4%BD%BF%E7%94%A8%20Vue.html", { loader: () => import(/* webpackChunkName: "v-4b789ce8" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/8. TypeScript/8.1 搭配 TypeScript 使用 Vue.html.js"), meta: {"e":"\n<h2>介绍</h2>\n<h3>像 TypeScript 这样的类型系统可以在编译时通过静态分析检测出很多常见错误。这减少了生产环境中的运行时错误，也让我们在重构大型项目的时候更有信心。通过 IDE 中基于类型的自动补全，TypeScript 还改善了开发体验和效率</h3>\n<h3>Vue 本身就是用 TypeScript 编写的，并对 TypeScript 提供了头等的支持。所有的 Vue 官方库都提供了类型声明文件，开箱即用</h3>\n<h2>项目启动</h2>\n<h3>create-vue 介绍</h3>\n<ul>\n<li>create-vue，即官方的项目脚手架工具，提供了搭建基于 Vite 且 TypeScript 就绪的 Vue 项目的选项</li>\n</ul>","y":"a","t":"8.1 搭配 TypeScript 使用 Vue"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/8.%20TypeScript/8.2%20TypeScript%20%E4%B8%8E%E7%BB%84%E5%90%88%E5%BC%8F%20API.html", { loader: () => import(/* webpackChunkName: "v-0487a9ae" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/8. TypeScript/8.2 TypeScript 与组合式 API.html.js"), meta: {"e":"\n<h2>为组件的 prop 标注类型</h2>\n<h3>使用  时，<code>defineProps()</code> 支持从它的参数中推导类型</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token operator\">&lt;</span>script setup lang<span class=\"token operator\">=</span><span class=\"token string\">'ts'</span><span class=\"token operator\">&gt;</span>\n<span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token function\">defineProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> Number\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nprops<span class=\"token punctuation\">.</span>foo <span class=\"token comment\">// string</span>\nprops<span class=\"token punctuation\">.</span>bar <span class=\"token comment\">// number | undefined</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">&gt;</span>\n\n</code></pre></div>","y":"a","t":"8.2 TypeScript 与组合式 API"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/8.%20TypeScript/8.3%20TypeScript%20%E4%B8%8E%E9%80%89%E9%A1%B9%E5%BC%8F%20API.html", { loader: () => import(/* webpackChunkName: "v-56e08b14" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/8. TypeScript/8.3 TypeScript 与选项式 API.html.js"), meta: {"e":"\n<h2>为组件的 prop 标注类型</h2>\n<h3>选项式 API 中对 prop 的类型推导需要用 <code>defineComponent()</code> 来包装组件。有了它，Vue 才可以通过 props 以及一些额外的选项，比如 required: true 和 default 来推导出 prop 的类型</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defineComponent <span class=\"token punctuation\">}</span> from <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>vue<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 启用了类型推导</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Number<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">msg</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">required</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">metadata</span><span class=\"token operator\">:</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token comment\">// 类型：string | undefined</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token comment\">// 类型：number | string | undefined</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg <span class=\"token comment\">// 类型：string</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>metadata <span class=\"token comment\">// 类型：any</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n</code></pre></div>","y":"a","t":"8.3 TypeScript 与选项式 API"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/9.%20%E8%BF%9B%E9%98%B6/9.1%20%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F%E4%BD%BF%E7%94%A8%20Vue.html", { loader: () => import(/* webpackChunkName: "v-1edd0694" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/9. 进阶/9.1 多种方式使用 Vue.html.js"), meta: {"e":"\n<h2>独立脚本</h2>\n<h3>Vue 可以是一个独立的脚本文件，无需构建步骤！如果你已经有了一个后端框架、承担大部分的 HTML 渲染，或者你的前端逻辑并不复杂，不需要构建步骤，这会是你集成 Vue 最容易的方式。你可以在这些场景中将 Vue 想象成 jQuery 的一个更加声明式的替代</h3>\n<h3>Vue 也提供了另一个适用于此类无构建步骤场景的替代版 petite-vue，主要为渐进式增强已有的 HTML 作了特别的优化。功能更加精简，十分轻量</h3>\n<h2>嵌入 Web Component</h2>\n<h3>你可以用 Vue 来构建标准的 Web Component，这可以被嵌入在任何 HTML 页面中，无论它们是如何被渲染的。这个选项使你以一种完全与消费侧无关的方式利用 Vue 来生成 Web Component，它们可以嵌入旧版本的应用程序、静态 HTML，甚至用其他框架构建的应用程序</h3>","y":"a","t":"9.1 多种方式使用 Vue"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/9.%20%E8%BF%9B%E9%98%B6/9.2%20%E7%BB%84%E5%90%88%E5%BC%8F%20API%20FAQ.html", { loader: () => import(/* webpackChunkName: "v-e1667830" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/9. 进阶/9.2 组合式 API FAQ.html.js"), meta: {"e":"\n<h2>什么是组合式 API？</h2>\n<h3>组合式 API 是一系列 API 的集合，使我们可以使用函数而不是声明选项的方式书写 Vue 组件</h3>\n<h3>涵盖了以下方面的 API</h3>\n<ul>\n<li>\n<p>响应性 API：例如<code> ref()</code> 和 <code>reactive()</code></p>\n</li>\n<li>\n<p>生命周期钩子：例如 <code>onMounted()</code> 和<code>onUnmounted()</code></p>\n</li>\n<li>\n<p>依赖注入：例如 <code>provide()</code> 和 <code>inject()</code></p>\n</li>\n</ul>","y":"a","t":"9.2 组合式 API FAQ"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/9.%20%E8%BF%9B%E9%98%B6/9.3%20%E6%B7%B1%E5%85%A5%E5%93%8D%E5%BA%94%E5%BC%8F%E7%B3%BB%E7%BB%9F.html", { loader: () => import(/* webpackChunkName: "v-9566b72c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/9. 进阶/9.3 深入响应式系统.html.js"), meta: {"e":"\n<h2>什么是 Vue 的响应性</h2>\n<h3>简单来说就是，Vue 会自动跟踪 JavaScript 状态变化并在改变发生时响应式地更新 DOM</h3>\n<h2>Vue 中的响应性是如何工作的</h2>\n<h3>在JS中可以追踪一个对象的属性进行读和写的来实现响应式</h3>\n<h3>在 JavaScript 中有两种劫持属性访问的方式：getter/setters 和 Proxies</h3>\n<ul>\n<li>Vue 2 使用 getter/setters 完全由于需支持更旧版本浏览器的限制</li>\n</ul>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code>  <span class=\"token keyword\">function</span> <span class=\"token function\">reactive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">track</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span>\n        target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre></div>","y":"a","t":"9.3 深入响应式系统"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/9.%20%E8%BF%9B%E9%98%B6/9.4%20%E6%B8%B2%E6%9F%93%E6%9C%BA%E5%88%B6.html", { loader: () => import(/* webpackChunkName: "v-5fdd1d98" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/9. 进阶/9.4 渲染机制.html.js"), meta: {"e":"\n<h2>虚拟 DOM</h2>\n<h3>虚拟 <code>DOM(VDOM) </code>是一种编程概念，意为将将目标所需的 UI 通过数据结构“虚拟”地表示出来，保存在内存中，并与真实的 DOM 保持同步</h3>\n<h3>与其说虚拟 DOM 是一种具体的技术，不如说是一种模式。所以没有一个标准的实现。我们可以用一个简单的例子来说明</h3>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> vnode <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>div<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>hello<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token comment\">/* 更多 vnode */</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//这里所说的 vnode 即一个纯 JavaScript 的对象 (一个“虚拟节点”)，它代表着一个 &lt;div&gt; 元素。它包含我们创建实际元素所需的所有信息。它还包含更多的子节点，这使它成为虚拟 DOM 树的根节点。</span>\n\n</code></pre></div>","y":"a","t":"9.4 渲染机制"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/9.%20%E8%BF%9B%E9%98%B6/9.5%20%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0%20_amp_%20JSX.html", { loader: () => import(/* webpackChunkName: "v-6f1575f5" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/9. 进阶/9.5 渲染函数 _amp_ JSX.html.js"), meta: {"e":"\n<h2>基本用法</h2>\n<h3>创建 Vnodes</h3>\n<ul>\n<li>\n<p>Vue 提供了一个 <code>h()</code> 函数用于创建 vnodes</p>\n</li>\n<li>\n<p><code>h()</code> 是 hyperscript 的简称——意思是 \"能生成 HTML (超文本标记语言) 的 JavaScript\"。这个名字来源于许多虚拟 DOM 实现时共享的约定。 一个更准确的名称应该是 <code>createVnode()</code> ， 但当你需要多次使用渲染函数时，一个简短的名字能更好地帮到你</p>\n</li>\n<li>\n<p><code>h()</code> 函数的使用方式非常的灵活</p>\n<ul>\n<li>例如</li>\n</ul>\n<div class=\"language-javascript\" data-ext=\"js\" data-title=\"js\"><pre class=\"language-javascript\"><code><span class=\"token comment\">// 除了类型必填以外，其他的参数都是可选的</span>\n <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>div<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>div<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>foo<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// attribute 和 property 都能在 prop 中书写</span>\n <span class=\"token comment\">// Vue 会自动将它们分配到正确的位置</span>\n <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>div<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>bar<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">innerHTML</span><span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>hello<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 类与样式可以像在模板中一样</span>\n <span class=\"token comment\">// 用数组或对象的形式书写</span>\n <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>div<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>foo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> bar <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">color</span><span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>red<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 事件监听器应以 onXxx 的形式书写</span>\n <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>div<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token function-variable function\">onClick</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// children 可以是一个字符串</span>\n <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>div<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>foo<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>hello<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// 没有 props 时可以省略不写</span>\n <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>div<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>hello<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>div<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>span<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>hello<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n \n <span class=\"token comment\">// children 数组可以同时包含 vnodes 与字符串</span>\n <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>div<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>hello<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>span<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span>hello<span class=\"token operator\">&amp;</span>#<span class=\"token number\">39</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div></li>\n</ul>","y":"a","t":"9.5 渲染函数 & JSX"} }],
  ["/web/react/code-init/ant-unocss-ts-vite-react.html", { loader: () => import(/* webpackChunkName: "v-06309e6f" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/react/code-init/ant-unocss-ts-vite-react.html.js"), meta: {"g":["React","初始代码库","antd","axios","前端"],"e":"<div align=\"center\">\n    <img width=\"200px\" height=\"200px\" src=\"https://www.z4a.net/images/2023/09/12/logo.png\">\n    <h1>\n\t\t<a href=\"https://github.com/NightSquirrl/ant-unocss-ts-vite-react\" target=\"_blank\">ant-unocss-ts-vite-react</a>\n\t</h1>\n    <p>-代码相关说明-</p>\n</div>\n<br>\n<br>\n<h1>主要使用到的技术</h1>\n<p><code>vite axios unocss eslint antd ts react-router</code></p>","y":"a","t":"😤 react 脚手架封装"} }],
  ["/404.html", { loader: () => import(/* webpackChunkName: "v-8fe89ed2" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/404.html.js"), meta: {"y":"p","t":""} }],
  ["/interview/", { loader: () => import(/* webpackChunkName: "v-ec7114ea" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/interview/index.html.js"), meta: {"y":"p","t":"Interview"} }],
  ["/server/", { loader: () => import(/* webpackChunkName: "v-7f131746" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/index.html.js"), meta: {"y":"p","t":"Server"} }],
  ["/rear-end/JavaWeb/", { loader: () => import(/* webpackChunkName: "v-1ec97a0b" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/JavaWeb/index.html.js"), meta: {"y":"p","t":"Java Web"} }],
  ["/rear-end/", { loader: () => import(/* webpackChunkName: "v-30570ee4" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/index.html.js"), meta: {"y":"p","t":"Rear End"} }],
  ["/rear-end/Java/", { loader: () => import(/* webpackChunkName: "v-2460e84d" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/rear-end/Java/index.html.js"), meta: {"y":"p","t":"Java"} }],
  ["/server/mysql/", { loader: () => import(/* webpackChunkName: "v-5e58f92c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/mysql/index.html.js"), meta: {"y":"p","t":"Mysql"} }],
  ["/server/node/", { loader: () => import(/* webpackChunkName: "v-dee9e3c4" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/node/index.html.js"), meta: {"y":"p","t":"Node"} }],
  ["/server/window/", { loader: () => import(/* webpackChunkName: "v-facc0620" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/server/window/index.html.js"), meta: {"y":"p","t":"Window"} }],
  ["/web/", { loader: () => import(/* webpackChunkName: "v-66489a58" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/index.html.js"), meta: {"y":"p","t":"Web"} }],
  ["/web/Vue/", { loader: () => import(/* webpackChunkName: "v-0ba123be" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue/index.html.js"), meta: {"y":"p","t":"Vue"} }],
  ["/web/css/", { loader: () => import(/* webpackChunkName: "v-0123a964" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/css/index.html.js"), meta: {"y":"p","t":"Css"} }],
  ["/web/network-request/", { loader: () => import(/* webpackChunkName: "v-2f171c52" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/network-request/index.html.js"), meta: {"y":"p","t":"Network Request"} }],
  ["/web/optimize/", { loader: () => import(/* webpackChunkName: "v-660b3c70" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/optimize/index.html.js"), meta: {"y":"p","t":"Optimize"} }],
  ["/web/package/", { loader: () => import(/* webpackChunkName: "v-72b74ec1" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/package/index.html.js"), meta: {"y":"p","t":"Package"} }],
  ["/web/threeJs/", { loader: () => import(/* webpackChunkName: "v-773c3e40" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/threeJs/index.html.js"), meta: {"y":"p","t":"Three Js"} }],
  ["/web/uni-app/", { loader: () => import(/* webpackChunkName: "v-c09466fa" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/uni-app/index.html.js"), meta: {"y":"p","t":"Uni App"} }],
  ["/web/%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/", { loader: () => import(/* webpackChunkName: "v-15851c99" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/常用方法/index.html.js"), meta: {"y":"p","t":"常用方法"} }],
  ["/web/PDF/", { loader: () => import(/* webpackChunkName: "v-19656f35" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/PDF/index.html.js"), meta: {"y":"p","t":"PDF"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/1.%20%E5%BC%80%E5%A7%8B/", { loader: () => import(/* webpackChunkName: "v-a1bbc6b4" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/1. 开始/index.html.js"), meta: {"y":"p","t":"1. 开始"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/", { loader: () => import(/* webpackChunkName: "v-f2e8c3b6" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/index.html.js"), meta: {"y":"p","t":"Vue文档"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/2.%20%E5%9F%BA%E7%A1%80/", { loader: () => import(/* webpackChunkName: "v-8bf3fa2c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/2. 基础/index.html.js"), meta: {"y":"p","t":"2. 基础"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/3.%20%E6%B7%B1%E5%85%A5%E7%BB%84%E4%BB%B6/", { loader: () => import(/* webpackChunkName: "v-03157e6e" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/3. 深入组件/index.html.js"), meta: {"y":"p","t":"3. 深入组件"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/4.%20%E5%8F%AF%E9%87%8D%E7%94%A8%E6%80%A7/", { loader: () => import(/* webpackChunkName: "v-4cf0d391" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/4. 可重用性/index.html.js"), meta: {"y":"p","t":"4. 可重用性"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/5.%20%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6/", { loader: () => import(/* webpackChunkName: "v-6a6fbe32" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/5. 内置组件/index.html.js"), meta: {"y":"p","t":"5. 内置组件"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/6.%20%E5%8D%87%E7%BA%A7%E8%A7%84%E6%A8%A1/", { loader: () => import(/* webpackChunkName: "v-37da02ef" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/6. 升级规模/index.html.js"), meta: {"y":"p","t":"6. 升级规模"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/7.%20%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/", { loader: () => import(/* webpackChunkName: "v-51e82641" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/7. 最佳实践/index.html.js"), meta: {"y":"p","t":"7. 最佳实践"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/8.%20TypeScript/", { loader: () => import(/* webpackChunkName: "v-44319f85" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/8. TypeScript/index.html.js"), meta: {"y":"p","t":"8. Type Script"} }],
  ["/web/Vue%E6%96%87%E6%A1%A3/9.%20%E8%BF%9B%E9%98%B6/", { loader: () => import(/* webpackChunkName: "v-31022eae" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/Vue文档/9. 进阶/index.html.js"), meta: {"y":"p","t":"9. 进阶"} }],
  ["/web/react/code-init/", { loader: () => import(/* webpackChunkName: "v-4bfa9d67" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/react/code-init/index.html.js"), meta: {"y":"p","t":"Code Init"} }],
  ["/web/react/", { loader: () => import(/* webpackChunkName: "v-28f1ac28" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/web/react/index.html.js"), meta: {"y":"p","t":"React"} }],
  ["/category/", { loader: () => import(/* webpackChunkName: "v-4a79ed7c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/category/index.html.js"), meta: {"y":"p","t":"分类","I":false} }],
  ["/tag/", { loader: () => import(/* webpackChunkName: "v-2d1b5e52" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/index.html.js"), meta: {"y":"p","t":"标签","I":false} }],
  ["/tag/%E9%9D%A2%E8%AF%95/", { loader: () => import(/* webpackChunkName: "v-149a2990" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/面试/index.html.js"), meta: {"y":"p","t":"标签: 面试","I":false} }],
  ["/tag/vue/", { loader: () => import(/* webpackChunkName: "v-0d64d8fb" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/vue/index.html.js"), meta: {"y":"p","t":"标签: Vue","I":false} }],
  ["/tag/%E5%9B%BE%E5%BA%8A/", { loader: () => import(/* webpackChunkName: "v-e4720a02" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/图床/index.html.js"), meta: {"y":"p","t":"标签: 图床","I":false} }],
  ["/tag/%E6%9C%8D%E5%8A%A1%E5%99%A8/", { loader: () => import(/* webpackChunkName: "v-60c96a0d" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/服务器/index.html.js"), meta: {"y":"p","t":"标签: 服务器","I":false} }],
  ["/tag/maven/", { loader: () => import(/* webpackChunkName: "v-7902c516" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/maven/index.html.js"), meta: {"y":"p","t":"标签: Maven","I":false} }],
  ["/tag/javaweb/", { loader: () => import(/* webpackChunkName: "v-47b5d38f" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/javaweb/index.html.js"), meta: {"y":"p","t":"标签: JavaWeb","I":false} }],
  ["/tag/springboot/", { loader: () => import(/* webpackChunkName: "v-c58bbe28" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/springboot/index.html.js"), meta: {"y":"p","t":"标签: SpringBoot","I":false} }],
  ["/tag/mybatis-plus/", { loader: () => import(/* webpackChunkName: "v-3b80d1b7" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/mybatis-plus/index.html.js"), meta: {"y":"p","t":"标签: Mybatis-plus","I":false} }],
  ["/tag/redis/", { loader: () => import(/* webpackChunkName: "v-4735eb26" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/redis/index.html.js"), meta: {"y":"p","t":"标签: Redis","I":false} }],
  ["/tag/spring/", { loader: () => import(/* webpackChunkName: "v-0147bb1e" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/spring/index.html.js"), meta: {"y":"p","t":"标签: Spring","I":false} }],
  ["/tag/mybatis/", { loader: () => import(/* webpackChunkName: "v-1d31ad0e" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/mybatis/index.html.js"), meta: {"y":"p","t":"标签: Mybatis","I":false} }],
  ["/tag/jwt/", { loader: () => import(/* webpackChunkName: "v-7123b9cc" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/jwt/index.html.js"), meta: {"y":"p","t":"标签: JWT","I":false} }],
  ["/tag/swagger/", { loader: () => import(/* webpackChunkName: "v-16dae0f7" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/swagger/index.html.js"), meta: {"y":"p","t":"标签: Swagger","I":false} }],
  ["/tag/java/", { loader: () => import(/* webpackChunkName: "v-eaf775ae" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/java/index.html.js"), meta: {"y":"p","t":"标签: Java","I":false} }],
  ["/tag/nginx/", { loader: () => import(/* webpackChunkName: "v-a5fcd8b2" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/nginx/index.html.js"), meta: {"y":"p","t":"标签: NGINX","I":false} }],
  ["/tag/%E5%B0%81%E8%A3%85/", { loader: () => import(/* webpackChunkName: "v-58f97332" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/封装/index.html.js"), meta: {"y":"p","t":"标签: 封装","I":false} }],
  ["/tag/mysql/", { loader: () => import(/* webpackChunkName: "v-5ebc619f" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/mysql/index.html.js"), meta: {"y":"p","t":"标签: MySql","I":false} }],
  ["/tag/node/", { loader: () => import(/* webpackChunkName: "v-b4b9d56e" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/node/index.html.js"), meta: {"y":"p","t":"标签: node","I":false} }],
  ["/tag/nvm/", { loader: () => import(/* webpackChunkName: "v-2a86bd7c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/nvm/index.html.js"), meta: {"y":"p","t":"标签: nvm","I":false} }],
  ["/tag/%E5%89%8D%E7%AB%AF/", { loader: () => import(/* webpackChunkName: "v-10421a49" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/前端/index.html.js"), meta: {"y":"p","t":"标签: 前端","I":false} }],
  ["/tag/echarts/", { loader: () => import(/* webpackChunkName: "v-614b20f2" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/echarts/index.html.js"), meta: {"y":"p","t":"标签: Echarts","I":false} }],
  ["/tag/react/", { loader: () => import(/* webpackChunkName: "v-123c0ca2" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/react/index.html.js"), meta: {"y":"p","t":"标签: React","I":false} }],
  ["/tag/ffmpeg/", { loader: () => import(/* webpackChunkName: "v-2220ffe6" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/ffmpeg/index.html.js"), meta: {"y":"p","t":"标签: ffmpeg","I":false} }],
  ["/tag/video/", { loader: () => import(/* webpackChunkName: "v-5c185c26" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/video/index.html.js"), meta: {"y":"p","t":"标签: video","I":false} }],
  ["/tag/google-drive/", { loader: () => import(/* webpackChunkName: "v-703f7e56" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/google-drive/index.html.js"), meta: {"y":"p","t":"标签: Google Drive","I":false} }],
  ["/tag/qrcode/", { loader: () => import(/* webpackChunkName: "v-6c24a206" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/qrcode/index.html.js"), meta: {"y":"p","t":"标签: QrCode","I":false} }],
  ["/tag/vue-router/", { loader: () => import(/* webpackChunkName: "v-6eae2d4a" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/vue-router/index.html.js"), meta: {"y":"p","t":"标签: vue-router","I":false} }],
  ["/tag/vuex/", { loader: () => import(/* webpackChunkName: "v-40636d99" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/vuex/index.html.js"), meta: {"y":"p","t":"标签: vuex","I":false} }],
  ["/tag/pinia/", { loader: () => import(/* webpackChunkName: "v-33ac17f4" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/pinia/index.html.js"), meta: {"y":"p","t":"标签: pinia","I":false} }],
  ["/tag/css/", { loader: () => import(/* webpackChunkName: "v-4ec03f44" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/css/index.html.js"), meta: {"y":"p","t":"标签: CSS","I":false} }],
  ["/tag/ajax/", { loader: () => import(/* webpackChunkName: "v-72cff26b" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/ajax/index.html.js"), meta: {"y":"p","t":"标签: AJAX","I":false} }],
  ["/tag/xhr/", { loader: () => import(/* webpackChunkName: "v-187e7d7f" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/xhr/index.html.js"), meta: {"y":"p","t":"标签: XHR","I":false} }],
  ["/tag/websocket/", { loader: () => import(/* webpackChunkName: "v-00b0a04c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/websocket/index.html.js"), meta: {"y":"p","t":"标签: WebSocket","I":false} }],
  ["/tag/%E4%BC%98%E5%8C%96/", { loader: () => import(/* webpackChunkName: "v-df70cfe6" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/优化/index.html.js"), meta: {"y":"p","t":"标签: 优化","I":false} }],
  ["/tag/gulp/", { loader: () => import(/* webpackChunkName: "v-44903659" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/gulp/index.html.js"), meta: {"y":"p","t":"标签: Gulp","I":false} }],
  ["/tag/babel/", { loader: () => import(/* webpackChunkName: "v-13073157" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/babel/index.html.js"), meta: {"y":"p","t":"标签: babel","I":false} }],
  ["/tag/webpack/", { loader: () => import(/* webpackChunkName: "v-29651b34" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/webpack/index.html.js"), meta: {"y":"p","t":"标签: Webpack","I":false} }],
  ["/tag/seo/", { loader: () => import(/* webpackChunkName: "v-66e8ec78" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/seo/index.html.js"), meta: {"y":"p","t":"标签: SEO","I":false} }],
  ["/tag/axios/", { loader: () => import(/* webpackChunkName: "v-0f93ad6a" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/axios/index.html.js"), meta: {"y":"p","t":"标签: axios","I":false} }],
  ["/tag/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "v-49fbe4fe" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/正则表达式/index.html.js"), meta: {"y":"p","t":"标签: 正则表达式","I":false} }],
  ["/tag/%E5%B7%A5%E5%85%B7/", { loader: () => import(/* webpackChunkName: "v-4093c659" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/工具/index.html.js"), meta: {"y":"p","t":"标签: 工具","I":false} }],
  ["/tag/three.js/", { loader: () => import(/* webpackChunkName: "v-7202f4d2" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/three.js/index.html.js"), meta: {"y":"p","t":"标签: three.js","I":false} }],
  ["/tag/uni-app/", { loader: () => import(/* webpackChunkName: "v-5fe9f67d" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/uni-app/index.html.js"), meta: {"y":"p","t":"标签: uni-app","I":false} }],
  ["/tag/array/", { loader: () => import(/* webpackChunkName: "v-1e4570f0" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/array/index.html.js"), meta: {"y":"p","t":"标签: Array","I":false} }],
  ["/tag/%E7%AE%97%E6%B3%95/", { loader: () => import(/* webpackChunkName: "v-7f16a6ed" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/算法/index.html.js"), meta: {"y":"p","t":"标签: 算法","I":false} }],
  ["/tag/rollup/", { loader: () => import(/* webpackChunkName: "v-2454dc73" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/rollup/index.html.js"), meta: {"y":"p","t":"标签: rollup","I":false} }],
  ["/tag/sdk/", { loader: () => import(/* webpackChunkName: "v-817c2472" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/sdk/index.html.js"), meta: {"y":"p","t":"标签: SDK","I":false} }],
  ["/tag/pdfjs/", { loader: () => import(/* webpackChunkName: "v-47154234" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/pdfjs/index.html.js"), meta: {"y":"p","t":"标签: pdfjs","I":false} }],
  ["/tag/%E5%88%9D%E5%A7%8B%E4%BB%A3%E7%A0%81%E5%BA%93/", { loader: () => import(/* webpackChunkName: "v-f12b134c" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/初始代码库/index.html.js"), meta: {"y":"p","t":"标签: 初始代码库","I":false} }],
  ["/tag/antd/", { loader: () => import(/* webpackChunkName: "v-141fa90e" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/tag/antd/index.html.js"), meta: {"y":"p","t":"标签: antd","I":false} }],
  ["/article/", { loader: () => import(/* webpackChunkName: "v-7be5f476" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/article/index.html.js"), meta: {"y":"p","t":"文章","I":false} }],
  ["/star/", { loader: () => import(/* webpackChunkName: "v-8847cf24" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/star/index.html.js"), meta: {"y":"p","t":"星标","I":false} }],
  ["/timeline/", { loader: () => import(/* webpackChunkName: "v-d5b24bc2" */"/Users/zeroeldath/Desktop/ignore-space/whatToolsBlog/src/.vuepress/.temp/pages/timeline/index.html.js"), meta: {"y":"p","t":"时间轴","I":false} }],
]);

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updateRoutes) {
    __VUE_HMR_RUNTIME__.updateRoutes(routes)
  }
  if (__VUE_HMR_RUNTIME__.updateRedirects) {
    __VUE_HMR_RUNTIME__.updateRedirects(redirects)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ routes, redirects }) => {
    __VUE_HMR_RUNTIME__.updateRoutes(routes)
    __VUE_HMR_RUNTIME__.updateRedirects(redirects)
  })
}
