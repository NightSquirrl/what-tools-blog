
前言:

![image.png](http://image.huawei.com/tiny-lts/v1/images/hi3ms/f01ce4b6a479c2e0aa0d5d4f06251608_1255x217.png@900-0-90-f.png)

Flex 布局是轴线布局，只能指定"项目"针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成"行"和"列"，产生单元格，然后指定"项目所在"的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。

## 基本概念

- 使用网格布局包裹的部分称为容器container 内部子元素称为item
- 布局是对行和列的控制
- 单元格,n行m列产生n*m的单元格
- 单元格的划分称为网格线 n行n+1个水平网格线,m列m+1垂直网格线

## 容器`container`属性

### `display`

```css
div {
    display:grid; // 显示使用网格布局,内部的元素变为块级元素
    display:inline-grid;// 行内元素
}
```
### `grid-template-columns grid-template-rows`

分别指定每一列,每一行的宽度和高度

```css
.container {
  display: grid;
  grid-template-columns: 100px 100px 100px;
  grid-template-rows: 100px 100px 100px;
}

// 设置了三列 三行
```

#### `repeat`

重复同样的属性

```css
.container {
  display: grid;
  grid-template-columns: repeat(3, 33.33%);
  grid-template-rows: repeat(3, 33.33%);
}

// 变形

grid-template-columns: repeat(2, 100px 20px 80px); 

// 等价于

grid-template-columns: repeat( 100px 20px 80px, 100px 20px 80px);

```

#### `auto-fill`

适用于 单元格大小确定,容器的大小不确定(设置单元格大小确定,同时,一行的个数并不确定)

```css
.container {
  display: grid;
  grid-template-columns: repeat(auto-fill, 100px);
}


// 表示每列宽度100px，然后自动填充，直到容器不能放置更多的列。
```

#### `fr单位或者关键字`

```css
.container {
  display: grid;
  grid-template-columns: 1fr 1fr;
}

.container {
  display: grid;
  grid-template-columns: 150px 1fr 2fr;
}

```

#### 网格线的名称

```css
.container {
  display: grid;
  grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4];
  grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];
}

```

上面代码指定网格布局为3行 x 3列，因此有4根垂直网格线和4根水平网格线。方括号里面依次是这八根线的名字。

网格布局允许同一根线有多个名字，比如[fifth-line row-5]。

### gap

分别有

- grid-row-gap : 设置行与行之间的间隙
- grid-column-gap: 设置列与列之间的间隙
- grid-gap: 同时设置行与列的间隙

### grid-template-areas

区域的划分

```css
.container {
  display: grid;
  grid-template-columns: 100px 100px 100px;
  grid-template-rows: 100px 100px 100px;
  grid-template-areas: 'a b c'
                       'd e f'
                       'g h i';
}

// 上面代码先划分出9个单元格，然后将其定名为a到i的九个区域，分别对应这九个单元格。
```

多个单元格合并成一个区域的写法如下。

```css
grid-template-areas: 'a a a'
                     'b b b'
                     'c c c'
```

> 注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为区域名-start，终止网格线自动命名为区域名-end。
> 比如，区域名为header，则起始位置的水平网格线和垂直网格线叫做header-start，终止位置的水平网格线和垂直网格线叫做header-end。


### grid-auto-flow

划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是"先行后列"，即先填满第一行，再开始放入第二行，即下图数字的顺序。
这个顺序由grid-auto-flow属性决定，默认值是row，即"先行后列"。也可以将它设成column，变成"先列后行"。

```css
grid-auto-flow: column; // 先列后行
grid-auto-flow: row; // 先行后列
grid-auto-flow: row dense; // 紧密排布
grid-auto-flow: column dense;
```

### justify-items align-items place-items 

![image.png](http://image.huawei.com/tiny-lts/v1/images/hi3ms/c0933bd8bec3654d51b1d6a4ab5bded5_570x344.png@900-0-90-f.png)

![image.png](http://image.huawei.com/tiny-lts/v1/images/hi3ms/53ed3ca487ebc0a1baa2c21f72d31a34_560x317.png@900-0-90-f.png)

`justify-items`属性设置单元格内容的水平位置（左中右），`align-items`属性设置单元格内容的垂直位置（上中下）。

```css
.container {
  justify-items: start | end | center | stretch;
  align-items: start | end | center | stretch;
}

start：对齐单元格的起始边缘。
end：对齐单元格的结束边缘。
center：单元格内部居中。
stretch：拉伸，占满单元格的整个宽度（默认值）。 
```

`place-items`属性是`align-item`s属性和`justify-items`属性的合并简写形式。

```css
place-items: <align-items> <justify-items>;
```

### justify-content align-content place-content

`justify-content`属性是==整个内容区域在容器==里面的水平位置（左中右），`align-content`属性是==整个内容区域==的垂直位置（上中下）。

```css
.container {
  justify-content: start | end | center | stretch | space-around | space-between | space-evenly;
  align-content: start | end | center | stretch | space-around | space-between | space-evenly;  
}

start - 对齐容器的起始边框。
end - 对齐容器的结束边框。
center - 容器内部居中。
stretch - 项目大小没有指定时，拉伸占据整个网格容器。
space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。
space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。
```

`place-content`属性是`align-content`属性和`justify-content`属性的合并简写形式

```css
place-content: <align-content> <justify-content>
```

### grid-auto-columns grid-auto-rows

有时候，一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。

`grid-auto-columns`属性和`grid-auto-rows`属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与

### grid-template grid

`grid-template`属性是`grid-template-columns`、`grid-template-row`s和`grid-template-areas`这三个属性的合并简写形式。

`grid`属性是`grid-template-rows`、`grid-template-columns`、`grid-template-areas`、 `grid-auto-rows`、`grid-auto-columns`、`grid-auto-flow`这六个属性的合并简写形式。

## 项目属性

### `grid-column-start grid-column-end grid-row-start grid-row-end`

项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。

> grid-column-start属性：左边框所在的垂直网格线
> grid-column-end属性：右边框所在的垂直网格线
> grid-row-start属性：上边框所在的水平网格线
> grid-row-end属性：下边框所在的水平网格线

```css
.item-1 {
  grid-column-start: 2;
  grid-column-end: 4;

  /* 或者 */
  grid-column: 2 / 4;
  /* 指定为网格线的名字。 */
  grid-column-start: header-start;
  grid-column-end: header-end;
  /* 以使用span关键字，表示"跨越"，即左右边框（上下边框）之间跨越多少个网格。 */
  grid-column-start: span 2; // 左边框距离右边框跨越2个网格。

}
```
### grid-area 属性

```css
.item-1 {
  grid-area: e;
}

/* grid-area属性还可用作grid-row-start、grid-column-start、grid-row-end、grid-column-end的合并简写形式，直接指定项目的位置。 */

.item {
  grid-area: <row-start> / <column-start> / <row-end> / <column-end>;
}
```

### `justify-self align-self place-self `

`justify-self`属性设置单元格内容的水平位置（左中右），跟`justify-items`属性的用法完全一致，但只作用于单个项目。

`align-self`属性设置单元格内容的垂直位置（上中下），跟`align-items`属性的用法完全一致，也是只作用于单个项目。

```css
.item {
  justify-self: start | end | center | stretch;
  align-self: start | end | center | stretch;
}
```

> - start：对齐单元格的起始边缘。
> - end：对齐单元格的结束边缘。
> - center：单元格内部居中。
> - stretch：拉伸，占满单元格的整个宽度（默认值）。

`place-self`属性是align-self属性和justify-self属性的合并简写形式。

```css
place-self: <align-self> <justify-self>;
```
